{"version":3,"sources":["reportWebVitals.js","hooks/use-current-user.hook.js","pages/root.page.js","global/constants.js","flow/script.get-account-items.js","hooks/use-account-items.hook.js","flow/script.is-account-initialized.js","flow/util/tx.js","flow/tx.initialize-account.js","hooks/use-initialized.hook.js","pages/publish.page.js","flow/util/batch.js","flow/script.get-account-item.js","flow/tx.create-sale-offer.js","hooks/use-account-item.hook.js","comps/account-item.js","comps/account-items.js","pages/list.page.js","flow/sc.get-market-items.js","hooks/use-market-items.hook.js","flow/sc.get-market-item.js","flow/tx.buy-market-item.js","hooks/use-market-item.hook.js","comps/market-item.js","comps/market-items.js","pages/market.page.js","pages/mint/sidebar.js","pages/mint/index.js","pages/not-found.page.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","currentUser","atom","key","default","addr","loggedIn","cid","tools","logIn","fcl","logOut","signUp","changeUser","useCurrentUser","useRecoilState","user","setUser","useEffect","subscribe","Page","history","useHistory","to","onClick","e","preventDefault","push","IDLE","PROCESSING","CODE","fetchAccountItems","address","Promise","resolve","Address","d","sort","a","b","$state","atomFamily","selectorFamily","get","$status","useAccountItems","items","setItems","status","setStatus","ids","mint","recipient","name","imageUrl","color","info","quantity","fetch","process","method","headers","body","JSON","stringify","tokenURI","refresh","cdc","isAccountInitialized","send","script","args","arg","decode","noop","tx","mods","opts","onStart","onSubmission","onUpdate","onSuccess","onError","onComplete","txId","console","fvsTx","unsub","onceSealed","txStatus","error","env","initializeAccount","invariant","transaction","limit","proposer","authz","payer","authorizations","$address","$init","$computedInit","all","HandyItems","HandyItemsMarket","useState","txtAddress","txtName","txtImageURL","txtColor","txtInfo","txtQuantity","state","setState","init","setAddr","setInit","isInitialized","useRecoilValue","recheck","log","initialize","isSpecificInitialized","useInitialized","handleChange","target","value","handleSubmit","length","alert","className","htmlFor","id","onChange","disabled","callback","SET_CALLBACK","PROCESS","MAYBE_PROCESS","TIMEOUT","ENQUEUE","RESOLVE","HANDLERS","INIT","ctx","put","Set","setInterval","sendSelf","letter","uid","hold","reply","update","n","add","h","size","need","p","reduce","acc","result","_","results","have","Object","keys","delete","collate","px","addresses","t","map","Number","spawn","enqueue","expectReply","timeout","fetchAccountItem","createSaleOffer","itemID","price","Error","String","expand","split","AccountItemCluster","item","cu","accountItems","join","comp","setItem","owned","sansPrefix","sell","useAccountItem","WrappedAccountItemCluster","props","fallback","AccountItemsCluster","WrappedAccountItemsCluster","setAddress","count","setCount","getMarketItems","$marketItemsState","$marketItemsStatus","UInt64","buyMarketItem","ownerAddress","useMarketItem","getMarketItem","buy","MarketItemCluster","WrappedMarketItemCluster","MarketItemsCluster","useMarketItems","WrappedMarketItemsCluster","SideBar","Assets","type","window","val","staticType","ReactDOM","render","StrictMode","exact","path","document","getElementById"],"mappings":"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","file":"static/js/main.43720cb9.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {useEffect} from \"react\"\r\nimport {atom, useRecoilState} from \"recoil\"\r\nimport * as fcl from \"@onflow/fcl\"\r\n\r\nexport const currentUser = atom({\r\n  key: \"CURRENT_USER\",\r\n  default: {addr: null, loggedIn: null, cid: null},\r\n})\r\n\r\nconst tools = {\r\n  logIn: fcl.logIn,\r\n  logOut: fcl.unauthenticate,\r\n  signUp: fcl.signUp,\r\n  changeUser: fcl.reauthenticate,\r\n}\r\n\r\nexport function useCurrentUser() {\r\n  const [user, setUser] = useRecoilState(currentUser)\r\n  useEffect(() => fcl.currentUser().subscribe(setUser), [setUser])\r\n  return [user, user.addr != null, tools]\r\n}\r\n","\r\nimport {useCurrentUser} from \"../hooks/use-current-user.hook\"\r\nimport {Redirect, useHistory} from \"react-router-dom\"\r\n\r\nexport function Page() {\r\n  const [user, loggedIn, {signUp, logIn}] = useCurrentUser()\r\n  const history = useHistory();\r\n\r\n  if (loggedIn) return <Redirect to={\"/publish\"} />\r\n\r\n  const handleMint = (e) => {\r\n    e.preventDefault();\r\n    history.push(\"/publish\");\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <button onClick={logIn}>\r\n        Log In\r\n      </button>&nbsp;\r\n      <button onClick={signUp}>\r\n        Sign up\r\n      </button>&nbsp;\r\n      <button onClick={handleMint}>Mint an NFT</button>\r\n    </div>\r\n  )\r\n}\r\n","export const LOADING = \"LOADING\"\r\n\r\n// Exposed states of a Flow Transaction\r\nexport const IDLE = \"IDLE\"\r\nexport const PROCESSING = \"PROCESSING\"\r\nexport const SUCCESS = \"SUCCESS\"\r\nexport const ERROR = \"ERROR\"\r\n\r\n// How long to pause on a success or error message\r\n// before transitioning back to an IDLE state.\r\nexport const IDLE_DELAY = 1000\r\n","import * as fcl from \"@onflow/fcl\"\r\nimport {Address} from \"@onflow/types\"\r\n\r\nconst CODE = fcl.cdc`\r\nimport NonFungibleToken from 0xNonFungibleToken\r\nimport HandyItems from 0xHandyItems\r\n\r\n  pub fun main(address: Address): [UInt64] {\r\n    if let collection =  getAccount(address).getCapability<&HandyItems.Collection{NonFungibleToken.CollectionPublic, HandyItems.HandyItemsCollectionPublic}>(HandyItems.CollectionPublicPath).borrow() {\r\n      return collection.getIDs()\r\n    }\r\n\r\n    return []\r\n  }\r\n`\r\n\r\nexport function fetchAccountItems(address) {\r\n  if (address == null) return Promise.resolve([])\r\n\r\n  // prettier-ignore\r\n  return fcl.send([\r\n    fcl.script(CODE),\r\n    fcl.args([\r\n      fcl.arg(address, Address)\r\n    ]),\r\n  ]).then(fcl.decode).then(d => d.sort((a, b) => a - b))\r\n}\r\n","import {atomFamily, selectorFamily, useRecoilState} from \"recoil\"\r\nimport {fetchAccountItems} from \"../flow/script.get-account-items\"\r\nimport {IDLE, PROCESSING} from \"../global/constants\"\r\n\r\nexport const $state = atomFamily({\r\n  key: \"account-items::state\",\r\n  default: selectorFamily({\r\n    key: \"account-items::default\",\r\n    get: address => async () => {\r\n      return fetchAccountItems(address)},\r\n  }),\r\n})\r\n\r\nexport const $status = atomFamily({\r\n  key: \"account-items::status\",\r\n  default: IDLE,\r\n})\r\n\r\nexport function useAccountItems(address) {\r\n  const [items, setItems] = useRecoilState($state(address))\r\n  const [status, setStatus] = useRecoilState($status(address))\r\n\r\n  return {\r\n    ids: items,\r\n    status,\r\n\r\n    async mint(recipient, name, \r\n      imageUrl, color, info, quantity) {\r\n      setStatus(PROCESSING)\r\n      await fetch(process.env.REACT_APP_API_ITEM_MINT, {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify({\r\n          recipient: recipient,\r\n          name: name,\r\n          tokenURI: imageUrl,\r\n          color: color,\r\n          info: info,\r\n          quantity: quantity,\r\n        }),\r\n      })\r\n      await fetchAccountItems(recipient).then(setItems)\r\n      setStatus(IDLE)\r\n    },\r\n    async refresh() {\r\n      setStatus(PROCESSING)\r\n      await fetchAccountItems(address).then(setItems)\r\n      setStatus(IDLE)\r\n    },\r\n  }\r\n}\r\n","import {send, decode, script, args, arg, cdc} from \"@onflow/fcl\"\r\nimport {Address} from \"@onflow/types\"\r\n\r\nconst CODE = cdc`\r\n  import FungibleToken from 0xFungibleToken\r\n  import NonFungibleToken from 0xNonFungibleToken\r\n  import HandyItems from 0xHandyItems\r\n  import NFTStorefront from 0xNFTStorefront\r\n\r\n  pub fun hasItems(_ address: Address): Bool {\r\n    return getAccount(address)\r\n      .getCapability<&HandyItems.Collection{NonFungibleToken.CollectionPublic, HandyItems.HandyItemsCollectionPublic}>(HandyItems.CollectionPublicPath)\r\n      .check()\r\n  }\r\n\r\n  pub fun hasStorefront(_ address: Address): Bool {\r\n    return getAccount(address)\r\n      .getCapability<&NFTStorefront.Storefront{NFTStorefront.StorefrontPublic}>(NFTStorefront.StorefrontPublicPath)\r\n      .check()\r\n  }\r\n\r\n  pub fun main(address: Address): {String: Bool} {\r\n    let ret: {String: Bool} = {}\r\n    ret[\"HandyItems\"] = hasItems(address)\r\n    ret[\"HandyItemsMarket\"] = hasStorefront(address)\r\n    return ret\r\n  }\r\n`\r\n\r\nexport function isAccountInitialized(address) {\r\n  if (address == null || address == \"\")\r\n    return Promise.resolve(false)\r\n\r\n  // prettier-ignore\r\n  return send([\r\n    script(CODE),\r\n    args([\r\n      arg(address, Address)\r\n    ])\r\n  ]).then(decode)\r\n}\r\n","import * as fcl from \"@onflow/fcl\"\r\n\r\nconst noop = async () => {}\r\n\r\nexport async function tx(mods = [], opts = {}) {\r\n  const onStart = opts.onStart || noop\r\n  const onSubmission = opts.onSubmission || noop\r\n  const onUpdate = opts.onUpdate || noop\r\n  const onSuccess = opts.onSuccess || noop\r\n  const onError = opts.onError || noop\r\n  const onComplete = opts.onComplete || noop\r\n\r\n  try {\r\n    onStart()\r\n    var txId = await fcl.send(mods).then(fcl.decode)\r\n    console.info(\r\n      `%cTX[${txId}]: ${fvsTx(await fcl.config().get(\"env\"), txId)}`,\r\n      \"color:purple;font-weight:bold;font-family:monospace;\"\r\n    )\r\n    onSubmission(txId)\r\n    var unsub = await fcl.tx(txId).subscribe(onUpdate)\r\n    var txStatus = await fcl.tx(txId).onceSealed()\r\n    unsub()\r\n    console.info(\r\n      `%cTX[${txId}]: ${fvsTx(await fcl.config().get(\"env\"), txId)}`,\r\n      \"color:green;font-weight:bold;font-family:monospace;\"\r\n    )\r\n    await onSuccess(txStatus)\r\n    return txStatus\r\n  } catch (error) {\r\n    console.error(\r\n      `TX[${txId}]: ${fvsTx(await fcl.config().get(\"env\"), txId)}`,\r\n      error\r\n    )\r\n    onError(error)\r\n  } finally {\r\n    await onComplete()\r\n  }\r\n}\r\n\r\nfunction fvsTx(env, txId) {\r\n  return `https://flow-view-source.com/${env}/tx/${txId}`\r\n}\r\n","// prettier-ignore\r\nimport {transaction, limit, proposer, payer, authorizations, authz, cdc} from \"@onflow/fcl\"\r\nimport {invariant} from \"@onflow/util-invariant\"\r\nimport {tx} from \"./util/tx\"\r\n\r\nconst CODE = cdc`\r\n  import FungibleToken from 0xFungibleToken\r\n  import FlowToken from 0xFlowToken\r\n  import NonFungibleToken from 0xNonFungibleToken\r\n  import HandyItems from 0xHandyItems\r\n  import NFTStorefront from 0xNFTStorefront\r\n\r\n  pub fun hasItems(_ address: Address): Bool {\r\n    return getAccount(address)\r\n      .getCapability<&HandyItems.Collection{NonFungibleToken.CollectionPublic, HandyItems.HandyItemsCollectionPublic}>(HandyItems.CollectionPublicPath)\r\n      .check()\r\n  }\r\n\r\n  pub fun hasFLOW(_ address: Address): Bool {\r\n    let receiver = getAccount(address)\r\n      .getCapability<&FlowToken.Vault{FungibleToken.Receiver}>(/public/flowReceiver)\r\n      .check()\r\n\r\n    let balance = getAccount(address)\r\n      .getCapability<&FlowToken.Vault{FungibleToken.Balance}>(/public/flowBalance)\r\n      .check()\r\n\r\n    return receiver && balance\r\n  }\r\n\r\n  pub fun hasStorefront(_ address: Address): Bool {\r\n    return getAccount(address)\r\n      .getCapability<&NFTStorefront.Storefront{NFTStorefront.StorefrontPublic}>(NFTStorefront.StorefrontPublicPath)\r\n      .check()\r\n  }\r\n\r\n  transaction {\r\n    prepare(acct: AuthAccount) {\r\n\r\n      if !hasItems(acct.address) {\r\n        if acct.borrow<&HandyItems.Collection>(from: HandyItems.CollectionStoragePath) == nil {\r\n          acct.save(<-HandyItems.createEmptyCollection(), to: HandyItems.CollectionStoragePath)\r\n        }\r\n        acct.unlink(HandyItems.CollectionPublicPath)\r\n        acct.link<&HandyItems.Collection{NonFungibleToken.CollectionPublic, HandyItems.HandyItemsCollectionPublic}>(HandyItems.CollectionPublicPath, target: HandyItems.CollectionStoragePath)\r\n      }\r\n\r\n      if !hasStorefront(acct.address) {\r\n        if acct.borrow<&NFTStorefront.Storefront>(from: NFTStorefront.StorefrontStoragePath) == nil {\r\n          acct.save(<-NFTStorefront.createStorefront(), to: NFTStorefront.StorefrontStoragePath)\r\n        }\r\n        acct.unlink(NFTStorefront.StorefrontPublicPath)\r\n        acct.link<&NFTStorefront.Storefront{NFTStorefront.StorefrontPublic}>(NFTStorefront.StorefrontPublicPath, target: NFTStorefront.StorefrontStoragePath)\r\n      }\r\n    }\r\n  }\r\n`\r\n\r\nexport async function initializeAccount(address, opts = {}) {\r\n  // prettier-ignore\r\n  invariant(address != null, \"Tried to initialize an account but no address was supplied\")\r\n\r\n  return tx(\r\n    [\r\n      transaction(CODE),\r\n      limit(70),\r\n      proposer(authz),\r\n      payer(authz),\r\n      authorizations([authz]),\r\n    ],\r\n    opts\r\n  )\r\n}\r\n","import {\r\n  atomFamily,\r\n  selectorFamily,\r\n  useRecoilState,\r\n  useRecoilValue,\r\n} from \"recoil\"\r\nimport {\r\n  LOADING,\r\n  IDLE,\r\n  PROCESSING,\r\n  SUCCESS,\r\n  ERROR,\r\n  IDLE_DELAY,\r\n} from \"../global/constants\"\r\nimport {isAccountInitialized} from \"../flow/script.is-account-initialized\"\r\nimport {initializeAccount} from \"../flow/tx.initialize-account\"\r\n\r\nexport const $address = atomFamily({\r\n  key: \"init::address\",\r\n  default: null,\r\n})\r\n\r\nexport const $status = atomFamily({\r\n  key: \"init::status\",\r\n  default: IDLE,\r\n})\r\n\r\nexport const $init = atomFamily({\r\n  key: \"init::state\",\r\n  default: selectorFamily({\r\n    key: \"init::default\",\r\n    get: address => () => isAccountInitialized(address),\r\n  }),\r\n})\r\n\r\nexport const $computedInit = selectorFamily({\r\n  key: \"init::computed\",\r\n  get:\r\n    address =>\r\n    async ({get}) => {\r\n      const all = get($init(address))\r\n      return all.HandyItems || all.HandyItemsMarket\r\n    },\r\n})\r\n\r\nexport function useInitialized(addr) {\r\n  const [address, setAddr] = useRecoilState($address(addr))\r\n  const [init, setInit] = useRecoilState($init(address))\r\n  const isInitialized = useRecoilValue($computedInit(address))\r\n  const [status, setStatus] = useRecoilState($status(address))\r\n\r\n  console.log(address)\r\n\r\n  function recheck() {\r\n    isAccountInitialized(address).then(setInit)\r\n  }\r\n\r\n  return {\r\n    ...init,\r\n    isInitialized,\r\n    status: isInitialized == null ? LOADING : status,\r\n    recheck,\r\n    async initialize(addr) {\r\n      initializeAccount(addr != null ? addr \r\n        : address, {\r\n        onStart() {\r\n          setStatus(PROCESSING)\r\n        },\r\n        async onSuccess() {\r\n          recheck()\r\n          setStatus(SUCCESS)\r\n        },\r\n        onError() {\r\n          setStatus(ERROR)\r\n        },\r\n        async onComplete() {\r\n          setStatus(IDLE)\r\n        },\r\n      })\r\n    },\r\n    async isSpecificInitialized(address) {\r\n      const all = await isAccountInitialized(address)\r\n      console.log(all)\r\n      setAddr(address)\r\n      return all.HandyItems || all.HandyItemsMarket\r\n    }\r\n  }\r\n}\r\n","\r\nimport {IDLE} from \"../global/constants\"\r\nimport {useCurrentUser} from \"../hooks/use-current-user.hook\"\r\nimport {useAccountItems} from \"../hooks/use-account-items.hook\"\r\nimport { useInitialized } from \"../hooks/use-initialized.hook\"\r\nimport {Suspense, useState} from \"react\"\r\nimport {Redirect, useHistory} from \"react-router-dom\"\r\n\r\nimport './publish.css'\r\n\r\nexport function Page() {\r\n  const [state, setState] = useState({\r\n    txtAddress: \"\",\r\n    txtName: \"\",\r\n    txtImageURL: \"\", \r\n    txtColor: \"\",\r\n    txtInfo: \"\",\r\n    txtQuantity: \"\"\r\n  })\r\n  const history = useHistory();\r\n  const [user] = useCurrentUser()\r\n\r\n  // if (user.addr == null) return <Redirect to={\"/\"} />\r\n  const items = useAccountItems(user.addr)\r\n  const init = useInitialized(null)\r\n\r\n  const handleInit = (e) => {\r\n    e.preventDefault();\r\n    init.initialize(state.txtAddress);\r\n  }\r\n\r\n  const handleChange = (e) => {\r\n    setState({\r\n      ...state, \r\n      [e.target.name]: e.target.value\r\n    })\r\n  }\r\n\r\n  const handleView = (e) => {\r\n    e.preventDefault();\r\n    history.push(\"/list\");\r\n  }\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n\r\n    if (state.txtAddress.length != 18) {\r\n      alert(\"Enter Address Corretly!\");\r\n      return;\r\n    }\r\n\r\n    if (!await init.isSpecificInitialized(state.txtAddress)) {\r\n      alert(\"Initialize account first!\");\r\n      return;\r\n    }\r\n\r\n    items.mint(\r\n      state.txtAddress, \r\n      state.txtName, \r\n      state.txtImageURL, \r\n      state.txtColor, \r\n      state.txtInfo, \r\n      state.txtQuantity\r\n      )\r\n\r\n      console.log(items.ids.length);\r\n  }\r\n\r\n  const handleMarket = (e) => {\r\n    e.preventDefault();\r\n    history.push(\"/market\");\r\n  }\r\n\r\n  return (\r\n    <div className=\"grid-center\">\r\n      <h1>{user.addr}</h1>\r\n      <h1>Publish a NFT</h1>\r\n      <form>\r\n        <div className=\"grid-container\">\r\n          <label htmlFor=\"txtName\">Name</label> \r\n          <input name=\"txtName\" id=\"txtName\" onChange={handleChange} />\r\n          <label htmlFor=\"txtAddress\">Address</label> \r\n          <input name=\"txtAddress\" id=\"txtAddress\" onChange={handleChange} />\r\n          <label>Image URL</label> \r\n          <input name=\"txtImageURL\" id=\"txtImageURL\" onChange={handleChange} />\r\n          <label>Color</label> \r\n          <input name=\"txtColor\" id=\"txtColor\" onChange={handleChange} />\r\n          <label>Info</label> \r\n          <input name=\"txtInfo\" id=\"txtInfo\" onChange={handleChange} />\r\n          {1 == 0 && <><label>Quantity</label> \r\n          <input name=\"txtQuantity\" id=\"txtQuantity\" onChange={handleChange} />\r\n          </>}\r\n          <label>Series</label> \r\n          <input name=\"txtSeries\" id=\"txtSeries\" onChange={handleChange} />\r\n          <button disabled={user.addr !== state.txtAddress} onClick={handleInit}>\r\n            Initialize\r\n          </button>\r\n          <button disabled={items.status !== IDLE} onClick={handleSubmit}>\r\n            Send\r\n          </button>\r\n          <button onClick={handleView}>View List</button>\r\n          <button onClick={handleMarket}>View Marketplace</button>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  )\r\n}\r\n","// TODO: MOVE TO @onflow/util-batch\r\nimport {spawn, send, INIT} from \"@onflow/util-actor\"\r\nimport {uid} from \"@onflow/util-uid\"\r\n\r\nconst TICK = 500\r\nconst BUFFER_SIZE = 10\r\n\r\nconst SET_CALLBACK = \"SET_CALLBACK\"\r\nconst PROCESS = \"PROCESS\"\r\nconst MAYBE_PROCESS = \"MAYBE_PROCESS\"\r\nconst TIMEOUT = \"TIMEOUT\"\r\nconst ENQUEUE = \"ENQUEUE\"\r\nconst RESOLVE = \"RESOLVE\"\r\n\r\nconst HANDLERS = {\r\n  [INIT]: ctx => {\r\n    ctx.put(\"need\", new Set())\r\n    ctx.put(\"processing\", new Set())\r\n    ctx.put(\"hold\", {})\r\n    setInterval(() => ctx.sendSelf(TIMEOUT), TICK)\r\n  },\r\n\r\n  [SET_CALLBACK]: (ctx, letter, callback) => {\r\n    ctx.put(\"callback\", async (...args) => callback(...args))\r\n    ctx.sendSelf(MAYBE_PROCESS)\r\n  },\r\n\r\n  [ENQUEUE]: (ctx, letter, args) => {\r\n    const id = uid()\r\n    const hold = {id, args, reply: letter.reply}\r\n    ctx.update(\"need\", n => {\r\n      n.add(id)\r\n      return n\r\n    })\r\n    ctx.update(\"hold\", h => ({...h, [id]: hold}))\r\n    ctx.sendSelf(MAYBE_PROCESS)\r\n  },\r\n\r\n  [TIMEOUT]: ctx => {\r\n    if (ctx.get(\"need\").size) ctx.sendSelf(PROCESS)\r\n  },\r\n\r\n  [MAYBE_PROCESS]: ctx => {\r\n    if (ctx.get(\"need\") >= BUFFER_SIZE) ctx.sendSelf(PROCESS)\r\n  },\r\n\r\n  [PROCESS]: ctx => {\r\n    const callback = ctx.get(\"callback\")\r\n    if (typeof callback !== \"function\") return\r\n\r\n    const need = ctx.get(\"need\")\r\n    ctx.update(\"processing\", p => new Set([...p, ...need]))\r\n    ctx.put(\"need\", new Set())\r\n\r\n    const hold = ctx.get(\"hold\")\r\n    const payload = [...need].reduce(\r\n      (acc, key) => ({...acc, [key]: hold[key].args}),\r\n      {}\r\n    )\r\n\r\n    callback(payload).then(result => {\r\n      ctx.sendSelf(RESOLVE, result)\r\n    })\r\n  },\r\n  [RESOLVE]: (ctx, _, results) => {\r\n    const have = Object.keys(results)\r\n    for (let h of have) {\r\n      const hold = ctx.get(\"hold\")\r\n      hold[h].reply(results[h])\r\n      ctx.update(\"processing\", p => {\r\n        p.delete(h)\r\n        return p\r\n      })\r\n      ctx.update(\"hold\", hold => {\r\n        delete hold[h]\r\n        return hold\r\n      })\r\n    }\r\n  },\r\n}\r\n\r\nexport const batch = (name, callback) => {\r\n  spawn(HANDLERS, name)\r\n  send(name, SET_CALLBACK, callback)\r\n\r\n  return {\r\n    enqueue(...args) {\r\n      return send(name, ENQUEUE, args, {expectReply: true, timeout: 0})\r\n    },\r\n  }\r\n}\r\n","import * as fcl from \"@onflow/fcl\"\r\nimport * as t from \"@onflow/types\"\r\nimport {batch} from \"./util/batch\"\r\n\r\nconst CODE = fcl.cdc`\r\nimport NonFungibleToken from 0xNonFungibleToken\r\nimport HandyItems from 0xHandyItems\r\n\r\npub struct AccountItem {\r\n  pub let itemID: UInt64\r\n  pub let name: String\r\n  pub let tokenURI: String\r\n  pub let color: String\r\n  pub let info: String\r\n  pub let owner: Address\r\n\r\n  init(itemID: UInt64, name: String, tokenURI: String, color: String, info: String, owner: Address) {\r\n    self.itemID = itemID\r\n    self.name = name\r\n    self.tokenURI = tokenURI\r\n    self.color = color\r\n    self.info = info\r\n    self.owner = owner\r\n  }\r\n}\r\n\r\npub fun fetch(address: Address, id: UInt64): AccountItem? {\r\n  if let col = getAccount(address).getCapability<&HandyItems.Collection{NonFungibleToken.CollectionPublic, HandyItems.HandyItemsCollectionPublic}>(HandyItems.CollectionPublicPath).borrow() {\r\n    if let item = col.borrowHandyItem(id: id) {\r\n      return AccountItem(itemID: id, name: item.name, tokenURI: item.tokenURI, \r\n        color: item.color, info: item.info, owner: address)\r\n    }\r\n  }\r\n\r\n  return nil\r\n}\r\n\r\npub fun main(keys: [String], addresses: [Address], ids: [UInt64]): {String: AccountItem?} {\r\n  let r: {String: AccountItem?} = {}\r\n  var i = 0\r\n  while i < keys.length {\r\n    let key = keys[i]\r\n    let address = addresses[i]\r\n    let id = ids[i]\r\n    r[key] = fetch(address: address, id: id)\r\n    i = i + 1\r\n  }\r\n  return r\r\n}\r\n`\r\n\r\nconst collate = px => {\r\n  return Object.keys(px).reduce(\r\n    (acc, key) => {\r\n      acc.keys.push(key)\r\n      acc.addresses.push(px[key][0])\r\n      acc.ids.push(px[key][1])\r\n      return acc\r\n    },\r\n    {keys: [], addresses: [], ids: []}\r\n  )\r\n}\r\n\r\nconst {enqueue} = batch(\"FETCH_ACCOUNT_ITEM\", async px => {\r\n  const {keys, addresses, ids} = collate(px)\r\n\r\n  return fcl\r\n    .send([\r\n      fcl.script(CODE),\r\n      fcl.args([\r\n        fcl.arg(keys, t.Array(t.String)),\r\n        fcl.arg(addresses, t.Array(t.Address)),\r\n        fcl.arg(ids.map(Number), t.Array(t.UInt64)),\r\n      ]),\r\n    ])\r\n    .then(fcl.decode)\r\n})\r\n\r\nexport async function fetchAccountItem(address, id) {\r\n  if (address == null) return Promise.resolve(null)\r\n  if (id == null) return Promise.resolve(null)\r\n  return enqueue(address, id)\r\n}\r\n","import * as fcl from \"@onflow/fcl\"\r\nimport * as t from \"@onflow/types\"\r\nimport {tx} from \"./util/tx\"\r\n\r\nconst CODE = fcl.cdc`\r\n  import FungibleToken from 0xFungibleToken\r\n  import NonFungibleToken from 0xNonFungibleToken\r\n  import FlowToken from 0xFlowToken \r\n  import HandyItems from 0xHandyItems\r\n  import NFTStorefront from 0xNFTStorefront\r\n\r\n  transaction(saleItemID: UInt64, saleItemPrice: UFix64) {\r\n\r\n    let flowReceiver: Capability<&FlowToken.Vault{FungibleToken.Receiver}>\r\n    let handyItemsCollection: Capability<&HandyItems.Collection{NonFungibleToken.Provider, NonFungibleToken.CollectionPublic}>\r\n    let storefront: &NFTStorefront.Storefront\r\n\r\n    prepare(account: AuthAccount) {\r\n      // We need a provider capability, but one is not provided by default so we create one if needed.\r\n      let handyItemsCollectionProviderPrivatePath = /private/handyItemsCollectionProvider\r\n\r\n      self.flowReceiver = account.getCapability<&FlowToken.Vault{FungibleToken.Receiver}>(/public/flowTokenReceiver)!\r\n\r\n      assert(self.flowReceiver.borrow() != nil, message: \"Missing or mis-typed FlowToken receiver\")\r\n\r\n      if !account.getCapability<&HandyItems.Collection{NonFungibleToken.Provider, NonFungibleToken.CollectionPublic}>(handyItemsCollectionProviderPrivatePath)!.check() {\r\n        account.link<&HandyItems.Collection{NonFungibleToken.Provider, NonFungibleToken.CollectionPublic}>(handyItemsCollectionProviderPrivatePath, target: HandyItems.CollectionStoragePath)\r\n      }\r\n\r\n      self.handyItemsCollection = account.getCapability<&HandyItems.Collection{NonFungibleToken.Provider, NonFungibleToken.CollectionPublic}>(handyItemsCollectionProviderPrivatePath)!\r\n      assert(self.handyItemsCollection.borrow() != nil, message: \"Missing or mis-typed HandyItemsCollection provider\")\r\n      \r\n      self.storefront = account.borrow<&NFTStorefront.Storefront>(from: NFTStorefront.StorefrontStoragePath)\r\n        ?? panic(\"Missing or mis-typed NFTStorefront Storefront\")\r\n    }\r\n\r\n    execute {\r\n      let saleCut = NFTStorefront.SaleCut(\r\n        receiver: self.flowReceiver,\r\n        amount: saleItemPrice\r\n      )\r\n\r\n      self.storefront.createSaleOffer(\r\n        nftProviderCapability: self.handyItemsCollection,\r\n        nftType: Type<@HandyItems.NFT>(),\r\n        nftID: saleItemID,\r\n        salePaymentVaultType: Type<@FlowToken.Vault>(),\r\n        saleCuts: [saleCut]\r\n      )\r\n    }\r\n  }\r\n\r\n`\r\n\r\nexport function createSaleOffer({itemID, price}, opts = {}) {\r\n  if (itemID == null)\r\n    throw new Error(\"createSaleOffer(itemID, price) -- itemID required\")\r\n  if (price == null)\r\n    throw new Error(\"createSaleOffer(itemID, price) -- price required\")\r\n\r\n  // prettier-ignore\r\n  return tx([\r\n    fcl.transaction(CODE),\r\n    fcl.args([\r\n      fcl.arg(Number(itemID), t.UInt64),\r\n      fcl.arg(String(price), t.UFix64),\r\n    ]),\r\n    fcl.proposer(fcl.authz),\r\n    fcl.payer(fcl.authz),\r\n    fcl.authorizations([\r\n      fcl.authz\r\n    ]),\r\n    fcl.limit(1000)\r\n  ], opts)\r\n}\r\n","import {sansPrefix} from \"@onflow/fcl\"\r\nimport {atomFamily, selectorFamily, useRecoilState} from \"recoil\"\r\nimport {useCurrentUser} from \"../hooks/use-current-user.hook\"\r\nimport {fetchAccountItem} from \"../flow/script.get-account-item\"\r\nimport {createSaleOffer} from \"../flow/tx.create-sale-offer\"\r\nimport {IDLE, PROCESSING} from \"../global/constants\"\r\nimport {useAccountItems} from \"../hooks/use-account-items.hook\"\r\n\r\nfunction expand(key) {\r\n  return key.split(\"|\")\r\n}\r\n\r\nfunction comp(address, id) {\r\n  return [address, id].join(\"|\")\r\n}\r\n\r\nexport const $state = atomFamily({\r\n  key: \"account-item::state\",\r\n  default: selectorFamily({\r\n    key: \"account-item::default\",\r\n    get: key => async () => fetchAccountItem(...expand(key)),\r\n  }),\r\n})\r\n\r\nexport const $status = atomFamily({\r\n  key: \"account-item::status\",\r\n  default: IDLE,\r\n})\r\n\r\nexport function useAccountItem(address, id) {\r\n  const [cu] = useCurrentUser()\r\n  const accountItems = useAccountItems(address)\r\n  const key = comp(address, id)\r\n  const [item, setItem] = useRecoilState($state(key))\r\n  const [status, setStatus] = useRecoilState($status(key))\r\n\r\n  return {\r\n    ...item,\r\n    status,\r\n    owned: sansPrefix(cu.addr) === sansPrefix(address),\r\n    async refresh() {\r\n      setStatus(PROCESSING)\r\n      await fetchAccountItem(...expand(key)).then(setItem)\r\n      setStatus(IDLE)\r\n    },\r\n    async sell(price) {\r\n      await createSaleOffer(\r\n        {itemID: id, price: price},\r\n        {\r\n          onStart() {\r\n            setStatus(PROCESSING)\r\n          },\r\n          async onSuccess() {\r\n            accountItems.refresh()\r\n          },\r\n          async onComplete() {\r\n            setStatus(IDLE)\r\n          },\r\n          async onError(error) {\r\n            \r\n          },\r\n        }\r\n      )\r\n    },\r\n  }\r\n}\r\n","import React, {useEffect, useState, Suspense} from \"react\"\r\nimport {useAccountItem} from \"../hooks/use-account-item.hook\"\r\nimport {useCurrentUser} from \"../hooks/use-current-user.hook\"\r\nimport {IDLE} from \"../global/constants\"\r\n\r\nexport function AccountItemCluster({address, id}) {\r\n  const item = useAccountItem(address, id)\r\n\r\n  const BUSY = item.status !== IDLE\r\n\r\n  if (address == null) return null\r\n  if (id == null) return null\r\n \r\n  return (\r\n    <div className=\"grid-list\">\r\n      <h3>Handy#{item.itemID}</h3>\r\n\r\n      <p>{item.name}</p>\r\n      <p>{item.tokenURI}</p>\r\n      <p>{item.color}</p>\r\n      <p>{item.info}</p>\r\n      <button \r\n        onClick={() => item.sell(\"5.0\")}\r\n      >\r\n        Sell\r\n      </button>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default function WrappedAccountItemCluster(props) {\r\n  return (\r\n    <Suspense fallback={null}>\r\n      <AccountItemCluster {...props} />\r\n    </Suspense>\r\n  )\r\n}\r\n","import {Suspense} from \"react\"\r\nimport {useAccountItems} from \"../hooks/use-account-items.hook\"\r\nimport {useCurrentUser} from \"../hooks/use-current-user.hook\"\r\nimport Item from \"./account-item\"\r\n\r\nexport function AccountItemsCluster({address}) {\r\n  const items = useAccountItems(address)\r\n  const [cu] = useCurrentUser()\r\n\r\n  if (address == null) return null\r\n\r\n  if (items.ids.length <= 0)\r\n    return (\r\n      <p>No Items</p>\r\n    )\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"grid-list\">\r\n        <h2>ID</h2>\r\n        <h2>Name</h2>\r\n        <h2>Image URL</h2>\r\n        <h2>Color</h2>\r\n        <h2>Info</h2>\r\n      </div>\r\n      {items.ids.map(id => (\r\n        <Item key={id} id={id} address={address} />\r\n      ))}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default function WrappedAccountItemsCluster({address}) {\r\n  return (\r\n    <Suspense fallback={null}>\r\n      <AccountItemsCluster address={address} />\r\n    </Suspense>\r\n  )\r\n}\r\n","\r\nimport {IDLE} from \"../global/constants\"\r\nimport {useCurrentUser} from \"../hooks/use-current-user.hook\"\r\nimport {useAccountItems} from \"../hooks/use-account-items.hook\"\r\nimport {Suspense, useState} from \"react\"\r\nimport {Redirect, useHistory} from \"react-router-dom\"\r\nimport AccountItemsCluster from '../comps/account-items'\r\n\r\nimport './list.css'\r\n\r\nexport function Page() {\r\n  const [state, setState] = useState({\r\n    txtAddress: \"\"\r\n  })\r\n  const [address, setAddress] = useState(\"\");\r\n  const [count, setCount] = useState(0);\r\n  const history = useHistory();\r\n  const [user] = useCurrentUser()\r\n\r\n  // if (user.addr == null) return <Redirect to={\"/\"} />\r\n\r\n  const handleChange = (e) => {\r\n    setState({\r\n      ...state,\r\n      [e.target.name]: e.target.value,\r\n    })\r\n  }\r\n\r\n  const handleList = (e) => {\r\n\r\n    if (state.txtAddress.length != 18) {\r\n      alert(\"Enter Address Corretly!\");\r\n      return;\r\n    }\r\n\r\n    setAddress(state.txtAddress);\r\n    setCount(1 - count);\r\n  }\r\n\r\n  const handleMint = (e) => {\r\n    e.preventDefault();\r\n    history.push(\"/publish\");\r\n  }\r\n\r\n  const handleMarket = (e) => {\r\n    e.preventDefault();\r\n    history.push(\"/market\");\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h1>NFT Listings</h1>\r\n\t    <div>\r\n        <label>Address: </label>\r\n        <input name=\"txtAddress\" id=\"txtAddress\" onChange={handleChange}/>&nbsp;\r\n        <button onClick={handleList}>List NFTs</button>\r\n        &nbsp;<button onClick={handleMint}>Mint an NFT</button>\r\n        &nbsp;<button onClick={handleMarket}>View Marketplace</button>\r\n        {\r\n          address != \"\" && <AccountItemsCluster address={address} />\r\n        }\r\n\t    </div>\r\n    </div>\r\n  )\r\n}\r\n","import {send, decode, script, args, arg, cdc} from \"@onflow/fcl\"\r\nimport {Address} from \"@onflow/types\"\r\n\r\nconst CODE = cdc`\r\nimport NFTStorefront from 0xNFTStorefront\r\n\r\npub fun main(account: Address): [UInt64] {\r\n    let storefrontRef = getAccount(account)\r\n        .getCapability<&NFTStorefront.Storefront{NFTStorefront.StorefrontPublic}>(\r\n            NFTStorefront.StorefrontPublicPath\r\n        )\r\n        .borrow()\r\n        ?? panic(\"Could not borrow public storefront from address\")\r\n    \r\n    return storefrontRef.getSaleOfferIDs()\r\n}\r\n`\r\n\r\nexport function getMarketItems(address) {\r\n  if (address == null || address == \"\")\r\n    return Promise.resolve([])\r\n\r\n  // prettier-ignore\r\n  return send([\r\n    script(CODE),\r\n    args([\r\n      arg(address, Address)\r\n    ])\r\n  ]).then(decode).then(d => d.sort((a, b) => a - b))\r\n}","import { useEffect } from \"react\";\r\nimport { atom, useRecoilState } from \"recoil\"\r\nimport { getMarketItems } from \"../flow/sc.get-market-items\";\r\nimport {IDLE, PROCESSING} from \"../global/constants\"\r\n\r\nexport const $marketItemsState = atom({\r\n  key: \"market-items::state\",\r\n  default: [],\r\n})\r\n\r\nexport const $marketItemsStatus = atom({\r\n  key: \"market-items::status\",\r\n  default: IDLE,\r\n})\r\n\r\nexport function useMarketItems(address) {\r\n  const [items, setItems] = useRecoilState($marketItemsState);\r\n  const [status, setStatus] = useRecoilState($marketItemsStatus);\r\n\r\n  useEffect(() => {\r\n    getMarketItems(address).then(setItems);\r\n  }, [address]);\r\n\r\n  return {\r\n    items,\r\n    status,\r\n    refresh() {\r\n      getMarketItems(address).then(setItems);\r\n    }\r\n  }\r\n}","import { send, script, args, arg, decode } from \"@onflow/fcl\"\r\nimport { Address, UInt64 } from \"@onflow/types\"\r\n\r\nexport async function getMarketItem(address, id) {\r\n  return send([\r\n      script`\r\n        import HandyItems from 0xHandyItems\r\n        import NonFungibleToken from 0xNonFungibleToken\r\n        import NFTStorefront from 0xNFTStorefront\r\n\r\n        pub struct SaleItem {\r\n          pub let itemID: UInt64\r\n          pub let name: String\r\n          pub let tokenURI: String\r\n          pub let color: String\r\n          pub let info: String\r\n          pub let owner: Address\r\n          pub let price: UFix64\r\n\r\n          init(itemID: UInt64, name: String, tokenURI: String, color: String,info: String, owner: Address, price: UFix64) {\r\n            self.itemID = itemID\r\n            self.name = name\r\n            self.tokenURI = tokenURI\r\n            self.color = color\r\n            self.info = info\r\n            self.owner = owner\r\n            self.price = price\r\n          }\r\n        }\r\n\r\n        pub fun main(address: Address, saleOfferResourceID: UInt64): SaleItem? {\r\n          let account = getAccount(address)\r\n\r\n          if let storefrontRef = account.getCapability<&NFTStorefront.Storefront{NFTStorefront.StorefrontPublic}>(NFTStorefront.StorefrontPublicPath).borrow() {\r\n            if let saleOffer = storefrontRef.borrowSaleOffer(saleOfferResourceID: saleOfferResourceID) {\r\n              let details = saleOffer.getDetails()\r\n\r\n              let itemID = details.nftID\r\n              let itemPrice = details.salePrice\r\n\r\n              if let collection = account.getCapability<&HandyItems.Collection{NonFungibleToken.CollectionPublic, HandyItems.HandyItemsCollectionPublic}>(HandyItems.CollectionPublicPath).borrow() {\r\n                if let item = collection.borrowHandyItem(id: itemID) {\r\n                  return SaleItem(itemID: itemID, name: item.name, tokenURI: item.tokenURI, \r\n                    color: item.color, info: item.info, owner: address, price: itemPrice)\r\n                }\r\n              }\r\n            }\r\n          }\r\n            \r\n          return nil\r\n        }\r\n    `,\r\n      args([arg(address, Address), arg(Number(id), UInt64)]),\r\n    ])\r\n    .then(decode)\r\n}\r\n","import * as fcl from \"@onflow/fcl\"\r\nimport * as t from \"@onflow/types\"\r\nimport {tx} from \"./util/tx\"\r\nimport {invariant} from \"@onflow/util-invariant\"\r\n\r\nconst CODE = fcl.cdc`\r\n  import FungibleToken from 0xFungibleToken\r\n  import NonFungibleToken from 0xNonFungibleToken\r\n  import FlowToken from 0xFlowToken\r\n  import HandyItems from 0xHandyItems\r\n  import NFTStorefront from 0xNFTStorefront\r\n\r\n  transaction(saleOfferResourceID: UInt64, storefrontAddress: Address) {\r\n\r\n    let paymentVault: @FungibleToken.Vault\r\n    let handyItemsCollection: &HandyItems.Collection{NonFungibleToken.Receiver}\r\n    let storefront: &NFTStorefront.Storefront{NFTStorefront.StorefrontPublic}\r\n    let saleOffer: &NFTStorefront.SaleOffer{NFTStorefront.SaleOfferPublic}\r\n\r\n    prepare(account: AuthAccount) {\r\n      self.storefront = getAccount(storefrontAddress)\r\n        .getCapability<&NFTStorefront.Storefront{NFTStorefront.StorefrontPublic}>(\r\n          NFTStorefront.StorefrontPublicPath\r\n        )!\r\n        .borrow()\r\n        ?? panic(\"Could not borrow Storefront from provided address\")\r\n\r\n      self.saleOffer = self.storefront.borrowSaleOffer(saleOfferResourceID: saleOfferResourceID)\r\n        ?? panic(\"No Offer with that ID in Storefront\")\r\n      \r\n      let price = self.saleOffer.getDetails().salePrice\r\n\r\n      let mainFlowVault = account.borrow<&FlowToken.Vault>(from: /storage/flowTokenVault)\r\n        ?? panic(\"Cannot borrow Kibble vault from account storage\")\r\n      \r\n      self.paymentVault <- mainFlowVault.withdraw(amount: price)\r\n\r\n      self.handyItemsCollection = account.borrow<&HandyItems.Collection{NonFungibleToken.Receiver}>(\r\n        from: HandyItems.CollectionStoragePath\r\n      ) ?? panic(\"Cannot borrow HandyItems collection receiver from account\")\r\n    }\r\n  \r\n    execute {\r\n      let item <- self.saleOffer.accept(\r\n        payment: <-self.paymentVault\r\n      )\r\n\r\n      self.handyItemsCollection.deposit(token: <-item)\r\n\r\n      self.storefront.cleanup(saleOfferResourceID: saleOfferResourceID)\r\n    }\r\n  }\r\n`\r\n\r\n// prettier-ignore\r\nexport function buyMarketItem({itemID, ownerAddress}, opts = {}) {\r\n  invariant(itemID != null, \"buyMarketItem({itemID, ownerAddress}) -- itemID required\")\r\n  invariant(ownerAddress != null, \"buyMarketItem({itemID, ownerAddress}) -- ownerAddress required\")\r\n\r\n  return tx([\r\n    fcl.transaction(CODE),\r\n    fcl.args([\r\n      fcl.arg(Number(itemID), t.UInt64),\r\n      fcl.arg(String(ownerAddress), t.Address),\r\n    ]),\r\n    fcl.proposer(fcl.authz),\r\n    fcl.payer(fcl.authz),\r\n    fcl.authorizations([fcl.authz]),\r\n    fcl.limit(1000),\r\n  ], opts)\r\n}\r\n","import { useEffect, useState } from \"react\";\r\nimport { getMarketItem } from \"../flow/sc.get-market-item\";\r\nimport { buyMarketItem } from \"../flow/tx.buy-market-item\"\r\n\r\nexport function useMarketItem(address, id) {\r\n  const [item, setItem] = useState({});\r\n\r\n  console.log(item.price);\r\n\r\n  useEffect(() => {\r\n      getMarketItem(address, id).then(setItem);\r\n  }, [address, id]);\r\n\r\n  return {\r\n    ...item,\r\n    async buy() {\r\n      await buyMarketItem(\r\n        {itemID: id, ownerAddress: address},\r\n        {\r\n          onStart() {\r\n          },\r\n          async onSuccess() {\r\n          },\r\n          async onComplete() {\r\n          },\r\n          async onError(error) {\r\n          },\r\n        }\r\n      )\r\n    },\r\n  }\r\n}","import {Suspense} from \"react\"\r\nimport {useMarketItem} from \"../hooks/use-market-item.hook\"\r\nimport {useCurrentUser} from \"../hooks/use-current-user.hook\"\r\nimport {IDLE} from \"../global/constants\"\r\n\r\nexport function MarketItemCluster({address, id}) {\r\n  const [cu, loggedIn] = useCurrentUser()\r\n  const item = useMarketItem(address, id)\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"grid-list\">\r\n        <h3>Handy#{item.itemID}</h3>\r\n\r\n        <p>{item.name}</p>\r\n        <p>{item.tokenURI}</p>\r\n        <p>{item.color}</p>\r\n        <p>{item.info}</p>\r\n        <button \r\n          onClick={() => item.buy()}\r\n        >\r\n          Buy\r\n        </button>\r\n     </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default function WrappedMarketItemCluster(props) {\r\n  return (\r\n    <Suspense fallback={null}>\r\n      <MarketItemCluster {...props} />\r\n    </Suspense>\r\n  )\r\n}\r\n","import {Suspense} from \"react\"\r\nimport {useMarketItems} from \"../hooks/use-market-items.hook\"\r\nimport Item from './market-item'\r\n\r\nexport function MarketItemsCluster() {\r\n  const {items} = useMarketItems(\"0x048ac6df55e9c6e6\");\r\n\r\n  if (items.length == 0)\r\n    return (\r\n      <p>No items listed for sale</p>\r\n    )\r\n\r\n  return (\r\n    <div>\r\n      <h1>NFT Marketplace</h1>\r\n      <div className=\"grid-list\">\r\n        <h2>ID</h2>\r\n        <h2>Name</h2>\r\n        <h2>Image URL</h2>\r\n        <h2>Color</h2>\r\n        <h2>Info</h2>\r\n      </div>\r\n      {items.map(item => \r\n          <Item\r\n            key={item}\r\n            id={item}\r\n            address={\"0x048ac6df55e9c6e6\"}\r\n          />\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default function WrappedMarketItemsCluster() {\r\n  return (\r\n    <Suspense fallback={null}>\r\n      <MarketItemsCluster />\r\n    </Suspense>\r\n  )\r\n}","\r\nimport {useCurrentUser} from \"../hooks/use-current-user.hook\"\r\nimport {Suspense, useState} from \"react\"\r\nimport {Redirect, useHistory} from \"react-router-dom\"\r\nimport MarketItems from \"../comps/market-items\"\r\n\r\nexport function Page() {\r\n  const history = useHistory();\r\n  const [user] = useCurrentUser()\r\n\r\n  // if (user.addr == null) return <Redirect to={\"/\"} />\r\n\r\n  return (\r\n    <div>\r\n      <h1>\r\n        {user.addr}\r\n      </h1>\r\n      <MarketItems />\r\n    </div>\r\n  )\r\n}\r\n","import React from \"react\"\r\n\r\nexport function SideBar() {\r\n\r\n  return (\r\n    <div className=\"f3-left\">\r\n      <h1>Mint Panel</h1>\r\n      <ul>\r\n        <li>Collections</li>\r\n        <li>Mint NFTs</li>\r\n        <li>Assets</li>\r\n        <li>Settings</li>\r\n      </ul>\r\n    </div>\r\n  )\r\n}","\r\nimport {IDLE} from \"../../global/constants\"\r\nimport {useCurrentUser} from \"../../hooks/use-current-user.hook\"\r\nimport {useAccountItems} from \"../../hooks/use-account-items.hook\"\r\nimport {Suspense, useState} from \"react\"\r\nimport {Redirect, useHistory} from \"react-router-dom\"\r\nimport AccountItemsCluster from '../../comps/account-items'\r\n\r\nimport { SideBar } from \"./sidebar\"\r\n\r\nimport \"./index.css\"\r\n\r\nexport function Assets() {\r\n\r\n  return (\r\n    <div>\r\n      <h2>::Assets</h2>\r\n      <label>Name</label>\r\n      <input id=\"inName\" name=\"inName\" />\r\n      <label>Browse for file: </label>\r\n      <input type=\"file\" id=\"inFile\" name=\"inFile\" />\r\n    </div>\r\n  )\r\n\r\n}\r\n\r\nexport function Page() {\r\n  const [state, setState] = useState({\r\n    txtAddress: \"\"\r\n  })\r\n  const [address, setAddress] = useState(\"\");\r\n  const [count, setCount] = useState(0);\r\n  const history = useHistory();\r\n  const [user] = useCurrentUser()\r\n\r\n  const handleChange = (e) => {\r\n    setState({\r\n      ...state,\r\n      [e.target.name]: e.target.value,\r\n    })\r\n  }\r\n\r\n  const handleList = (e) => {\r\n\r\n    if (state.txtAddress.length != 18) {\r\n      alert(\"Enter Address Corretly!\");\r\n      return;\r\n    }\r\n\r\n    setAddress(state.txtAddress);\r\n    setCount(1 - count);\r\n  }\r\n\r\n  const handleMint = (e) => {\r\n    e.preventDefault();\r\n    history.push(\"/publish\");\r\n  }\r\n\r\n  const handleMarket = (e) => {\r\n    e.preventDefault();\r\n    history.push(\"/market\");\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <SideBar />\r\n      <div className=\"f3-main\">\r\n        <Assets />\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n","\r\nexport function Page() {\r\n  return <div>Page Not Found</div>\r\n}\r\n","import React, { Suspense } from 'react'\nimport ReactDOM from 'react-dom'\nimport {RecoilRoot} from \"recoil\"\nimport reportWebVitals from './reportWebVitals'\nimport {BrowserRouter as Router, Switch, Route} from \"react-router-dom\"\n\nimport './index.css';\n\nimport {Page as Root} from \"./pages/root.page\"\nimport {Page as Publish} from \"./pages/publish.page\"\nimport {Page as List} from \"./pages/list.page\"\nimport {Page as Market} from \"./pages/market.page\"\nimport {Page as MintPanel} from \"./pages/mint\"\nimport {Page as NotFound} from \"./pages/not-found.page\"\n\nimport * as fcl from \"@onflow/fcl\"\nimport * as t from \"@onflow/types\"\n\nwindow.fcl = fcl\nwindow.t = t\n\nfcl\n  .config()\n  .put(\"faucet\", process.env.REACT_APP_FAUCET_ADDRESS)\n  .put(\"accessNode.api\", process.env.REACT_APP_FLOW_ACCESS_API_URL)\n  .put(\"challenge.handshake\", process.env.REACT_APP_WALLET_DISCOVERY)\n  .put(\"0xFungibleToken\", process.env.REACT_APP_CONTRACT_FUNGIBLE_TOKEN)\n  .put(\"0xNonFungibleToken\", process.env.REACT_APP_CONTRACT_NON_FUNGIBLE_TOKEN)\n  .put(\"0xNFTStorefront\", process.env.REACT_APP_CONTRACT_NFT_STOREFRONT)\n  .put(\"0xHandyItems\", process.env.REACT_APP_CONTRACT_HANDY_ITEMS)\n  .put(\"0xFlowToken\", process.env.REACT_APP_CONTRACT_FLOW_TOKEN)\n  .put(\"decoder.Type\", val => val.staticType)\n\n  console.log(process.env)\n\nReactDOM.render(\n  <React.StrictMode>\n    <RecoilRoot>\n      <Router>\n        <Switch>\n          <Route exact path=\"/publish\">\n            <Suspense fallback={null}>\n              <Publish />\n            </Suspense>\n          </Route>\n          <Route exact path=\"/list\">\n            <List />\n          </Route>\n          <Route exact path=\"/market\">\n            <Market />\n          </Route>\n          <Route exact path=\"/mintpanel\">\n            <MintPanel />\n          </Route>\n          <Route exact path=\"/\">\n            <Root />\n          </Route>\n          <Route>\n            <NotFound />\n          </Route>\n        </Switch>\n      </Router>\n    </RecoilRoot>\n  </React.StrictMode>\n  ,\n  document.getElementById(\"root\")\n)\n\nreportWebVitals()"],"sourceRoot":""}