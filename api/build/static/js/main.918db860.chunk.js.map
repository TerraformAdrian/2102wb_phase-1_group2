{"version":3,"sources":["reportWebVitals.js","hooks/use-current-user.hook.js","pages/root.page.js","global/constants.js","flow/script.get-account-items.js","hooks/use-account-items.hook.js","flow/script.is-account-initialized.js","flow/util/tx.js","flow/tx.initialize-account.js","hooks/use-initialized.hook.js","pages/publish.page.js","flow/util/batch.js","flow/script.get-account-item.js","hooks/use-account-item.hook.js","comps/account-item.js","comps/account-items.js","pages/list.page.js","pages/not-found.page.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","currentUser","atom","key","default","addr","loggedIn","cid","tools","logIn","fcl","logOut","signUp","changeUser","useCurrentUser","useRecoilState","user","setUser","useEffect","subscribe","Page","to","onClick","IDLE","PROCESSING","CODE","fetchAccountItems","address","Promise","resolve","Address","d","sort","a","b","$state","atomFamily","selectorFamily","get","console","log","$status","useAccountItems","items","setItems","status","setStatus","ids","mint","recipient","name","imageUrl","color","info","quantity","fetch","process","method","headers","body","JSON","stringify","tokenURI","refresh","cdc","isAccountInitialized","send","script","args","arg","decode","noop","tx","mods","opts","onStart","onSubmission","onUpdate","onSuccess","onError","onComplete","txId","fvsTx","unsub","onceSealed","txStatus","error","env","initializeAccount","invariant","transaction","limit","proposer","authz","payer","authorizations","$address","$init","$computedInit","all","HandyItems","HandyItemsMarket","useState","txtAddress","txtName","txtImageURL","txtColor","txtInfo","txtQuantity","state","setState","init","setAddr","setInit","isInitialized","useRecoilValue","recheck","initialize","isSpecificInitialized","useInitialized","handleChange","e","target","value","handleSubmit","preventDefault","alert","length","className","htmlFor","id","onChange","disabled","callback","SET_CALLBACK","PROCESS","MAYBE_PROCESS","TIMEOUT","ENQUEUE","RESOLVE","HANDLERS","INIT","ctx","put","Set","setInterval","sendSelf","letter","uid","hold","reply","update","n","add","h","size","need","p","reduce","acc","result","_","results","have","Object","keys","delete","collate","px","push","addresses","t","map","Number","spawn","enqueue","expectReply","timeout","fetchAccountItem","expand","split","AccountItemCluster","item","cu","join","comp","setItem","owned","sansPrefix","useAccountItem","itemID","WrappedAccountItemCluster","props","fallback","AccountItemsCluster","WrappedAccountItemsCluster","setAddress","count","setCount","useHistory","window","val","staticType","ReactDOM","render","StrictMode","exact","path","document","getElementById"],"mappings":"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","file":"static/js/main.918db860.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {useEffect} from \"react\"\r\nimport {atom, useRecoilState} from \"recoil\"\r\nimport * as fcl from \"@onflow/fcl\"\r\n\r\nexport const currentUser = atom({\r\n  key: \"CURRENT_USER\",\r\n  default: {addr: null, loggedIn: null, cid: null},\r\n})\r\n\r\nconst tools = {\r\n  logIn: fcl.logIn,\r\n  logOut: fcl.unauthenticate,\r\n  signUp: fcl.signUp,\r\n  changeUser: fcl.reauthenticate,\r\n}\r\n\r\nexport function useCurrentUser() {\r\n  const [user, setUser] = useRecoilState(currentUser)\r\n  useEffect(() => fcl.currentUser().subscribe(setUser), [setUser])\r\n  return [user, user.addr != null, tools]\r\n}\r\n","\r\nimport {useCurrentUser} from \"../hooks/use-current-user.hook\"\r\nimport {Redirect} from \"react-router-dom\"\r\n\r\nexport function Page() {\r\n  const [user, loggedIn, {signUp, logIn}] = useCurrentUser()\r\n\r\n  if (loggedIn) return <Redirect to={\"/publish\"} />\r\n\r\n  return (\r\n    <div>\r\n      <button onClick={logIn}>\r\n        Log In\r\n      </button>\r\n      <button onClick={signUp}>\r\n        Sign up\r\n      </button>\r\n    </div>\r\n  )\r\n}\r\n","export const LOADING = \"LOADING\"\r\n\r\n// Exposed states of a Flow Transaction\r\nexport const IDLE = \"IDLE\"\r\nexport const PROCESSING = \"PROCESSING\"\r\nexport const SUCCESS = \"SUCCESS\"\r\nexport const ERROR = \"ERROR\"\r\n\r\n// How long to pause on a success or error message\r\n// before transitioning back to an IDLE state.\r\nexport const IDLE_DELAY = 1000\r\n","import * as fcl from \"@onflow/fcl\"\r\nimport {Address} from \"@onflow/types\"\r\n\r\nconst CODE = fcl.cdc`\r\nimport NonFungibleToken from 0xNonFungibleToken\r\nimport HandyItems from 0xHandyItems\r\n\r\n  pub fun main(address: Address): [UInt64] {\r\n    if let collection =  getAccount(address).getCapability<&HandyItems.Collection{NonFungibleToken.CollectionPublic, HandyItems.HandyItemsCollectionPublic}>(HandyItems.CollectionPublicPath).borrow() {\r\n      return collection.getIDs()\r\n    }\r\n\r\n    return []\r\n  }\r\n`\r\n\r\nexport function fetchAccountItems(address) {\r\n  if (address == null) return Promise.resolve([])\r\n\r\n  // prettier-ignore\r\n  return fcl.send([\r\n    fcl.script(CODE),\r\n    fcl.args([\r\n      fcl.arg(address, Address)\r\n    ]),\r\n  ]).then(fcl.decode).then(d => d.sort((a, b) => a - b))\r\n}\r\n","import {atomFamily, selectorFamily, useRecoilState} from \"recoil\"\r\nimport {fetchAccountItems} from \"../flow/script.get-account-items\"\r\nimport {IDLE, PROCESSING} from \"../global/constants\"\r\n\r\nexport const $state = atomFamily({\r\n  key: \"account-items::state\",\r\n  default: selectorFamily({\r\n    key: \"account-items::default\",\r\n    get: address => async () => {\r\n      console.log(\"hello\");\r\n      return fetchAccountItems(address)},\r\n  }),\r\n})\r\n\r\nexport const $status = atomFamily({\r\n  key: \"account-items::status\",\r\n  default: IDLE,\r\n})\r\n\r\nexport function useAccountItems(address) {\r\n  const [items, setItems] = useRecoilState($state(address))\r\n  const [status, setStatus] = useRecoilState($status(address))\r\n\r\n  return {\r\n    ids: items,\r\n    status,\r\n\r\n    async mint(recipient, name, \r\n      imageUrl, color, info, quantity) {\r\n      setStatus(PROCESSING)\r\n      await fetch(process.env.REACT_APP_API_ITEM_MINT, {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify({\r\n          recipient: recipient,\r\n          name: name,\r\n          tokenURI: imageUrl,\r\n          color: color,\r\n          info: info,\r\n          quantity: quantity,\r\n        }),\r\n      })\r\n      await fetchAccountItems(recipient).then(setItems)\r\n      setStatus(IDLE)\r\n    },\r\n    async refresh() {\r\n      setStatus(PROCESSING)\r\n      await fetchAccountItems(address).then(setItems)\r\n      setStatus(IDLE)\r\n    },\r\n  }\r\n}\r\n","import {send, decode, script, args, arg, cdc} from \"@onflow/fcl\"\r\nimport {Address} from \"@onflow/types\"\r\n\r\nconst CODE = cdc`\r\n  import FungibleToken from 0xFungibleToken\r\n  import NonFungibleToken from 0xNonFungibleToken\r\n  import HandyItems from 0xHandyItems\r\n  import NFTStorefront from 0xNFTStorefront\r\n\r\n  pub fun hasItems(_ address: Address): Bool {\r\n    return getAccount(address)\r\n      .getCapability<&HandyItems.Collection{NonFungibleToken.CollectionPublic, HandyItems.HandyItemsCollectionPublic}>(HandyItems.CollectionPublicPath)\r\n      .check()\r\n  }\r\n\r\n  pub fun hasStorefront(_ address: Address): Bool {\r\n    return getAccount(address)\r\n      .getCapability<&NFTStorefront.Storefront{NFTStorefront.StorefrontPublic}>(NFTStorefront.StorefrontPublicPath)\r\n      .check()\r\n  }\r\n\r\n  pub fun main(address: Address): {String: Bool} {\r\n    let ret: {String: Bool} = {}\r\n    ret[\"HandyItems\"] = hasItems(address)\r\n    ret[\"HandyItemsMarket\"] = hasStorefront(address)\r\n    return ret\r\n  }\r\n`\r\n\r\nexport function isAccountInitialized(address) {\r\n  if (address == null || address == \"\")\r\n    return Promise.resolve(false)\r\n\r\n  // prettier-ignore\r\n  return send([\r\n    script(CODE),\r\n    args([\r\n      arg(address, Address)\r\n    ])\r\n  ]).then(decode)\r\n}\r\n","import * as fcl from \"@onflow/fcl\"\r\n\r\nconst noop = async () => {}\r\n\r\nexport async function tx(mods = [], opts = {}) {\r\n  const onStart = opts.onStart || noop\r\n  const onSubmission = opts.onSubmission || noop\r\n  const onUpdate = opts.onUpdate || noop\r\n  const onSuccess = opts.onSuccess || noop\r\n  const onError = opts.onError || noop\r\n  const onComplete = opts.onComplete || noop\r\n\r\n  try {\r\n    onStart()\r\n    var txId = await fcl.send(mods).then(fcl.decode)\r\n    console.info(\r\n      `%cTX[${txId}]: ${fvsTx(await fcl.config().get(\"env\"), txId)}`,\r\n      \"color:purple;font-weight:bold;font-family:monospace;\"\r\n    )\r\n    onSubmission(txId)\r\n    var unsub = await fcl.tx(txId).subscribe(onUpdate)\r\n    var txStatus = await fcl.tx(txId).onceSealed()\r\n    unsub()\r\n    console.info(\r\n      `%cTX[${txId}]: ${fvsTx(await fcl.config().get(\"env\"), txId)}`,\r\n      \"color:green;font-weight:bold;font-family:monospace;\"\r\n    )\r\n    await onSuccess(txStatus)\r\n    return txStatus\r\n  } catch (error) {\r\n    console.error(\r\n      `TX[${txId}]: ${fvsTx(await fcl.config().get(\"env\"), txId)}`,\r\n      error\r\n    )\r\n    onError(error)\r\n  } finally {\r\n    await onComplete()\r\n  }\r\n}\r\n\r\nfunction fvsTx(env, txId) {\r\n  return `https://flow-view-source.com/${env}/tx/${txId}`\r\n}\r\n","// prettier-ignore\r\nimport {transaction, limit, proposer, payer, authorizations, authz, cdc} from \"@onflow/fcl\"\r\nimport {invariant} from \"@onflow/util-invariant\"\r\nimport {tx} from \"./util/tx\"\r\n\r\nconst CODE = cdc`\r\n  import FungibleToken from 0xFungibleToken\r\n  import NonFungibleToken from 0xNonFungibleToken\r\n  import HandyItems from 0xHandyItems\r\n  import NFTStorefront from 0xNFTStorefront\r\n\r\n  pub fun hasItems(_ address: Address): Bool {\r\n    return getAccount(address)\r\n      .getCapability<&HandyItems.Collection{NonFungibleToken.CollectionPublic, HandyItems.HandyItemsCollectionPublic}>(HandyItems.CollectionPublicPath)\r\n      .check()\r\n  }\r\n\r\n  pub fun hasStorefront(_ address: Address): Bool {\r\n    return getAccount(address)\r\n      .getCapability<&NFTStorefront.Storefront{NFTStorefront.StorefrontPublic}>(NFTStorefront.StorefrontPublicPath)\r\n      .check()\r\n  }\r\n\r\n  transaction {\r\n    prepare(acct: AuthAccount) {\r\n\r\n      if !hasItems(acct.address) {\r\n        if acct.borrow<&HandyItems.Collection>(from: HandyItems.CollectionStoragePath) == nil {\r\n          acct.save(<-HandyItems.createEmptyCollection(), to: HandyItems.CollectionStoragePath)\r\n        }\r\n        acct.unlink(HandyItems.CollectionPublicPath)\r\n        acct.link<&HandyItems.Collection{NonFungibleToken.CollectionPublic, HandyItems.HandyItemsCollectionPublic}>(HandyItems.CollectionPublicPath, target: HandyItems.CollectionStoragePath)\r\n      }\r\n\r\n      if !hasStorefront(acct.address) {\r\n        if acct.borrow<&NFTStorefront.Storefront>(from: NFTStorefront.StorefrontStoragePath) == nil {\r\n          acct.save(<-NFTStorefront.createStorefront(), to: NFTStorefront.StorefrontStoragePath)\r\n        }\r\n        acct.unlink(NFTStorefront.StorefrontPublicPath)\r\n        acct.link<&NFTStorefront.Storefront{NFTStorefront.StorefrontPublic}>(NFTStorefront.StorefrontPublicPath, target: NFTStorefront.StorefrontStoragePath)\r\n      }\r\n    }\r\n  }\r\n`\r\n\r\nexport async function initializeAccount(address, opts = {}) {\r\n  // prettier-ignore\r\n  invariant(address != null, \"Tried to initialize an account but no address was supplied\")\r\n\r\n  return tx(\r\n    [\r\n      transaction(CODE),\r\n      limit(70),\r\n      proposer(authz),\r\n      payer(authz),\r\n      authorizations([authz]),\r\n    ],\r\n    opts\r\n  )\r\n}\r\n","import {\r\n  atomFamily,\r\n  selectorFamily,\r\n  useRecoilState,\r\n  useRecoilValue,\r\n} from \"recoil\"\r\nimport {\r\n  LOADING,\r\n  IDLE,\r\n  PROCESSING,\r\n  SUCCESS,\r\n  ERROR,\r\n  IDLE_DELAY,\r\n} from \"../global/constants\"\r\nimport {isAccountInitialized} from \"../flow/script.is-account-initialized\"\r\nimport {initializeAccount} from \"../flow/tx.initialize-account\"\r\n\r\nexport const $address = atomFamily({\r\n  key: \"init::address\",\r\n  default: null,\r\n})\r\n\r\nexport const $status = atomFamily({\r\n  key: \"init::status\",\r\n  default: IDLE,\r\n})\r\n\r\nexport const $init = atomFamily({\r\n  key: \"init::state\",\r\n  default: selectorFamily({\r\n    key: \"init::default\",\r\n    get: address => () => isAccountInitialized(address),\r\n  }),\r\n})\r\n\r\nexport const $computedInit = selectorFamily({\r\n  key: \"init::computed\",\r\n  get:\r\n    address =>\r\n    async ({get}) => {\r\n      const all = get($init(address))\r\n      return all.HandyItems || all.HandyItemsMarket\r\n    },\r\n})\r\n\r\nexport function useInitialized(addr) {\r\n  const [address, setAddr] = useRecoilState($address(addr))\r\n  const [init, setInit] = useRecoilState($init(address))\r\n  const isInitialized = useRecoilValue($computedInit(address))\r\n  const [status, setStatus] = useRecoilState($status(address))\r\n\r\n  console.log(address)\r\n\r\n  function recheck() {\r\n    isAccountInitialized(address).then(setInit)\r\n  }\r\n\r\n  return {\r\n    ...init,\r\n    isInitialized,\r\n    status: isInitialized == null ? LOADING : status,\r\n    recheck,\r\n    async initialize(addr) {\r\n      initializeAccount(addr != null ? addr \r\n        : address, {\r\n        onStart() {\r\n          setStatus(PROCESSING)\r\n        },\r\n        async onSuccess() {\r\n          recheck()\r\n          setStatus(SUCCESS)\r\n        },\r\n        onError() {\r\n          setStatus(ERROR)\r\n        },\r\n        async onComplete() {\r\n          setStatus(IDLE)\r\n        },\r\n      })\r\n    },\r\n    async isSpecificInitialized(address) {\r\n      const all = await isAccountInitialized(address)\r\n      console.log(all)\r\n      setAddr(address)\r\n      return all.HandyItems || all.HandyItemsMarket\r\n    }\r\n  }\r\n}\r\n","\r\nimport {IDLE} from \"../global/constants\"\r\nimport {useCurrentUser} from \"../hooks/use-current-user.hook\"\r\nimport {useAccountItems} from \"../hooks/use-account-items.hook\"\r\nimport { useInitialized } from \"../hooks/use-initialized.hook\"\r\nimport {Suspense, useState} from \"react\"\r\nimport {Redirect, useHistory} from \"react-router-dom\"\r\n\r\nimport './publish.css'\r\n\r\nexport function Page() {\r\n  const [state, setState] = useState({\r\n    txtAddress: \"\",\r\n    txtName: \"\",\r\n    txtImageURL: \"\", \r\n    txtColor: \"\",\r\n    txtInfo: \"\",\r\n    txtQuantity: \"\"\r\n  })\r\n  // const history = useHistory();\r\n  const [user] = useCurrentUser()\r\n\r\n  // if (user.addr == null) return <Redirect to={\"/\"} />\r\n  const items = useAccountItems(user.addr)\r\n  const init = useInitialized(null)\r\n\r\n  const handleInit = (e) => {\r\n    e.preventDefault();\r\n    init.initialize(state.txtAddress);\r\n  }\r\n\r\n  const handleChange = (e) => {\r\n    setState({\r\n      ...state, \r\n      [e.target.name]: e.target.value\r\n    })\r\n  }\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n\r\n    if (!await init.isSpecificInitialized(state.txtAddress)) {\r\n      alert(\"Initialize account first!\");\r\n      return;\r\n    }\r\n\r\n    items.mint(\r\n      state.txtAddress, \r\n      state.txtName, \r\n      state.txtImageURL, \r\n      state.txtColor, \r\n      state.txtInfo, \r\n      state.txtQuantity\r\n      )\r\n\r\n      console.log(items.ids.length);\r\n  }\r\n\r\n  return (\r\n    <div className=\"grid-center\">\r\n      <h1>{user.addr}</h1>\r\n      <h1>Publish a NFT</h1>\r\n      <form>\r\n        <div className=\"grid-container\">\r\n          <label htmlFor=\"txtName\">Name</label> \r\n          <input name=\"txtName\" id=\"txtName\" onChange={handleChange} />\r\n          <label htmlFor=\"txtAddress\">Address</label> \r\n          <input name=\"txtAddress\" id=\"txtAddress\" onChange={handleChange} />\r\n          <label>Image URL</label> \r\n          <input name=\"txtImageURL\" id=\"txtImageURL\" onChange={handleChange} />\r\n          <label>Color</label> \r\n          <input name=\"txtColor\" id=\"txtColor\" onChange={handleChange} />\r\n          <label>Info</label> \r\n          <input name=\"txtInfo\" id=\"txtInfo\" onChange={handleChange} />\r\n          <label>Quantity</label> \r\n          <input name=\"txtQuantity\" id=\"txtQuantity\" onChange={handleChange} />\r\n          <label>Series</label> \r\n          <input name=\"txtSeries\" id=\"txtSeries\" onChange={handleChange} />\r\n          <button disabled={user.addr !== state.txtAddress} onClick={handleInit}>\r\n            Initialize\r\n          </button>\r\n          <button disabled={items.status !== IDLE} onClick={handleSubmit}>\r\n            Send\r\n          </button>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  )\r\n}\r\n","// TODO: MOVE TO @onflow/util-batch\r\nimport {spawn, send, INIT} from \"@onflow/util-actor\"\r\nimport {uid} from \"@onflow/util-uid\"\r\n\r\nconst TICK = 500\r\nconst BUFFER_SIZE = 10\r\n\r\nconst SET_CALLBACK = \"SET_CALLBACK\"\r\nconst PROCESS = \"PROCESS\"\r\nconst MAYBE_PROCESS = \"MAYBE_PROCESS\"\r\nconst TIMEOUT = \"TIMEOUT\"\r\nconst ENQUEUE = \"ENQUEUE\"\r\nconst RESOLVE = \"RESOLVE\"\r\n\r\nconst HANDLERS = {\r\n  [INIT]: ctx => {\r\n    ctx.put(\"need\", new Set())\r\n    ctx.put(\"processing\", new Set())\r\n    ctx.put(\"hold\", {})\r\n    setInterval(() => ctx.sendSelf(TIMEOUT), TICK)\r\n  },\r\n\r\n  [SET_CALLBACK]: (ctx, letter, callback) => {\r\n    ctx.put(\"callback\", async (...args) => callback(...args))\r\n    ctx.sendSelf(MAYBE_PROCESS)\r\n  },\r\n\r\n  [ENQUEUE]: (ctx, letter, args) => {\r\n    const id = uid()\r\n    const hold = {id, args, reply: letter.reply}\r\n    ctx.update(\"need\", n => {\r\n      n.add(id)\r\n      return n\r\n    })\r\n    ctx.update(\"hold\", h => ({...h, [id]: hold}))\r\n    ctx.sendSelf(MAYBE_PROCESS)\r\n  },\r\n\r\n  [TIMEOUT]: ctx => {\r\n    if (ctx.get(\"need\").size) ctx.sendSelf(PROCESS)\r\n  },\r\n\r\n  [MAYBE_PROCESS]: ctx => {\r\n    if (ctx.get(\"need\") >= BUFFER_SIZE) ctx.sendSelf(PROCESS)\r\n  },\r\n\r\n  [PROCESS]: ctx => {\r\n    const callback = ctx.get(\"callback\")\r\n    if (typeof callback !== \"function\") return\r\n\r\n    const need = ctx.get(\"need\")\r\n    ctx.update(\"processing\", p => new Set([...p, ...need]))\r\n    ctx.put(\"need\", new Set())\r\n\r\n    const hold = ctx.get(\"hold\")\r\n    const payload = [...need].reduce(\r\n      (acc, key) => ({...acc, [key]: hold[key].args}),\r\n      {}\r\n    )\r\n\r\n    callback(payload).then(result => {\r\n      ctx.sendSelf(RESOLVE, result)\r\n    })\r\n  },\r\n  [RESOLVE]: (ctx, _, results) => {\r\n    const have = Object.keys(results)\r\n    for (let h of have) {\r\n      const hold = ctx.get(\"hold\")\r\n      hold[h].reply(results[h])\r\n      ctx.update(\"processing\", p => {\r\n        p.delete(h)\r\n        return p\r\n      })\r\n      ctx.update(\"hold\", hold => {\r\n        delete hold[h]\r\n        return hold\r\n      })\r\n    }\r\n  },\r\n}\r\n\r\nexport const batch = (name, callback) => {\r\n  spawn(HANDLERS, name)\r\n  send(name, SET_CALLBACK, callback)\r\n\r\n  return {\r\n    enqueue(...args) {\r\n      return send(name, ENQUEUE, args, {expectReply: true, timeout: 0})\r\n    },\r\n  }\r\n}\r\n","import * as fcl from \"@onflow/fcl\"\r\nimport * as t from \"@onflow/types\"\r\nimport {batch} from \"./util/batch\"\r\n\r\nconst CODE = fcl.cdc`\r\nimport NonFungibleToken from 0xNonFungibleToken\r\nimport HandyItems from 0xHandyItems\r\n\r\npub struct AccountItem {\r\n  pub let itemID: UInt64\r\n  pub let name: String\r\n  pub let tokenURI: String\r\n  pub let color: String\r\n  pub let info: String\r\n  pub let owner: Address\r\n\r\n  init(itemID: UInt64, name: String, tokenURI: String, color: String, info: String, owner: Address) {\r\n    self.itemID = itemID\r\n    self.name = name\r\n    self.tokenURI = tokenURI\r\n    self.color = color\r\n    self.info = info\r\n    self.owner = owner\r\n  }\r\n}\r\n\r\npub fun fetch(address: Address, id: UInt64): AccountItem? {\r\n  if let col = getAccount(address).getCapability<&HandyItems.Collection{NonFungibleToken.CollectionPublic, HandyItems.HandyItemsCollectionPublic}>(HandyItems.CollectionPublicPath).borrow() {\r\n    if let item = col.borrowHandyItem(id: id) {\r\n      return AccountItem(itemID: id, name: item.name, tokenURI: item.tokenURI, \r\n        color: item.color, info: item.info, owner: address)\r\n    }\r\n  }\r\n\r\n  return nil\r\n}\r\n\r\npub fun main(keys: [String], addresses: [Address], ids: [UInt64]): {String: AccountItem?} {\r\n  let r: {String: AccountItem?} = {}\r\n  var i = 0\r\n  while i < keys.length {\r\n    let key = keys[i]\r\n    let address = addresses[i]\r\n    let id = ids[i]\r\n    r[key] = fetch(address: address, id: id)\r\n    i = i + 1\r\n  }\r\n  return r\r\n}\r\n`\r\n\r\nconst collate = px => {\r\n  return Object.keys(px).reduce(\r\n    (acc, key) => {\r\n      acc.keys.push(key)\r\n      acc.addresses.push(px[key][0])\r\n      acc.ids.push(px[key][1])\r\n      return acc\r\n    },\r\n    {keys: [], addresses: [], ids: []}\r\n  )\r\n}\r\n\r\nconst {enqueue} = batch(\"FETCH_ACCOUNT_ITEM\", async px => {\r\n  const {keys, addresses, ids} = collate(px)\r\n\r\n  return fcl\r\n    .send([\r\n      fcl.script(CODE),\r\n      fcl.args([\r\n        fcl.arg(keys, t.Array(t.String)),\r\n        fcl.arg(addresses, t.Array(t.Address)),\r\n        fcl.arg(ids.map(Number), t.Array(t.UInt64)),\r\n      ]),\r\n    ])\r\n    .then(fcl.decode)\r\n})\r\n\r\nexport async function fetchAccountItem(address, id) {\r\n  if (address == null) return Promise.resolve(null)\r\n  if (id == null) return Promise.resolve(null)\r\n  return enqueue(address, id)\r\n}\r\n","import {sansPrefix} from \"@onflow/fcl\"\r\nimport {atomFamily, selectorFamily, useRecoilState} from \"recoil\"\r\nimport {useCurrentUser} from \"../hooks/use-current-user.hook\"\r\nimport {fetchAccountItem} from \"../flow/script.get-account-item\"\r\nimport {IDLE, PROCESSING} from \"../global/constants\"\r\nimport {useAccountItems} from \"../hooks/use-account-items.hook\"\r\n\r\nfunction expand(key) {\r\n  return key.split(\"|\")\r\n}\r\n\r\nfunction comp(address, id) {\r\n  return [address, id].join(\"|\")\r\n}\r\n\r\nexport const $state = atomFamily({\r\n  key: \"account-item::state\",\r\n  default: selectorFamily({\r\n    key: \"account-item::default\",\r\n    get: key => async () => fetchAccountItem(...expand(key)),\r\n  }),\r\n})\r\n\r\nexport const $status = atomFamily({\r\n  key: \"account-item::status\",\r\n  default: IDLE,\r\n})\r\n\r\nexport function useAccountItem(address, id) {\r\n  const [cu] = useCurrentUser()\r\n  const accountItems = useAccountItems(address)\r\n  const key = comp(address, id)\r\n  const [item, setItem] = useRecoilState($state(key))\r\n  const [status, setStatus] = useRecoilState($status(key))\r\n\r\n  return {\r\n    ...item,\r\n    status,\r\n    owned: sansPrefix(cu.addr) === sansPrefix(address),\r\n    async refresh() {\r\n      setStatus(PROCESSING)\r\n      await fetchAccountItem(...expand(key)).then(setItem)\r\n      setStatus(IDLE)\r\n    },\r\n  }\r\n}\r\n","import React, {useEffect, useState, Suspense} from \"react\"\r\nimport {useAccountItem} from \"../hooks/use-account-item.hook\"\r\nimport {useCurrentUser} from \"../hooks/use-current-user.hook\"\r\nimport {IDLE} from \"../global/constants\"\r\n\r\nexport function AccountItemCluster({address, id}) {\r\n  const item = useAccountItem(address, id)\r\n\r\n  const BUSY = item.status !== IDLE\r\n\r\n  if (address == null) return null\r\n  if (id == null) return null\r\n \r\n  return (\r\n    <div className=\"grid-list\">\r\n      <h3>Handy#{item.itemID}</h3>\r\n\r\n      <p>{item.name}</p>\r\n      <p>{item.tokenURI}</p>\r\n      <p>{item.color}</p>\r\n      <p>{item.info}</p>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default function WrappedAccountItemCluster(props) {\r\n  return (\r\n    <Suspense\r\n      fallback={\r\n        null\r\n      }\r\n    >\r\n      <AccountItemCluster {...props} />\r\n    </Suspense>\r\n  )\r\n}\r\n","import {Suspense} from \"react\"\r\nimport {useAccountItems} from \"../hooks/use-account-items.hook\"\r\nimport {useCurrentUser} from \"../hooks/use-current-user.hook\"\r\nimport Item from \"./account-item\"\r\n\r\nexport function AccountItemsCluster({address}) {\r\n  const items = useAccountItems(address)\r\n  const [cu] = useCurrentUser()\r\n\r\n  if (address == null) return null\r\n\r\n  if (items.ids.length <= 0)\r\n    return (\r\n      <p>No Items</p>\r\n    )\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"grid-list\">\r\n        <h2>ID</h2>\r\n        <h2>Name</h2>\r\n        <h2>Image URL</h2>\r\n        <h2>Color</h2>\r\n        <h2>Info</h2>\r\n      </div>\r\n      {items.ids.map(id => (\r\n        <Item key={id} id={id} address={address} />\r\n      ))}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default function WrappedAccountItemsCluster({address}) {\r\n  return (\r\n    <Suspense\r\n      fallback={\r\n        null\r\n      }\r\n    >\r\n      <AccountItemsCluster address={address} />\r\n    </Suspense>\r\n  )\r\n}\r\n","\r\nimport {IDLE} from \"../global/constants\"\r\nimport {useCurrentUser} from \"../hooks/use-current-user.hook\"\r\nimport {useAccountItems} from \"../hooks/use-account-items.hook\"\r\nimport {Suspense, useState} from \"react\"\r\nimport {Redirect, useHistory} from \"react-router-dom\"\r\nimport AccountItemsCluster from '../comps/account-items'\r\n\r\nimport './list.css'\r\n\r\nexport function Page() {\r\n  const [state, setState] = useState({\r\n    txtAddress: \"\"\r\n  })\r\n  const [address, setAddress] = useState(\"\");\r\n  const [count, setCount] = useState(0);\r\n  const history = useHistory();\r\n  const [user] = useCurrentUser()\r\n\r\n  // if (user.addr == null) return <Redirect to={\"/\"} />\r\n\r\n  const handleChange = (e) => {\r\n    setState({\r\n      ...state,\r\n      [e.target.name]: e.target.value,\r\n    })\r\n  }\r\n\r\n  const handleList = (e) => {\r\n    setAddress(state.txtAddress);\r\n    setCount(1 - count);\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h1>NFT Listings</h1>\r\n\t    <div>\r\n        <label>Address: </label>\r\n        <input name=\"txtAddress\" id=\"txtAddress\" onChange={handleChange}/>\r\n        <button onClick={handleList}>List NFTs</button>\r\n        {\r\n          address != \"\" && <AccountItemsCluster address={address} />\r\n        }\r\n\t    </div>\r\n    </div>\r\n  )\r\n}\r\n","\r\nexport function Page() {\r\n  return <div>Page Not Found</div>\r\n}\r\n","import React, { Suspense } from 'react'\nimport ReactDOM from 'react-dom'\nimport {RecoilRoot} from \"recoil\"\nimport reportWebVitals from './reportWebVitals'\nimport {BrowserRouter as Router, Switch, Route} from \"react-router-dom\"\n\nimport {Page as Root} from \"./pages/root.page\"\nimport {Page as Publish} from \"./pages/publish.page\"\nimport {Page as List} from \"./pages/list.page\"\nimport {Page as NotFound} from \"./pages/not-found.page\"\n\nimport * as fcl from \"@onflow/fcl\"\nimport * as t from \"@onflow/types\"\n\nwindow.fcl = fcl\nwindow.t = t\n\nfcl\n  .config()\n  .put(\"faucet\", process.env.REACT_APP_FAUCET_ADDRESS)\n  .put(\"accessNode.api\", process.env.REACT_APP_FLOW_ACCESS_API_URL)\n  .put(\"challenge.handshake\", process.env.REACT_APP_WALLET_DISCOVERY)\n  .put(\"0xFungibleToken\", process.env.REACT_APP_CONTRACT_FUNGIBLE_TOKEN)\n  .put(\"0xNonFungibleToken\", process.env.REACT_APP_CONTRACT_NON_FUNGIBLE_TOKEN)\n  .put(\"0xNFTStorefront\", process.env.REACT_APP_CONTRACT_NFT_STOREFRONT)\n  .put(\"0xHandyItems\", process.env.REACT_APP_CONTRACT_HANDY_ITEMS)\n  .put(\"decoder.Type\", val => val.staticType)\n\n  console.log(process.env)\n\nReactDOM.render(\n  <React.StrictMode>\n    <RecoilRoot>\n      <Router>\n        <Switch>\n          <Route exact path=\"/publish\">\n            <Suspense fallback={null}>\n              <Publish />\n            </Suspense>\n          </Route>\n          <Route exact path=\"/list\">\n            <List />\n          </Route>\n          <Route exact path=\"/\">\n            <Root />\n          </Route>\n          <Route>\n            <NotFound />\n          </Route>\n        </Switch>\n      </Router>\n    </RecoilRoot>\n  </React.StrictMode>\n  ,\n  document.getElementById(\"root\")\n)\n\nreportWebVitals()"],"sourceRoot":""}