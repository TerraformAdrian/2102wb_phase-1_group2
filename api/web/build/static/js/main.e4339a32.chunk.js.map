{"version":3,"sources":["reportWebVitals.js","hooks/use-current-user.hook.js","pages/root.page.js","global/constants.js","flow/script.get-account-items.js","hooks/use-account-items.hook.js","flow/script.is-account-initialized.js","flow/util/tx.js","flow/tx.initialize-account.js","hooks/use-initialized.hook.js","pages/publish.page.js","flow/util/batch.js","flow/script.get-account-item.js","flow/tx.create-sale-offer.js","hooks/use-account-item.hook.js","comps/account-item.js","comps/account-items.js","pages/list.page.js","flow/sc.get-market-items.js","hooks/use-market-items.hook.js","flow/sc.get-market-item.js","flow/tx.buy-market-item.js","hooks/use-market-item.hook.js","comps/market-item.js","comps/market-items.js","pages/market.page.js","pages/mint/sidebar.js","pages/mint/assets.js","flow/sc.get-edition-list.js","pages/mint/mintnft.js","hooks/use-ipfs-items.hook.js","hooks/use-edition-list.hook.js","pages/storefront/series.js","pages/storefront/purchase.js","pages/not-found.page.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","currentUser","atom","key","default","addr","loggedIn","cid","tools","logIn","fcl","logOut","signUp","changeUser","useCurrentUser","useRecoilState","user","setUser","useEffect","subscribe","Item","className","src","width","height","href","Page","useHistory","to","style","margin","IDLE","PROCESSING","CODE","fetchAccountItems","address","Promise","resolve","Address","d","sort","a","b","$state","atomFamily","selectorFamily","get","$status","useAccountItems","items","setItems","status","setStatus","console","log","ids","mint","recipient","name","imageUrl","color","info","quantity","fetch","process","method","headers","body","JSON","stringify","tokenURI","refresh","cdc","isAccountInitialized","send","script","args","arg","decode","noop","tx","mods","opts","onStart","onSubmission","onUpdate","onSuccess","onError","onComplete","txId","fvsTx","unsub","onceSealed","txStatus","error","env","initializeAccount","invariant","transaction","limit","proposer","authz","payer","authorizations","$address","$init","$computedInit","all","HandyItems","HandyItemsMarket","useState","txtAddress","txtName","txtImageURL","txtColor","txtInfo","txtQuantity","state","setState","history","init","setAddr","setInit","isInitialized","useRecoilValue","recheck","initialize","isSpecificInitialized","useInitialized","handleChange","e","target","value","handleSubmit","preventDefault","length","alert","htmlFor","id","onChange","disabled","onClick","push","callback","SET_CALLBACK","PROCESS","MAYBE_PROCESS","TIMEOUT","ENQUEUE","RESOLVE","HANDLERS","INIT","ctx","put","Set","setInterval","sendSelf","letter","uid","hold","reply","update","n","add","h","size","need","p","reduce","acc","result","_","results","have","Object","keys","delete","collate","px","addresses","t","map","Number","spawn","enqueue","expectReply","timeout","fetchAccountItem","createSaleOffer","itemID","price","Error","String","expand","split","useAccountItem","cu","accountItems","join","comp","item","setItem","owned","sansPrefix","sell","AccountItemCluster","WrappedAccountItemCluster","props","fallback","AccountItemsCluster","WrappedAccountItemsCluster","setAddress","count","setCount","getMarketItems","$marketItemsState","$marketItemsStatus","UInt64","buyMarketItem","ownerAddress","useMarketItem","getMarketItem","buy","MarketItemCluster","WrappedMarketItemCluster","MarketItemsCluster","useMarketItems","WrappedMarketItemsCluster","SideBar","pinFileToIPFS","pinataApiKey","pinataSecretApiKey","imgData","data","FormData","append","obj","files","metadata","keyvalues","pinataOptions","cidVersion","customPinPolicy","regions","desiredReplicationCount","axios","post","maxBodyLength","_boundary","pinata_api_key","pinata_secret_api_key","response","path","IpfsHash","catch","Assets","inFile","inName","asList","setList","isDirty","setDirty","inputFile","useRef","assetList","success","handleUpload","current","paddingLeft","type","ref","img_url","MintNFT","inAsset","inQuantity","inSerial","inCollection","inPrice","inSeries","assets","useIpfsItems","prop","editions","useEditionList","mintItem","params","index","res","editionList","isSerial","collection","series","editionName","WrappedItem","useParams","WrappedPage","window","val","staticType","ReactDOM","render","StrictMode","exact","children","document","getElementById"],"mappings":"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","file":"static/js/main.e4339a32.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {useEffect} from \"react\"\r\nimport {atom, useRecoilState} from \"recoil\"\r\nimport * as fcl from \"@onflow/fcl\"\r\n\r\nexport const currentUser = atom({\r\n  key: \"CURRENT_USER\",\r\n  default: {addr: null, loggedIn: null, cid: null},\r\n})\r\n\r\nconst tools = {\r\n  logIn: fcl.logIn,\r\n  logOut: fcl.unauthenticate,\r\n  signUp: fcl.signUp,\r\n  changeUser: fcl.reauthenticate,\r\n}\r\n\r\nexport function useCurrentUser() {\r\n  const [user, setUser] = useRecoilState(currentUser)\r\n  useEffect(() => fcl.currentUser().subscribe(setUser), [setUser])\r\n  return [user, user.addr != null, tools]\r\n}\r\n","import { useState, Suspense } from \"react\";\r\nimport {useCurrentUser} from \"../hooks/use-current-user.hook\"\r\nimport {Redirect, useHistory} from \"react-router-dom\"\r\n\r\nexport function Item() {\r\n  return (\r\n    <div className=\"f3-store-collection-item\">\r\n      <img src=\"zeb.png\" width=\"127px\" height=\"127px\" />\r\n      <a href=\"/zeb-nolan\">Zeb Nolan Interview</a>\r\n    </div>\r\n  )\r\n\r\n}\r\n\r\nexport function WrappedItem(props) {\r\n  return (\r\n    <Suspense fallback={null}>\r\n      <Item {...props} />\r\n    </Suspense>\r\n  )\r\n}\r\n\r\nexport function Page() {\r\n  const [user, loggedIn, {signUp, logIn}] = useCurrentUser()\r\n  const history = useHistory();\r\n\r\n  if (loggedIn) return <Redirect to={\"/publish\"} />\r\n\r\n  const handleMint = (e) => {\r\n    e.preventDefault();\r\n    history.push(\"/publish\");\r\n  }\r\n\r\n  return (\r\n    <div className=\"f3-store-padding\">\r\n      <div>\r\n        <h1 style={{margin: \"10px 0px\"}}>NFT Storefront</h1>\r\n        <div className=\"f3-store-hline\"></div>\r\n      </div>\r\n      <div className=\"f3-store-padding\">\r\n        <div>\r\n          <h2 className=\"f3-store-h2\">Available Collections</h2>\r\n        </div>\r\n        <div className=\"f3-store-container\">\r\n          <Item />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n","export const LOADING = \"LOADING\"\r\n\r\n// Exposed states of a Flow Transaction\r\nexport const IDLE = \"IDLE\"\r\nexport const PROCESSING = \"PROCESSING\"\r\nexport const SUCCESS = \"SUCCESS\"\r\nexport const ERROR = \"ERROR\"\r\n\r\n// How long to pause on a success or error message\r\n// before transitioning back to an IDLE state.\r\nexport const IDLE_DELAY = 1000\r\n","import * as fcl from \"@onflow/fcl\"\r\nimport {Address} from \"@onflow/types\"\r\n\r\nconst CODE = fcl.cdc`\r\nimport NonFungibleToken from 0xNonFungibleToken\r\nimport HandyItems from 0xHandyItems\r\n\r\n  pub fun main(address: Address): [UInt64] {\r\n    if let collection =  getAccount(address).getCapability<&HandyItems.Collection{NonFungibleToken.CollectionPublic, HandyItems.HandyItemsCollectionPublic}>(HandyItems.CollectionPublicPath).borrow() {\r\n      return collection.getIDs()\r\n    }\r\n\r\n    return []\r\n  }\r\n`\r\n\r\nexport function fetchAccountItems(address) {\r\n  if (address == null) return Promise.resolve([])\r\n\r\n  // prettier-ignore\r\n  return fcl.send([\r\n    fcl.script(CODE),\r\n    fcl.args([\r\n      fcl.arg(address, Address)\r\n    ]),\r\n  ]).then(fcl.decode).then(d => d.sort((a, b) => a - b))\r\n}\r\n","import {atomFamily, selectorFamily, useRecoilState} from \"recoil\"\r\nimport {fetchAccountItems} from \"../flow/script.get-account-items\"\r\nimport {IDLE, PROCESSING} from \"../global/constants\"\r\n\r\nexport const $state = atomFamily({\r\n  key: \"account-items::state\",\r\n  default: selectorFamily({\r\n    key: \"account-items::default\",\r\n    get: address => async () => {\r\n      return fetchAccountItems(address)},\r\n  }),\r\n})\r\n\r\nexport const $status = atomFamily({\r\n  key: \"account-items::status\",\r\n  default: IDLE,\r\n})\r\n\r\nexport function useAccountItems(address) {\r\n  const [items, setItems] = useRecoilState($state(address))\r\n  const [status, setStatus] = useRecoilState($status(address))\r\n\r\n  console.log(\"B\")\r\n  console.log(items)\r\n\r\n  return {\r\n    ids: items,\r\n    status,\r\n\r\n    async mint(recipient, name, \r\n      imageUrl, color, info, quantity) {\r\n      setStatus(PROCESSING)\r\n      await fetch(process.env.REACT_APP_API_ITEM_MINT, {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify({\r\n          recipient: recipient,\r\n          name: name,\r\n          tokenURI: imageUrl,\r\n          color: color,\r\n          info: info,\r\n          quantity: quantity,\r\n        }),\r\n      })\r\n      await fetchAccountItems(recipient).then(setItems)\r\n      setStatus(IDLE)\r\n    },\r\n    async refresh() {\r\n      setStatus(PROCESSING)\r\n      await fetchAccountItems(address).then(setItems)\r\n      setStatus(IDLE)\r\n    },\r\n  }\r\n}\r\n","import {send, decode, script, args, arg, cdc} from \"@onflow/fcl\"\r\nimport {Address} from \"@onflow/types\"\r\n\r\nconst CODE = cdc`\r\n  import FungibleToken from 0xFungibleToken\r\n  import NonFungibleToken from 0xNonFungibleToken\r\n  import HandyItems from 0xHandyItems\r\n  import NFTStorefront from 0xNFTStorefront\r\n\r\n  pub fun hasItems(_ address: Address): Bool {\r\n    return getAccount(address)\r\n      .getCapability<&HandyItems.Collection{NonFungibleToken.CollectionPublic, HandyItems.HandyItemsCollectionPublic}>(HandyItems.CollectionPublicPath)\r\n      .check()\r\n  }\r\n\r\n  pub fun hasStorefront(_ address: Address): Bool {\r\n    return getAccount(address)\r\n      .getCapability<&NFTStorefront.Storefront{NFTStorefront.StorefrontPublic}>(NFTStorefront.StorefrontPublicPath)\r\n      .check()\r\n  }\r\n\r\n  pub fun main(address: Address): {String: Bool} {\r\n    let ret: {String: Bool} = {}\r\n    ret[\"HandyItems\"] = hasItems(address)\r\n    ret[\"HandyItemsMarket\"] = hasStorefront(address)\r\n    return ret\r\n  }\r\n`\r\n\r\nexport function isAccountInitialized(address) {\r\n  if (address == null || address == \"\")\r\n    return Promise.resolve(false)\r\n\r\n  // prettier-ignore\r\n  return send([\r\n    script(CODE),\r\n    args([\r\n      arg(address, Address)\r\n    ])\r\n  ]).then(decode)\r\n}\r\n","import * as fcl from \"@onflow/fcl\"\r\n\r\nconst noop = async () => {}\r\n\r\nexport async function tx(mods = [], opts = {}) {\r\n  const onStart = opts.onStart || noop\r\n  const onSubmission = opts.onSubmission || noop\r\n  const onUpdate = opts.onUpdate || noop\r\n  const onSuccess = opts.onSuccess || noop\r\n  const onError = opts.onError || noop\r\n  const onComplete = opts.onComplete || noop\r\n\r\n  try {\r\n    onStart()\r\n    var txId = await fcl.send(mods).then(fcl.decode)\r\n    console.info(\r\n      `%cTX[${txId}]: ${fvsTx(await fcl.config().get(\"env\"), txId)}`,\r\n      \"color:purple;font-weight:bold;font-family:monospace;\"\r\n    )\r\n    onSubmission(txId)\r\n    var unsub = await fcl.tx(txId).subscribe(onUpdate)\r\n    var txStatus = await fcl.tx(txId).onceSealed()\r\n    unsub()\r\n    console.info(\r\n      `%cTX[${txId}]: ${fvsTx(await fcl.config().get(\"env\"), txId)}`,\r\n      \"color:green;font-weight:bold;font-family:monospace;\"\r\n    )\r\n    await onSuccess(txStatus)\r\n    return txStatus\r\n  } catch (error) {\r\n    console.error(\r\n      `TX[${txId}]: ${fvsTx(await fcl.config().get(\"env\"), txId)}`,\r\n      error\r\n    )\r\n    onError(error)\r\n  } finally {\r\n    await onComplete()\r\n  }\r\n}\r\n\r\nfunction fvsTx(env, txId) {\r\n  return `https://flow-view-source.com/${env}/tx/${txId}`\r\n}\r\n","// prettier-ignore\r\nimport {transaction, limit, proposer, payer, authorizations, authz, cdc} from \"@onflow/fcl\"\r\nimport {invariant} from \"@onflow/util-invariant\"\r\nimport {tx} from \"./util/tx\"\r\n\r\nconst CODE = cdc`\r\n  import FungibleToken from 0xFungibleToken\r\n  import FlowToken from 0xFlowToken\r\n  import NonFungibleToken from 0xNonFungibleToken\r\n  import HandyItems from 0xHandyItems\r\n  import NFTStorefront from 0xNFTStorefront\r\n\r\n  pub fun hasItems(_ address: Address): Bool {\r\n    return getAccount(address)\r\n      .getCapability<&HandyItems.Collection{NonFungibleToken.CollectionPublic, HandyItems.HandyItemsCollectionPublic}>(HandyItems.CollectionPublicPath)\r\n      .check()\r\n  }\r\n\r\n  pub fun hasFLOW(_ address: Address): Bool {\r\n    let receiver = getAccount(address)\r\n      .getCapability<&FlowToken.Vault{FungibleToken.Receiver}>(/public/flowReceiver)\r\n      .check()\r\n\r\n    let balance = getAccount(address)\r\n      .getCapability<&FlowToken.Vault{FungibleToken.Balance}>(/public/flowBalance)\r\n      .check()\r\n\r\n    return receiver && balance\r\n  }\r\n\r\n  pub fun hasStorefront(_ address: Address): Bool {\r\n    return getAccount(address)\r\n      .getCapability<&NFTStorefront.Storefront{NFTStorefront.StorefrontPublic}>(NFTStorefront.StorefrontPublicPath)\r\n      .check()\r\n  }\r\n\r\n  transaction {\r\n    prepare(acct: AuthAccount) {\r\n\r\n      if !hasItems(acct.address) {\r\n        if acct.borrow<&HandyItems.Collection>(from: HandyItems.CollectionStoragePath) == nil {\r\n          acct.save(<-HandyItems.createEmptyCollection(), to: HandyItems.CollectionStoragePath)\r\n        }\r\n        acct.unlink(HandyItems.CollectionPublicPath)\r\n        acct.link<&HandyItems.Collection{NonFungibleToken.CollectionPublic, HandyItems.HandyItemsCollectionPublic}>(HandyItems.CollectionPublicPath, target: HandyItems.CollectionStoragePath)\r\n      }\r\n\r\n      if !hasStorefront(acct.address) {\r\n        if acct.borrow<&NFTStorefront.Storefront>(from: NFTStorefront.StorefrontStoragePath) == nil {\r\n          acct.save(<-NFTStorefront.createStorefront(), to: NFTStorefront.StorefrontStoragePath)\r\n        }\r\n        acct.unlink(NFTStorefront.StorefrontPublicPath)\r\n        acct.link<&NFTStorefront.Storefront{NFTStorefront.StorefrontPublic}>(NFTStorefront.StorefrontPublicPath, target: NFTStorefront.StorefrontStoragePath)\r\n      }\r\n    }\r\n  }\r\n`\r\n\r\nexport async function initializeAccount(address, opts = {}) {\r\n  // prettier-ignore\r\n  invariant(address != null, \"Tried to initialize an account but no address was supplied\")\r\n\r\n  return tx(\r\n    [\r\n      transaction(CODE),\r\n      limit(70),\r\n      proposer(authz),\r\n      payer(authz),\r\n      authorizations([authz]),\r\n    ],\r\n    opts\r\n  )\r\n}\r\n","import {\r\n  atomFamily,\r\n  selectorFamily,\r\n  useRecoilState,\r\n  useRecoilValue,\r\n} from \"recoil\"\r\nimport {\r\n  LOADING,\r\n  IDLE,\r\n  PROCESSING,\r\n  SUCCESS,\r\n  ERROR,\r\n  IDLE_DELAY,\r\n} from \"../global/constants\"\r\nimport {isAccountInitialized} from \"../flow/script.is-account-initialized\"\r\nimport {initializeAccount} from \"../flow/tx.initialize-account\"\r\n\r\nexport const $address = atomFamily({\r\n  key: \"init::address\",\r\n  default: null,\r\n})\r\n\r\nexport const $status = atomFamily({\r\n  key: \"init::status\",\r\n  default: IDLE,\r\n})\r\n\r\nexport const $init = atomFamily({\r\n  key: \"init::state\",\r\n  default: selectorFamily({\r\n    key: \"init::default\",\r\n    get: address => () => isAccountInitialized(address),\r\n  }),\r\n})\r\n\r\nexport const $computedInit = selectorFamily({\r\n  key: \"init::computed\",\r\n  get:\r\n    address =>\r\n    async ({get}) => {\r\n      const all = get($init(address))\r\n      return all.HandyItems || all.HandyItemsMarket\r\n    },\r\n})\r\n\r\nexport function useInitialized(addr) {\r\n  const [address, setAddr] = useRecoilState($address(addr))\r\n  const [init, setInit] = useRecoilState($init(address))\r\n  const isInitialized = useRecoilValue($computedInit(address))\r\n  const [status, setStatus] = useRecoilState($status(address))\r\n\r\n  console.log(address)\r\n\r\n  function recheck() {\r\n    isAccountInitialized(address).then(setInit)\r\n  }\r\n\r\n  return {\r\n    ...init,\r\n    isInitialized,\r\n    status: isInitialized == null ? LOADING : status,\r\n    recheck,\r\n    async initialize(addr) {\r\n      initializeAccount(addr != null ? addr \r\n        : address, {\r\n        onStart() {\r\n          setStatus(PROCESSING)\r\n        },\r\n        async onSuccess() {\r\n          recheck()\r\n          setStatus(SUCCESS)\r\n        },\r\n        onError() {\r\n          setStatus(ERROR)\r\n        },\r\n        async onComplete() {\r\n          setStatus(IDLE)\r\n        },\r\n      })\r\n    },\r\n    async isSpecificInitialized(address) {\r\n      const all = await isAccountInitialized(address)\r\n      console.log(all)\r\n      setAddr(address)\r\n      return all.HandyItems || all.HandyItemsMarket\r\n    }\r\n  }\r\n}\r\n","\r\nimport {IDLE} from \"../global/constants\"\r\nimport {useCurrentUser} from \"../hooks/use-current-user.hook\"\r\nimport {useAccountItems} from \"../hooks/use-account-items.hook\"\r\nimport { useInitialized } from \"../hooks/use-initialized.hook\"\r\nimport {Suspense, useState} from \"react\"\r\nimport {Redirect, useHistory} from \"react-router-dom\"\r\n\r\nimport './publish.css'\r\n\r\nexport function Page() {\r\n  const [state, setState] = useState({\r\n    txtAddress: \"\",\r\n    txtName: \"\",\r\n    txtImageURL: \"\", \r\n    txtColor: \"\",\r\n    txtInfo: \"\",\r\n    txtQuantity: \"\"\r\n  })\r\n  const history = useHistory();\r\n  const [user] = useCurrentUser()\r\n\r\n  // if (user.addr == null) return <Redirect to={\"/\"} />\r\n  const items = useAccountItems(user.addr)\r\n  const init = useInitialized(null)\r\n\r\n  const handleInit = (e) => {\r\n    e.preventDefault();\r\n    init.initialize(state.txtAddress);\r\n  }\r\n\r\n  const handleChange = (e) => {\r\n    setState({\r\n      ...state, \r\n      [e.target.name]: e.target.value\r\n    })\r\n  }\r\n\r\n  const handleView = (e) => {\r\n    e.preventDefault();\r\n    history.push(\"/list\");\r\n  }\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n\r\n    if (state.txtAddress.length != 18) {\r\n      alert(\"Enter Address Corretly!\");\r\n      return;\r\n    }\r\n\r\n    if (!await init.isSpecificInitialized(state.txtAddress)) {\r\n      alert(\"Initialize account first!\");\r\n      return;\r\n    }\r\n\r\n    items.mint(\r\n      state.txtAddress, \r\n      state.txtName, \r\n      state.txtImageURL, \r\n      state.txtColor, \r\n      state.txtInfo, \r\n      state.txtQuantity\r\n      )\r\n\r\n      console.log(items.ids.length);\r\n  }\r\n\r\n  const handleMarket = (e) => {\r\n    e.preventDefault();\r\n    history.push(\"/market\");\r\n  }\r\n\r\n  return (\r\n    <div className=\"grid-center\">\r\n      <h1>{user.addr}</h1>\r\n      <h1>Publish a NFT</h1>\r\n      <form>\r\n        <div className=\"grid-container\">\r\n          <label htmlFor=\"txtName\">Name</label> \r\n          <input name=\"txtName\" id=\"txtName\" onChange={handleChange} />\r\n          <label htmlFor=\"txtAddress\">Address</label> \r\n          <input name=\"txtAddress\" id=\"txtAddress\" onChange={handleChange} />\r\n          <label>Image URL</label> \r\n          <input name=\"txtImageURL\" id=\"txtImageURL\" onChange={handleChange} />\r\n          <label>Color</label> \r\n          <input name=\"txtColor\" id=\"txtColor\" onChange={handleChange} />\r\n          <label>Info</label> \r\n          <input name=\"txtInfo\" id=\"txtInfo\" onChange={handleChange} />\r\n          {1 == 0 && <><label>Quantity</label> \r\n          <input name=\"txtQuantity\" id=\"txtQuantity\" onChange={handleChange} />\r\n          </>}\r\n          <label>Series</label> \r\n          <input name=\"txtSeries\" id=\"txtSeries\" onChange={handleChange} />\r\n          <button disabled={user.addr !== state.txtAddress} onClick={handleInit}>\r\n            Initialize\r\n          </button>\r\n          <button disabled={items.status !== IDLE} onClick={handleSubmit}>\r\n            Send\r\n          </button>\r\n          <button onClick={handleView}>View List</button>\r\n          <button onClick={handleMarket}>View Marketplace</button>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  )\r\n}\r\n","// TODO: MOVE TO @onflow/util-batch\r\nimport {spawn, send, INIT} from \"@onflow/util-actor\"\r\nimport {uid} from \"@onflow/util-uid\"\r\n\r\nconst TICK = 500\r\nconst BUFFER_SIZE = 10\r\n\r\nconst SET_CALLBACK = \"SET_CALLBACK\"\r\nconst PROCESS = \"PROCESS\"\r\nconst MAYBE_PROCESS = \"MAYBE_PROCESS\"\r\nconst TIMEOUT = \"TIMEOUT\"\r\nconst ENQUEUE = \"ENQUEUE\"\r\nconst RESOLVE = \"RESOLVE\"\r\n\r\nconst HANDLERS = {\r\n  [INIT]: ctx => {\r\n    ctx.put(\"need\", new Set())\r\n    ctx.put(\"processing\", new Set())\r\n    ctx.put(\"hold\", {})\r\n    setInterval(() => ctx.sendSelf(TIMEOUT), TICK)\r\n  },\r\n\r\n  [SET_CALLBACK]: (ctx, letter, callback) => {\r\n    ctx.put(\"callback\", async (...args) => callback(...args))\r\n    ctx.sendSelf(MAYBE_PROCESS)\r\n  },\r\n\r\n  [ENQUEUE]: (ctx, letter, args) => {\r\n    const id = uid()\r\n    const hold = {id, args, reply: letter.reply}\r\n    ctx.update(\"need\", n => {\r\n      n.add(id)\r\n      return n\r\n    })\r\n    ctx.update(\"hold\", h => ({...h, [id]: hold}))\r\n    ctx.sendSelf(MAYBE_PROCESS)\r\n  },\r\n\r\n  [TIMEOUT]: ctx => {\r\n    if (ctx.get(\"need\").size) ctx.sendSelf(PROCESS)\r\n  },\r\n\r\n  [MAYBE_PROCESS]: ctx => {\r\n    if (ctx.get(\"need\") >= BUFFER_SIZE) ctx.sendSelf(PROCESS)\r\n  },\r\n\r\n  [PROCESS]: ctx => {\r\n    const callback = ctx.get(\"callback\")\r\n    if (typeof callback !== \"function\") return\r\n\r\n    const need = ctx.get(\"need\")\r\n    ctx.update(\"processing\", p => new Set([...p, ...need]))\r\n    ctx.put(\"need\", new Set())\r\n\r\n    const hold = ctx.get(\"hold\")\r\n    const payload = [...need].reduce(\r\n      (acc, key) => ({...acc, [key]: hold[key].args}),\r\n      {}\r\n    )\r\n\r\n    callback(payload).then(result => {\r\n      ctx.sendSelf(RESOLVE, result)\r\n    })\r\n  },\r\n  [RESOLVE]: (ctx, _, results) => {\r\n    const have = Object.keys(results)\r\n    for (let h of have) {\r\n      const hold = ctx.get(\"hold\")\r\n      hold[h].reply(results[h])\r\n      ctx.update(\"processing\", p => {\r\n        p.delete(h)\r\n        return p\r\n      })\r\n      ctx.update(\"hold\", hold => {\r\n        delete hold[h]\r\n        return hold\r\n      })\r\n    }\r\n  },\r\n}\r\n\r\nexport const batch = (name, callback) => {\r\n  spawn(HANDLERS, name)\r\n  send(name, SET_CALLBACK, callback)\r\n\r\n  return {\r\n    enqueue(...args) {\r\n      return send(name, ENQUEUE, args, {expectReply: true, timeout: 0})\r\n    },\r\n  }\r\n}\r\n","import * as fcl from \"@onflow/fcl\"\r\nimport * as t from \"@onflow/types\"\r\nimport {batch} from \"./util/batch\"\r\n\r\nconst CODE = fcl.cdc`\r\nimport NonFungibleToken from 0xNonFungibleToken\r\nimport HandyItems from 0xHandyItems\r\n\r\npub struct AccountItem {\r\n  pub let itemID: UInt64\r\n  pub let name: String\r\n  pub let tokenURI: String\r\n  pub let editionID: UInt32\r\n  pub let series: UInt32\r\n  pub let isSerial: Bool\r\n  pub let quantity: UInt64\r\n  pub let price: UInt64\r\n  pub var editionName: String\r\n  pub let owner: Address\r\n\r\n  init(itemID: UInt64, name: String, tokenURI: String, editionID: UInt32, series: UInt32, isSerial: Bool,\r\n    quantity: UInt64, price: UInt64, owner: Address) {\r\n    self.itemID = itemID\r\n    self.name = name\r\n    self.tokenURI = tokenURI\r\n    self.editionID = editionID\r\n    self.series = series\r\n    self.isSerial = isSerial\r\n    self.quantity = quantity\r\n    self.price = price\r\n    self.editionName = \"\"\r\n    self.owner = owner\r\n  }\r\n\r\n  pub fun set(editionName: String) {\r\n    self.editionName = editionName\r\n  }\r\n}\r\n\r\npub fun fetch(address: Address, id: UInt64): AccountItem? {\r\n  if let col = getAccount(address).getCapability<&HandyItems.Collection{NonFungibleToken.CollectionPublic, HandyItems.HandyItemsCollectionPublic}>(HandyItems.CollectionPublicPath).borrow() {\r\n    if let item = col.borrowHandyItem(id: id) {\r\n      return AccountItem(itemID: id, name: item.name, tokenURI: item.tokenURI, \r\n        editionID: item.editionID, series: item.series, isSerial: item.isSerial,\r\n        quantity: item.quantity, price: item.price, owner: address)\r\n    }\r\n  }\r\n\r\n  return nil\r\n}\r\n\r\npub fun main(keys: [String], addresses: [Address], ids: [UInt64]): {String: AccountItem?} {\r\n\r\n  var e: {UInt32: HandyItems.QueryEditionData} = {}\r\n\r\n  let r: {String: AccountItem?} = {}\r\n  var i = 0\r\n\r\n  e = HandyItems.getEditions()\r\n\r\n  while i < keys.length {\r\n    let key = keys[i]\r\n    let address = addresses[i]\r\n    let id = ids[i]\r\n    let rkey = fetch(address: address, id: id)\r\n\r\n    rkey!.set(editionName: e[rkey!.editionID]!.name)\r\n    r[key] = rkey;\r\n    i = i + 1\r\n  }\r\n  return r\r\n}\r\n`\r\n\r\nconst collate = px => {\r\n  return Object.keys(px).reduce(\r\n    (acc, key) => {\r\n      acc.keys.push(key)\r\n      acc.addresses.push(px[key][0])\r\n      acc.ids.push(px[key][1])\r\n      return acc\r\n    },\r\n    {keys: [], addresses: [], ids: []}\r\n  )\r\n}\r\n\r\nconst {enqueue} = batch(\"FETCH_ACCOUNT_ITEM\", async px => {\r\n  const {keys, addresses, ids} = collate(px)\r\n\r\n  return fcl\r\n    .send([\r\n      fcl.script(CODE),\r\n      fcl.args([\r\n        fcl.arg(keys, t.Array(t.String)),\r\n        fcl.arg(addresses, t.Array(t.Address)),\r\n        fcl.arg(ids.map(Number), t.Array(t.UInt64)),\r\n      ]),\r\n    ])\r\n    .then(fcl.decode)\r\n})\r\n\r\nexport async function fetchAccountItem(address, id) {\r\n  if (address == null) return Promise.resolve(null)\r\n  if (id == null) return Promise.resolve(null)\r\n  return enqueue(address, id)\r\n}\r\n","import * as fcl from \"@onflow/fcl\"\r\nimport * as t from \"@onflow/types\"\r\nimport {tx} from \"./util/tx\"\r\n\r\nconst CODE = fcl.cdc`\r\n  import FungibleToken from 0xFungibleToken\r\n  import NonFungibleToken from 0xNonFungibleToken\r\n  import FlowToken from 0xFlowToken \r\n  import HandyItems from 0xHandyItems\r\n  import NFTStorefront from 0xNFTStorefront\r\n\r\n  transaction(saleItemID: UInt64, saleItemPrice: UFix64) {\r\n\r\n    let flowReceiver: Capability<&FlowToken.Vault{FungibleToken.Receiver}>\r\n    let handyItemsCollection: Capability<&HandyItems.Collection{NonFungibleToken.Provider, NonFungibleToken.CollectionPublic}>\r\n    let storefront: &NFTStorefront.Storefront\r\n\r\n    prepare(account: AuthAccount) {\r\n      // We need a provider capability, but one is not provided by default so we create one if needed.\r\n      let handyItemsCollectionProviderPrivatePath = /private/handyItemsCollectionProvider\r\n\r\n      self.flowReceiver = account.getCapability<&FlowToken.Vault{FungibleToken.Receiver}>(/public/flowTokenReceiver)!\r\n\r\n      assert(self.flowReceiver.borrow() != nil, message: \"Missing or mis-typed FlowToken receiver\")\r\n\r\n      if !account.getCapability<&HandyItems.Collection{NonFungibleToken.Provider, NonFungibleToken.CollectionPublic}>(handyItemsCollectionProviderPrivatePath)!.check() {\r\n        account.link<&HandyItems.Collection{NonFungibleToken.Provider, NonFungibleToken.CollectionPublic}>(handyItemsCollectionProviderPrivatePath, target: HandyItems.CollectionStoragePath)\r\n      }\r\n\r\n      self.handyItemsCollection = account.getCapability<&HandyItems.Collection{NonFungibleToken.Provider, NonFungibleToken.CollectionPublic}>(handyItemsCollectionProviderPrivatePath)!\r\n      assert(self.handyItemsCollection.borrow() != nil, message: \"Missing or mis-typed HandyItemsCollection provider\")\r\n      \r\n      self.storefront = account.borrow<&NFTStorefront.Storefront>(from: NFTStorefront.StorefrontStoragePath)\r\n        ?? panic(\"Missing or mis-typed NFTStorefront Storefront\")\r\n    }\r\n\r\n    execute {\r\n      let saleCut = NFTStorefront.SaleCut(\r\n        receiver: self.flowReceiver,\r\n        amount: saleItemPrice\r\n      )\r\n\r\n      self.storefront.createSaleOffer(\r\n        nftProviderCapability: self.handyItemsCollection,\r\n        nftType: Type<@HandyItems.NFT>(),\r\n        nftID: saleItemID,\r\n        salePaymentVaultType: Type<@FlowToken.Vault>(),\r\n        saleCuts: [saleCut]\r\n      )\r\n    }\r\n  }\r\n\r\n`\r\n\r\nexport function createSaleOffer({itemID, price}, opts = {}) {\r\n  if (itemID == null)\r\n    throw new Error(\"createSaleOffer(itemID, price) -- itemID required\")\r\n  if (price == null)\r\n    throw new Error(\"createSaleOffer(itemID, price) -- price required\")\r\n\r\n  // prettier-ignore\r\n  return tx([\r\n    fcl.transaction(CODE),\r\n    fcl.args([\r\n      fcl.arg(Number(itemID), t.UInt64),\r\n      fcl.arg(String(price), t.UFix64),\r\n    ]),\r\n    fcl.proposer(fcl.authz),\r\n    fcl.payer(fcl.authz),\r\n    fcl.authorizations([\r\n      fcl.authz\r\n    ]),\r\n    fcl.limit(1000)\r\n  ], opts)\r\n}\r\n","import {sansPrefix} from \"@onflow/fcl\"\r\nimport {atomFamily, selectorFamily, useRecoilState} from \"recoil\"\r\nimport {useCurrentUser} from \"../hooks/use-current-user.hook\"\r\nimport {fetchAccountItem} from \"../flow/script.get-account-item\"\r\nimport {createSaleOffer} from \"../flow/tx.create-sale-offer\"\r\nimport {IDLE, PROCESSING} from \"../global/constants\"\r\nimport {useAccountItems} from \"../hooks/use-account-items.hook\"\r\n\r\nfunction expand(key) {\r\n  return key.split(\"|\")\r\n}\r\n\r\nfunction comp(address, id) {\r\n  return [address, id].join(\"|\")\r\n}\r\n\r\nexport const $state = atomFamily({\r\n  key: \"account-item::state\",\r\n  default: selectorFamily({\r\n    key: \"account-item::default\",\r\n    get: key => async () => fetchAccountItem(...expand(key)),\r\n  }),\r\n})\r\n\r\nexport const $status = atomFamily({\r\n  key: \"account-item::status\",\r\n  default: IDLE,\r\n})\r\n\r\nexport function useAccountItem(address, id) {\r\n  const [cu] = useCurrentUser()\r\n  const accountItems = useAccountItems(address)\r\n  const key = comp(address, id)\r\n  const [item, setItem] = useRecoilState($state(key))\r\n  const [status, setStatus] = useRecoilState($status(key))\r\n\r\n  return {\r\n    ...item,\r\n    status,\r\n    owned: sansPrefix(cu.addr) === sansPrefix(address),\r\n    async refresh() {\r\n      setStatus(PROCESSING)\r\n      await fetchAccountItem(...expand(key)).then(setItem)\r\n      setStatus(IDLE)\r\n    },\r\n    async sell(price) {\r\n      await createSaleOffer(\r\n        {itemID: id, price: price},\r\n        {\r\n          onStart() {\r\n            setStatus(PROCESSING)\r\n          },\r\n          async onSuccess() {\r\n            accountItems.refresh()\r\n          },\r\n          async onComplete() {\r\n            setStatus(IDLE)\r\n          },\r\n          async onError(error) {\r\n            \r\n          },\r\n        }\r\n      )\r\n    },\r\n  }\r\n}\r\n","import React, {useEffect, useState, Suspense} from \"react\"\r\nimport {useAccountItem} from \"../hooks/use-account-item.hook\"\r\nimport {useCurrentUser} from \"../hooks/use-current-user.hook\"\r\nimport {IDLE} from \"../global/constants\"\r\n\r\nexport function AccountItemCluster({address, id}) {\r\n  const item = useAccountItem(address, id)\r\n\r\n  const BUSY = item.status !== IDLE\r\n\r\n  if (address == null) return null\r\n  if (id == null) return null\r\n\r\n  return (\r\n    <div className=\"grid-list\">\r\n      <h3>Handy#{item.itemID}</h3>\r\n\r\n      <p>{item.name}</p>\r\n      <p>{item.tokenURI}</p>\r\n      <p>{item.color}</p>\r\n      <p>{item.info}</p>\r\n      <button \r\n        onClick={() => item.sell(\"5.0\")}\r\n      >\r\n        Sell\r\n      </button>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default function WrappedAccountItemCluster(props) {\r\n  return (\r\n    <Suspense fallback={null}>\r\n      <AccountItemCluster {...props} />\r\n    </Suspense>\r\n  )\r\n}\r\n","import {Suspense} from \"react\"\r\nimport {useAccountItems} from \"../hooks/use-account-items.hook\"\r\nimport {useCurrentUser} from \"../hooks/use-current-user.hook\"\r\nimport Item from \"./account-item\"\r\n\r\nexport function AccountItemsCluster({address}) {\r\n  const items = useAccountItems(address)\r\n  const [cu] = useCurrentUser()\r\n\r\n  if (address == null) return null\r\n\r\n  if (items.ids.length <= 0)\r\n    return (\r\n      <p>No Items</p>\r\n    )\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"grid-list\">\r\n        <h2>ID</h2>\r\n        <h2>Name</h2>\r\n        <h2>Image URL</h2>\r\n        <h2>Color</h2>\r\n        <h2>Info</h2>\r\n      </div>\r\n      {items.ids.map(id => (\r\n        <Item key={id} id={id} address={address} />\r\n      ))}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default function WrappedAccountItemsCluster({address}) {\r\n  return (\r\n    <Suspense fallback={null}>\r\n      <AccountItemsCluster address={address} />\r\n    </Suspense>\r\n  )\r\n}\r\n","\r\nimport {IDLE} from \"../global/constants\"\r\nimport {useCurrentUser} from \"../hooks/use-current-user.hook\"\r\nimport {useAccountItems} from \"../hooks/use-account-items.hook\"\r\nimport {Suspense, useState} from \"react\"\r\nimport {Redirect, useHistory} from \"react-router-dom\"\r\nimport AccountItemsCluster from '../comps/account-items'\r\n\r\nimport './list.css'\r\n\r\nexport function Page() {\r\n  const [state, setState] = useState({\r\n    txtAddress: \"\"\r\n  })\r\n  const [address, setAddress] = useState(\"\");\r\n  const [count, setCount] = useState(0);\r\n  const history = useHistory();\r\n  const [user] = useCurrentUser()\r\n\r\n  // if (user.addr == null) return <Redirect to={\"/\"} />\r\n\r\n  const handleChange = (e) => {\r\n    setState({\r\n      ...state,\r\n      [e.target.name]: e.target.value,\r\n    })\r\n  }\r\n\r\n  const handleList = (e) => {\r\n\r\n    if (state.txtAddress.length != 18) {\r\n      alert(\"Enter Address Corretly!\");\r\n      return;\r\n    }\r\n\r\n    setAddress(state.txtAddress);\r\n    setCount(1 - count);\r\n  }\r\n\r\n  const handleMint = (e) => {\r\n    e.preventDefault();\r\n    history.push(\"/publish\");\r\n  }\r\n\r\n  const handleMarket = (e) => {\r\n    e.preventDefault();\r\n    history.push(\"/market\");\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h1>NFT Listings</h1>\r\n\t    <div>\r\n        <label>Address: </label>\r\n        <input name=\"txtAddress\" id=\"txtAddress\" onChange={handleChange}/>&nbsp;\r\n        <button onClick={handleList}>List NFTs</button>\r\n        &nbsp;<button onClick={handleMint}>Mint an NFT</button>\r\n        &nbsp;<button onClick={handleMarket}>View Marketplace</button>\r\n        {\r\n          address != \"\" && <AccountItemsCluster address={address} />\r\n        }\r\n\t    </div>\r\n    </div>\r\n  )\r\n}\r\n","import {send, decode, script, args, arg, cdc} from \"@onflow/fcl\"\r\nimport {Address} from \"@onflow/types\"\r\n\r\nconst CODE = cdc`\r\nimport NFTStorefront from 0xNFTStorefront\r\n\r\npub fun main(account: Address): [UInt64] {\r\n    let storefrontRef = getAccount(account)\r\n        .getCapability<&NFTStorefront.Storefront{NFTStorefront.StorefrontPublic}>(\r\n            NFTStorefront.StorefrontPublicPath\r\n        )\r\n        .borrow()\r\n        ?? panic(\"Could not borrow public storefront from address\")\r\n    \r\n    return storefrontRef.getSaleOfferIDs()\r\n}\r\n`\r\n\r\nexport function getMarketItems(address) {\r\n  if (address == null || address == \"\")\r\n    return Promise.resolve([])\r\n\r\n  // prettier-ignore\r\n  return send([\r\n    script(CODE),\r\n    args([\r\n      arg(address, Address)\r\n    ])\r\n  ]).then(decode).then(d => d.sort((a, b) => a - b))\r\n}","import { useEffect } from \"react\";\r\nimport { atom, useRecoilState } from \"recoil\"\r\nimport { getMarketItems } from \"../flow/sc.get-market-items\";\r\nimport {IDLE, PROCESSING} from \"../global/constants\"\r\n\r\nexport const $marketItemsState = atom({\r\n  key: \"market-items::state\",\r\n  default: [],\r\n})\r\n\r\nexport const $marketItemsStatus = atom({\r\n  key: \"market-items::status\",\r\n  default: IDLE,\r\n})\r\n\r\nexport function useMarketItems(address) {\r\n  const [items, setItems] = useRecoilState($marketItemsState);\r\n  const [status, setStatus] = useRecoilState($marketItemsStatus);\r\n\r\n  useEffect(() => {\r\n    getMarketItems(address).then(setItems);\r\n  }, [address]);\r\n\r\n  return {\r\n    items,\r\n    status,\r\n    refresh() {\r\n      getMarketItems(address).then(setItems);\r\n    }\r\n  }\r\n}","import { send, script, args, arg, decode } from \"@onflow/fcl\"\r\nimport { Address, UInt64 } from \"@onflow/types\"\r\n\r\nexport async function getMarketItem(address, id) {\r\n  return send([\r\n      script`\r\n        import HandyItems from 0xHandyItems\r\n        import NonFungibleToken from 0xNonFungibleToken\r\n        import NFTStorefront from 0xNFTStorefront\r\n\r\n        pub struct SaleItem {\r\n          pub let itemID: UInt64\r\n          pub let name: String\r\n          pub let tokenURI: String\r\n          pub let color: String\r\n          pub let info: String\r\n          pub let owner: Address\r\n          pub let price: UFix64\r\n\r\n          init(itemID: UInt64, name: String, tokenURI: String, color: String,info: String, owner: Address, price: UFix64) {\r\n            self.itemID = itemID\r\n            self.name = name\r\n            self.tokenURI = tokenURI\r\n            self.color = color\r\n            self.info = info\r\n            self.owner = owner\r\n            self.price = price\r\n          }\r\n        }\r\n\r\n        pub fun main(address: Address, saleOfferResourceID: UInt64): SaleItem? {\r\n          let account = getAccount(address)\r\n\r\n          if let storefrontRef = account.getCapability<&NFTStorefront.Storefront{NFTStorefront.StorefrontPublic}>(NFTStorefront.StorefrontPublicPath).borrow() {\r\n            if let saleOffer = storefrontRef.borrowSaleOffer(saleOfferResourceID: saleOfferResourceID) {\r\n              let details = saleOffer.getDetails()\r\n\r\n              let itemID = details.nftID\r\n              let itemPrice = details.salePrice\r\n\r\n              if let collection = account.getCapability<&HandyItems.Collection{NonFungibleToken.CollectionPublic, HandyItems.HandyItemsCollectionPublic}>(HandyItems.CollectionPublicPath).borrow() {\r\n                if let item = collection.borrowHandyItem(id: itemID) {\r\n                  return SaleItem(itemID: itemID, name: item.name, tokenURI: item.tokenURI, \r\n                    color: item.color, info: item.info, owner: address, price: itemPrice)\r\n                }\r\n              }\r\n            }\r\n          }\r\n            \r\n          return nil\r\n        }\r\n    `,\r\n      args([arg(address, Address), arg(Number(id), UInt64)]),\r\n    ])\r\n    .then(decode)\r\n}\r\n","import * as fcl from \"@onflow/fcl\"\r\nimport * as t from \"@onflow/types\"\r\nimport {tx} from \"./util/tx\"\r\nimport {invariant} from \"@onflow/util-invariant\"\r\n\r\nconst CODE = fcl.cdc`\r\n  import FungibleToken from 0xFungibleToken\r\n  import NonFungibleToken from 0xNonFungibleToken\r\n  import FlowToken from 0xFlowToken\r\n  import HandyItems from 0xHandyItems\r\n  import NFTStorefront from 0xNFTStorefront\r\n\r\n  transaction(saleOfferResourceID: UInt64, storefrontAddress: Address) {\r\n\r\n    let paymentVault: @FungibleToken.Vault\r\n    let handyItemsCollection: &HandyItems.Collection{NonFungibleToken.Receiver}\r\n    let storefront: &NFTStorefront.Storefront{NFTStorefront.StorefrontPublic}\r\n    let saleOffer: &NFTStorefront.SaleOffer{NFTStorefront.SaleOfferPublic}\r\n\r\n    prepare(account: AuthAccount) {\r\n      self.storefront = getAccount(storefrontAddress)\r\n        .getCapability<&NFTStorefront.Storefront{NFTStorefront.StorefrontPublic}>(\r\n          NFTStorefront.StorefrontPublicPath\r\n        )!\r\n        .borrow()\r\n        ?? panic(\"Could not borrow Storefront from provided address\")\r\n\r\n      self.saleOffer = self.storefront.borrowSaleOffer(saleOfferResourceID: saleOfferResourceID)\r\n        ?? panic(\"No Offer with that ID in Storefront\")\r\n      \r\n      let price = self.saleOffer.getDetails().salePrice\r\n\r\n      let mainFlowVault = account.borrow<&FlowToken.Vault>(from: /storage/flowTokenVault)\r\n        ?? panic(\"Cannot borrow Kibble vault from account storage\")\r\n      \r\n      self.paymentVault <- mainFlowVault.withdraw(amount: price)\r\n\r\n      self.handyItemsCollection = account.borrow<&HandyItems.Collection{NonFungibleToken.Receiver}>(\r\n        from: HandyItems.CollectionStoragePath\r\n      ) ?? panic(\"Cannot borrow HandyItems collection receiver from account\")\r\n    }\r\n  \r\n    execute {\r\n      let item <- self.saleOffer.accept(\r\n        payment: <-self.paymentVault\r\n      )\r\n\r\n      self.handyItemsCollection.deposit(token: <-item)\r\n\r\n      self.storefront.cleanup(saleOfferResourceID: saleOfferResourceID)\r\n    }\r\n  }\r\n`\r\n\r\n// prettier-ignore\r\nexport function buyMarketItem({itemID, ownerAddress}, opts = {}) {\r\n  invariant(itemID != null, \"buyMarketItem({itemID, ownerAddress}) -- itemID required\")\r\n  invariant(ownerAddress != null, \"buyMarketItem({itemID, ownerAddress}) -- ownerAddress required\")\r\n\r\n  return tx([\r\n    fcl.transaction(CODE),\r\n    fcl.args([\r\n      fcl.arg(Number(itemID), t.UInt64),\r\n      fcl.arg(String(ownerAddress), t.Address),\r\n    ]),\r\n    fcl.proposer(fcl.authz),\r\n    fcl.payer(fcl.authz),\r\n    fcl.authorizations([fcl.authz]),\r\n    fcl.limit(1000),\r\n  ], opts)\r\n}\r\n","import { useEffect, useState } from \"react\";\r\nimport { getMarketItem } from \"../flow/sc.get-market-item\";\r\nimport { buyMarketItem } from \"../flow/tx.buy-market-item\"\r\n\r\nexport function useMarketItem(address, id) {\r\n  const [item, setItem] = useState({});\r\n\r\n  console.log(item.price);\r\n\r\n  useEffect(() => {\r\n      getMarketItem(address, id).then(setItem);\r\n  }, [address, id]);\r\n\r\n  return {\r\n    ...item,\r\n    async buy() {\r\n      await buyMarketItem(\r\n        {itemID: id, ownerAddress: address},\r\n        {\r\n          onStart() {\r\n          },\r\n          async onSuccess() {\r\n          },\r\n          async onComplete() {\r\n          },\r\n          async onError(error) {\r\n          },\r\n        }\r\n      )\r\n    },\r\n  }\r\n}","import {Suspense} from \"react\"\r\nimport {useMarketItem} from \"../hooks/use-market-item.hook\"\r\nimport {useCurrentUser} from \"../hooks/use-current-user.hook\"\r\nimport {IDLE} from \"../global/constants\"\r\n\r\nexport function MarketItemCluster({address, id}) {\r\n  const [cu, loggedIn] = useCurrentUser()\r\n  const item = useMarketItem(address, id)\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"grid-list\">\r\n        <h3>Handy#{item.itemID}</h3>\r\n\r\n        <p>{item.name}</p>\r\n        <p>{item.tokenURI}</p>\r\n        <p>{item.color}</p>\r\n        <p>{item.info}</p>\r\n        <button \r\n          onClick={() => item.buy()}\r\n        >\r\n          Buy\r\n        </button>\r\n     </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default function WrappedMarketItemCluster(props) {\r\n  return (\r\n    <Suspense fallback={null}>\r\n      <MarketItemCluster {...props} />\r\n    </Suspense>\r\n  )\r\n}\r\n","import {Suspense} from \"react\"\r\nimport {useMarketItems} from \"../hooks/use-market-items.hook\"\r\nimport Item from './market-item'\r\n\r\nexport function MarketItemsCluster() {\r\n  const {items} = useMarketItems(\"0x048ac6df55e9c6e6\");\r\n\r\n  if (items.length == 0)\r\n    return (\r\n      <p>No items listed for sale</p>\r\n    )\r\n\r\n  return (\r\n    <div>\r\n      <h1>NFT Marketplace</h1>\r\n      <div className=\"grid-list\">\r\n        <h2>ID</h2>\r\n        <h2>Name</h2>\r\n        <h2>Image URL</h2>\r\n        <h2>Color</h2>\r\n        <h2>Info</h2>\r\n      </div>\r\n      {items.map(item => \r\n          <Item\r\n            key={item}\r\n            id={item}\r\n            address={\"0x048ac6df55e9c6e6\"}\r\n          />\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default function WrappedMarketItemsCluster() {\r\n  return (\r\n    <Suspense fallback={null}>\r\n      <MarketItemsCluster />\r\n    </Suspense>\r\n  )\r\n}","\r\nimport {useCurrentUser} from \"../hooks/use-current-user.hook\"\r\nimport {Suspense, useState} from \"react\"\r\nimport {Redirect, useHistory} from \"react-router-dom\"\r\nimport MarketItems from \"../comps/market-items\"\r\n\r\nexport function Page() {\r\n  const history = useHistory();\r\n  const [user] = useCurrentUser()\r\n\r\n  // if (user.addr == null) return <Redirect to={\"/\"} />\r\n\r\n  return (\r\n    <div>\r\n      <h1>\r\n        {user.addr}\r\n      </h1>\r\n      <MarketItems />\r\n    </div>\r\n  )\r\n}\r\n","import React from \"react\"\r\n\r\nexport function SideBar() {\r\n\r\n  return (\r\n    <div className=\"f3-left\">\r\n      <h2>Mint Panel</h2>\r\n      <ul>\r\n        <li>\r\n          <a href=\"/mintpanel/\">Collections</a>\r\n        </li>\r\n        <li>\r\n          <a href=\"/mintpanel/mintnft\">Mint NFTs</a>\r\n        </li>\r\n        <li>\r\n          <a href=\"/mintpanel/assets\">Assets</a>\r\n        </li>\r\n        <li>\r\n          <a href=\"/mintpanel/settings\">Settings</a>\r\n        </li>\r\n      </ul>\r\n    </div>\r\n  )\r\n}","\r\nimport {useEffect, useRef} from \"react\"\r\nimport {IDLE} from \"../../global/constants\"\r\nimport {useCurrentUser} from \"../../hooks/use-current-user.hook\"\r\nimport {useAccountItems} from \"../../hooks/use-account-items.hook\"\r\nimport {Suspense, useState} from \"react\"\r\nimport {Redirect, useHistory} from \"react-router-dom\"\r\nimport AccountItemsCluster from '../../comps/account-items'\r\n\r\nimport { SideBar } from \"./sidebar\"\r\nimport axios from \"axios\";\r\nimport fs from \"fs\";\r\n\r\nimport \"./index.css\"\r\n\r\nconst PINATA_API_KEY = \"8b0d90ef4bf74827eb88\";\r\nconst PINATA_SECRET_API_KEY = \"609ec3e0c1641f4b41c0c6370eed55e108cea9f9396b9e5a1d123061de07b99b\";\r\n\r\nexport const pinJSONToIPFS = (pinataApiKey, pinataSecretApiKey, JSONBody) => {\r\n    const url = `https://api.pinata.cloud/pinning/pinJSONToIPFS`;\r\n    return axios\r\n        .post(url, JSONBody, {\r\n            headers: {\r\n                pinata_api_key: pinataApiKey,\r\n                pinata_secret_api_key: pinataSecretApiKey\r\n            }\r\n        })\r\n        .then(function (response) {\r\n            \r\n        })\r\n        .catch(function (error) {\r\n            \r\n        });\r\n};\r\n\r\nexport const pinFileToIPFS = async (pinataApiKey, pinataSecretApiKey, imgData) => {\r\n  const url = `https://api.pinata.cloud/pinning/pinFileToIPFS`;\r\n  \r\n  console.log(imgData);\r\n\r\n  let data = new FormData();\r\n  data.append('file', imgData.obj.files[0]);\r\n  \r\n  const metadata = JSON.stringify({\r\n      name: imgData.name,\r\n      keyvalues: {\r\n        name: imgData.name\r\n      }\r\n  });\r\n  data.append('pinataMetadata', metadata);\r\n  \r\n  const pinataOptions = JSON.stringify({\r\n      cidVersion: 0,\r\n      customPinPolicy: {\r\n          regions: [\r\n              {\r\n                  id: 'FRA1',\r\n                  desiredReplicationCount: 1\r\n              },\r\n              {\r\n                  id: 'NYC1',\r\n                  desiredReplicationCount: 2\r\n              }\r\n          ]\r\n      }\r\n  });\r\n  data.append('pinataOptions', pinataOptions);\r\n\r\n  return axios\r\n      .post(url, data, {\r\n          maxBodyLength: 'Infinity',\r\n          headers: {\r\n              'Content-Type': `multipart/form-data; boundary=${data._boundary}`,\r\n              pinata_api_key: pinataApiKey,\r\n              pinata_secret_api_key: pinataSecretApiKey\r\n          }\r\n      })\r\n      .then(function (response) {\r\n          axios.post(process.env.REACT_APP_API_URL + \"/v1/assets/upload\", {\r\n            name: imgData.name,\r\n            path: \"https://cloudflare-ipfs.com/ipfs/\" + response.data.IpfsHash\r\n          })\r\n      })\r\n      .catch(function (error) {\r\n          //handle error here\r\n      });\r\n};\r\n\r\nexport function Assets() {\r\n  const [state, setState] = useState({\r\n    inFile: \"\",\r\n    inName: \"\"\r\n  })\r\n  const [asList, setList] = useState([]);\r\n  const [isDirty, setDirty] = useState(true);\r\n  const inputFile = useRef(null);\r\n\r\n  useEffect(async () => {\r\n    if (!isDirty) return;\r\n\r\n    const assetList = await axios.get(process.env.REACT_APP_API_URL + \"/v1/assets/list\");\r\n    if (assetList.data.success != \"true\") return;\r\n\r\n    setDirty(false);\r\n    setList(assetList.data.result);\r\n  }, [isDirty])\r\n\r\n  const handleUpload = async (e) => {\r\n    e.preventDefault();\r\n\r\n    console.log(inputFile);\r\n\r\n    if (state.inFile.length == 0) return;\r\n\r\n    await pinFileToIPFS(\r\n      PINATA_API_KEY, \r\n      PINATA_SECRET_API_KEY, {\r\n        name: state.inName,\r\n        path: state.inFile,\r\n        obj: inputFile.current\r\n      });\r\n    setDirty(true);\r\n  }\r\n\r\n  const handleChange = (e) => {\r\n    setState({\r\n      ...state, \r\n      [e.target.name]: e.target.value\r\n    })\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <div style={{paddingLeft: \"20px\"}}>\r\n        <div>\r\n          <h3>::Assets</h3>\r\n        </div>\r\n        <div className=\"f3-panel-layout f3-asset\">\r\n          <div>\r\n            <label>Name</label>\r\n          </div>\r\n          <div>\r\n            <input id=\"inName\" name=\"inName\" value={state.inName} onChange={handleChange} />\r\n          </div>\r\n          <div></div>\r\n          <div>\r\n            <label>Browse for file: &nbsp;</label>\r\n          </div>\r\n          <div>\r\n            <input type=\"file\" id=\"inFile\" name=\"inFile\" value={state.inFile} onChange={handleChange} ref={inputFile}/>\r\n          </div>\r\n          <div>\r\n            <button id=\"\" onClick={handleUpload}>UPLOAD</button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className=\"hline\" />\r\n      <div style={{paddingLeft: \"20px\"}}>\r\n        <div>\r\n          <h3>Current Assets</h3>\r\n          {\r\n            asList.map(item => (\r\n              <div className=\"f3-current-asset\">\r\n                <div>\r\n                  <img \r\n                    src={item.img_url}\r\n                    width=\"78px\"\r\n                    height=\"49px\"\r\n                  />\r\n                </div>\r\n                <div>\r\n                  <span>{item.name}</span>\r\n                </div>\r\n                <div>\r\n                  <a href={item.img_url} target=\"_blank\">{item.img_url}</a>\r\n                </div>\r\n              </div>\r\n            ))\r\n          }\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n\r\n}\r\n\r\nexport function Page() {\r\n  return (\r\n    <div>\r\n      <SideBar />\r\n      <div className=\"f3-main\">\r\n        <Assets />\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n","import {send, decode, script, args, arg, cdc} from \"@onflow/fcl\"\r\nimport {Address} from \"@onflow/types\"\r\n\r\nconst CODE = cdc`\r\nimport NFTStorefront from 0xNFTStorefront\r\nimport HandyItems from 0xHandyItems\r\n\r\npub fun main(): {UInt32: HandyItems.QueryEditionData} {\r\n  return HandyItems.getEditions()\r\n}\r\n`\r\n\r\nexport function getEditionList() {\r\n  // prettier-ignore\r\n  return send([\r\n    script(CODE),\r\n    args()\r\n  ]).then(decode)\r\n}","\r\nimport {useEffect, useRef} from \"react\"\r\nimport {IDLE} from \"../../global/constants\"\r\nimport {useCurrentUser} from \"../../hooks/use-current-user.hook\"\r\nimport {useAccountItems} from \"../../hooks/use-account-items.hook\"\r\nimport { useIpfsItems } from \"../../hooks/use-ipfs-items.hook\"\r\nimport { useEditionList } from \"../../hooks/use-edition-list.hook\"\r\nimport {Suspense, useState} from \"react\"\r\nimport {Redirect, useHistory} from \"react-router-dom\"\r\nimport AccountItemsCluster from '../../comps/account-items'\r\n\r\nimport { SideBar } from \"./sidebar\"\r\nimport axios from \"axios\";\r\n\r\nexport function MintNFT() {\r\n  const [state, setState] = useState({\r\n    inName: \"\",\r\n    inAsset: \"\",\r\n    inQuantity: \"0\",\r\n    inSerial: \"yes\",\r\n    inCollection: \"0\",\r\n    inPrice: \"\",\r\n    inSeries: \"-1\"\r\n  })\r\n  const items = useIpfsItems(); \r\n  const { editions } = useEditionList();\r\n\r\n  const handleChange = (e) => {\r\n    setState({\r\n      ...state, \r\n      [e.target.name]: e.target.value\r\n    })\r\n  }\r\n\r\n  const handleMint = (e) => {\r\n    e.preventDefault();\r\n\r\n    mintItem({\r\n      name: state.inName,\r\n      tokenURI: items.assets[state.inAsset].img_url,\r\n      quantity: state.inQuantity,\r\n      isSerial: state.inSerial,\r\n      collection: state.inCollection,\r\n      price: state.inPrice,\r\n      series: state.inSeries\r\n    })\r\n\r\n  }\r\n\r\n  const mintItem = async (params) => {\r\n    console.log(params);\r\n\r\n    await fetch(process.env.REACT_APP_API_ITEM_MINT, {\r\n    // await fetch(\"http://localhost:3003/v1/handy-items/mint\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify(params),\r\n    })\r\n  }\r\n\r\n  const editionList = () => {\r\n    var res = [];\r\n    console.log(editions);\r\n    \r\n    for (const prop in editions) {\r\n      res.push(<option key={prop} value={prop}>{editions[prop].name}</option>)\r\n    }\r\n\r\n    console.log(res);\r\n    return res;\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <div style={{paddingLeft: \"20px\"}}>\r\n        <div>\r\n          <h3>::Mint NFTs</h3>\r\n        </div>\r\n        <div className=\"f3-panel-layout f3-mintnft-head\">\r\n          {/* First Row: Name and Asset(IPFS) */}\r\n          <div className=\"f3-mintnft-row\">\r\n            <div className=\"f3-mintnft-item\">\r\n              <div>\r\n                <label>Name: </label>\r\n              </div>\r\n              <div>\r\n                <input id=\"inName\" name=\"inName\" value={state.inName} onChange={handleChange} />\r\n              </div>\r\n            </div>\r\n            <div className=\"f3-mintnft-item\">\r\n              <div>\r\n                <label>Asset(IPFS): </label>\r\n              </div>\r\n              <div>\r\n                <select id=\"inAsset\" name=\"inAsset\" onChange={handleChange} value={state.inAsset} >\r\n                  <option value=\"\"></option>\r\n                  {\r\n                    items.assets.map((item, index) => (\r\n                      <option key={index} value={index}>{item.name}</option>\r\n                    ))\r\n                  }\r\n                </select>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          {/* Second Row: Quantity and Serial#'s */}\r\n          <div className=\"f3-mintnft-row\">\r\n            <div className=\"f3-mintnft-item\">\r\n              <div>\r\n                <label>Quantity: </label>\r\n              </div>\r\n              <div>\r\n                <input id=\"inQuantity\" name=\"inQuantity\" value={state.inQuantity} \r\n                       onChange={handleChange} size=\"4\" className=\"f3-center\" />\r\n              </div>\r\n            </div>\r\n            <div className=\"f3-mintnft-item\">\r\n              <div>\r\n                <label>Serial #'s: </label>\r\n              </div>\r\n              <div>\r\n                <select id=\"inSerial\" name=\"inSerial\" value={state.inSerial} onChange={handleChange}>\r\n                  <option value=\"yes\">Yes</option>\r\n                  <option value=\"no\">No</option>\r\n                </select>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          {/* Third Row: Collection and Price */}\r\n          <div className=\"f3-mintnft-row\">\r\n            <div className=\"f3-mintnft-item\">\r\n              <div>\r\n                <label>Collection: </label>\r\n              </div>\r\n              <div>\r\n                <select id=\"inCollection\" name=\"inCollection\" value={state.inCollection} onChange={handleChange}>\r\n                  <option value=\"A\">Zeb Nolan Interview</option>\r\n                </select>\r\n              </div>\r\n            </div>\r\n            <div className=\"f3-mintnft-item\">\r\n              <div>\r\n                <label>Price(USD): </label>\r\n              </div>\r\n              <div>\r\n                <input id=\"inPrice\" name=\"inPrice\" value={state.inPrice} onChange={handleChange} size=\"8\" /><span>&nbsp;$</span>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          {/* Fourth Row: Series and Mint Button */}\r\n          <div className=\"f3-mintnft-row\">\r\n            <div className=\"f3-mintnft-item\">\r\n              <div>\r\n                <label>Series: </label>\r\n              </div>\r\n              <div>\r\n                <select id=\"inSeries\" name=\"inSeries\" value={state.inSeries} onChange={handleChange}>\r\n                  <option value=\"-1\"></option>\r\n                  { editionList() }\r\n                </select>\r\n              </div>\r\n            </div>\r\n            <div className=\"f3-mintnft-item\">\r\n              <div>\r\n                <button onClick={handleMint}>MINT NFT</button>\r\n              </div>\r\n              <div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n        </div>\r\n      </div>\r\n      <div className=\"hline\" />\r\n        <div style={{paddingLeft: \"20px\"}}>\r\n          <div>\r\n            <h3>Current Series</h3>\r\n          </div>\r\n        </div>\r\n    </div>\r\n  )\r\n\r\n}\r\n\r\nexport function Page() {\r\n  return (\r\n    <div>\r\n      <SideBar />\r\n      <div className=\"f3-main\">\r\n        <MintNFT />\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n","import { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nexport function useIpfsItems() {\r\n  const [items, setItems] = useState([]);\r\n\r\n  useEffect(async () => {\r\n    const assetList = await axios.get(process.env.REACT_APP_API_URL + \"/v1/assets/list\");\r\n    if (assetList.data.success != \"true\") return;\r\n\r\n    setItems(assetList.data.result);\r\n  }, []);\r\n\r\n  return {\r\n    assets: items\r\n  }\r\n}","import { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nimport { getEditionList } from \"../flow/sc.get-edition-list\";\r\n\r\nexport function useEditionList() {\r\n  const [items, setItems] = useState({});\r\n\r\n  useEffect(async () => {\r\n    const editions = await getEditionList();\r\n\r\n    console.log(editions);\r\n\r\n    for (const prop in editions)\r\n      console.log(editions[prop].name);\r\n\r\n    setItems(editions);\r\n  }, []);\r\n\r\n  return {\r\n    editions: items\r\n  }\r\n}","import { useState, Suspense } from \"react\";\r\nimport { useAccountItem } from \"../../hooks/use-account-item.hook\";\r\nimport { useAccountItems } from \"../../hooks/use-account-items.hook\";\r\n\r\nexport function Item({address, id}) {\r\n  const item = useAccountItem(address, id)\r\n\r\n  console.log(item);\r\n\r\n  return (\r\n    <div className=\"f3-store-series-item\">\r\n      <img src={item.tokenURI} width=\"274px\" height=\"172px\" />\r\n      <a href={\"/zeb-nolan/\" + item.itemID}>{item.editionName}</a>\r\n    </div>\r\n  )\r\n\r\n}\r\n\r\nexport function WrappedItem(props) {\r\n  return (\r\n    <Suspense fallback={null}>\r\n      <Item {...props} />\r\n    </Suspense>\r\n  )\r\n}\r\n\r\nexport function Page() {\r\n  const items = useAccountItems(\"0xab5876435fbf2063\")\r\n\r\n  return (\r\n    <div className=\"f3-store-padding\">\r\n      <div>\r\n        <h1 style={{margin: \"10px 0px\"}}>NFT Storefront</h1>\r\n        <div className=\"f3-store-hline\"></div>\r\n      </div>\r\n      <div className=\"f3-store-padding\">\r\n        <div>\r\n          <h2 className=\"f3-store-h2\">Zeb Nolan Interview Collection - Current Series</h2>\r\n        </div>\r\n        <div className=\"f3-store-container\">\r\n          {\r\n            items.ids.map((item, index) => (\r\n              <WrappedItem address=\"0xab5876435fbf2063\" id={item} />\r\n            ))\r\n          }\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}","import { Suspense } from \"react\";\r\nimport { useParams } from \"react-router\";\r\nimport { useAccountItem } from \"../../hooks/use-account-item.hook\";\r\n\r\nexport function Page() {\r\n  let { id } = useParams();\r\n  const item = useAccountItem(\"0xab5876435fbf2063\", id)\r\n\r\n  console.log(item);\r\n\r\n  return (\r\n    <div className=\"f3-store-padding\">\r\n      <div>\r\n        <h1 style={{margin: \"10px 0px\"}}>NFT Storefront</h1>\r\n        <div className=\"f3-store-hline\"></div>\r\n      </div>\r\n      <div className=\"f3-store-padding\">\r\n        <div>\r\n          <h2 className=\"f3-store-h2\">Zeb Nolan Interview Collection - {item.editionName} Series</h2>\r\n        </div>\r\n        <div>\r\n          <img src={item.tokenURI} />\r\n          <p>Player: {item.name}</p>\r\n          <p>Series: {item.editionName}</p>\r\n          <p>Available: {item.quantity}</p>\r\n          <p>Price: ${item.price}</p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport function WrappedPage(props) {\r\n  return (\r\n    <Suspense fallback={null}>\r\n      <Page {...props} />\r\n    </Suspense>\r\n  )\r\n}","\r\nexport function Page() {\r\n  return <div>Page Not Found</div>\r\n}\r\n","import React, { Suspense } from 'react'\nimport ReactDOM from 'react-dom'\nimport {RecoilRoot} from \"recoil\"\nimport reportWebVitals from './reportWebVitals'\nimport {BrowserRouter as Router, Switch, Route} from \"react-router-dom\"\n\nimport './index.css';\n\nimport {Page as Root} from \"./pages/root.page\"\nimport {Page as Publish} from \"./pages/publish.page\"\nimport {Page as List} from \"./pages/list.page\"\nimport {Page as Market} from \"./pages/market.page\"\nimport {Page as MintPanel} from \"./pages/mint\"\nimport {Page as Assets} from \"./pages/mint/assets\"\nimport {Page as MintNFT} from \"./pages/mint/mintnft\"\nimport {Page as Series} from \"./pages/storefront/series\"\nimport {WrappedPage as Purchase} from \"./pages/storefront/purchase\"\nimport {Page as NotFound} from \"./pages/not-found.page\"\n\nimport * as fcl from \"@onflow/fcl\"\nimport * as t from \"@onflow/types\"\n\nwindow.fcl = fcl\nwindow.t = t\n\nfcl\n  .config()\n  .put(\"faucet\", process.env.REACT_APP_FAUCET_ADDRESS)\n  .put(\"accessNode.api\", process.env.REACT_APP_FLOW_ACCESS_API_URL)\n  .put(\"challenge.handshake\", process.env.REACT_APP_WALLET_DISCOVERY)\n  .put(\"0xFungibleToken\", process.env.REACT_APP_CONTRACT_FUNGIBLE_TOKEN)\n  .put(\"0xNonFungibleToken\", process.env.REACT_APP_CONTRACT_NON_FUNGIBLE_TOKEN)\n  .put(\"0xNFTStorefront\", process.env.REACT_APP_CONTRACT_NFT_STOREFRONT)\n  .put(\"0xHandyItems\", process.env.REACT_APP_CONTRACT_HANDY_ITEMS)\n  .put(\"0xFlowToken\", process.env.REACT_APP_CONTRACT_FLOW_TOKEN)\n  .put(\"decoder.Type\", val => val.staticType)\n\n  console.log(process.env)\n\nReactDOM.render(\n  <React.StrictMode>\n    <RecoilRoot>\n      <Router>\n        <Switch>\n          <Route exact path=\"/publish\">\n            <Suspense fallback={null}>\n              <Publish />\n            </Suspense>\n          </Route>\n          <Route exact path=\"/list\">\n            <List />\n          </Route>\n          <Route exact path=\"/market\">\n            <Market />\n          </Route>\n          <Route exact path=\"/mintpanel/assets\">\n            <Assets />\n          </Route>\n          <Route exact path=\"/mintpanel/mintnft\">\n            <MintNFT />\n          </Route>\n          <Route exact path=\"/zeb-nolan\">\n            <Suspense fallback={null}>\n              <Series />\n            </Suspense>\n          </Route>\n          <Route path=\"/zeb-nolan/:id\" children={<Purchase />} />\n          <Route exact path=\"/\">\n            <Root />\n          </Route>\n          <Route>\n            <NotFound />\n          </Route>\n        </Switch>\n      </Router>\n    </RecoilRoot>\n  </React.StrictMode>\n  ,\n  document.getElementById(\"root\")\n)\n\nreportWebVitals()"],"sourceRoot":""}