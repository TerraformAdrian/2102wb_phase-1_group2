{"version":3,"sources":["reportWebVitals.js","hooks/use-current-user.hook.js","global/constants.js","flow/script.get-account-items.js","hooks/use-account-items.hook.js","flow/script.is-account-initialized.js","flow/util/tx.js","flow/tx.initialize-account.js","hooks/use-initialized.hook.js","pages/publish.page.js","flow/util/batch.js","flow/script.get-account-item.js","flow/tx.create-sale-offer.js","hooks/use-account-item.hook.js","comps/account-item.js","comps/account-items.js","pages/list.page.js","flow/sc.get-market-items.js","hooks/use-market-items.hook.js","flow/sc.get-market-item.js","flow/tx.buy-market-item.js","hooks/use-market-item.hook.js","comps/market-item.js","comps/market-items.js","pages/market.page.js","pages/mint/sidebar.js","pages/mint/assets.js","flow/sc.get-edition-list.js","hooks/use-edition-list.hook.js","flow/sc.get-series-list.js","hooks/use-series-list.hook.js","flow/sc.get-set-all.js","flow/sc.get-set-item.js","hooks/use-set-item.hook.js","pages/mint/mintnft.js","hooks/use-ipfs-items.hook.js","hooks/use-set-all.hook.js","pages/mint/collections.js","pages/storefront/series.js","flow/sc.get-series-item.js","hooks/use-series-item.hook.js","flow/sc.get-set-list.js","pages/storefront/edition.js","hooks/use-set-list.hook.js","flow/sc.get-edition-item.js","flow/tx.purchase-handy-item.js","flow/tx.initialize-my-account.js","pages/storefront/initacc.js","pages/navbar.js","pages/storefront/purchase.js","hooks/use-edition-item.hook.js","pages/storefront/mywallet.js","pages/not-found.page.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","currentUser","atom","key","default","addr","loggedIn","cid","tools","logIn","fcl","logOut","signUp","changeUser","useCurrentUser","useRecoilState","user","setUser","useEffect","subscribe","IDLE","PROCESSING","CODE","fetchAccountItems","address","Promise","resolve","Address","d","sort","a","b","$state","atomFamily","selectorFamily","get","$status","useAccountItems","items","setItems","status","setStatus","console","log","ids","mint","recipient","name","imageUrl","color","info","quantity","fetch","process","method","headers","body","JSON","stringify","tokenURI","refresh","cdc","isAccountInitialized","send","script","args","arg","decode","noop","tx","mods","opts","onStart","onSubmission","onUpdate","onSuccess","onError","onComplete","txId","fvsTx","unsub","onceSealed","txStatus","error","env","initializeAccount","invariant","transaction","limit","proposer","authz","payer","authorizations","$init","$computedInit","all","FUSD","HandyItems","HandyItemsMarket","useInitialized","init","setInit","isInitialized","useRecoilValue","recheck","initialize","isSpecificInitialized","Page","useState","txtAddress","txtName","txtImageURL","txtColor","txtInfo","txtQuantity","state","setState","history","useHistory","handleChange","e","target","value","handleSubmit","preventDefault","length","alert","className","htmlFor","id","onChange","disabled","onClick","push","callback","SET_CALLBACK","PROCESS","MAYBE_PROCESS","TIMEOUT","ENQUEUE","RESOLVE","HANDLERS","INIT","ctx","put","Set","setInterval","sendSelf","letter","uid","hold","reply","update","n","add","h","size","need","p","reduce","acc","result","_","results","have","Object","keys","delete","collate","px","addresses","t","map","Number","spawn","enqueue","expectReply","timeout","fetchAccountItem","createSaleOffer","itemID","price","Error","String","expand","split","useAccountItem","cu","accountItems","join","comp","item","setItem","owned","sansPrefix","sell","AccountItemCluster","WrappedAccountItemCluster","props","fallback","AccountItemsCluster","WrappedAccountItemsCluster","setAddress","count","setCount","getMarketItems","$marketItemsState","$marketItemsStatus","UInt64","buyMarketItem","ownerAddress","useMarketItem","getMarketItem","buy","MarketItemCluster","WrappedMarketItemCluster","MarketItemsCluster","useMarketItems","WrappedMarketItemsCluster","SideBar","href","Assets","inFile","inName","asList","setList","isDirty","setDirty","listingStatus","setListingStatus","uploadStatus","setUploadStatus","inputFile","useRef","axios","assetList","data","success","handleUpload","pinFileToIPFS","path","obj","current","pinataApiKey","pinataSecretApiKey","imgData","FormData","append","files","metadata","keyvalues","pinataOptions","cidVersion","customPinPolicy","regions","desiredReplicationCount","post","maxBodyLength","_boundary","pinata_api_key","pinata_secret_api_key","response","IpfsHash","toast","catch","style","paddingLeft","type","ref","height","width","src","img_url","getEditionList","series","UInt32","useEditionList","bReload","prop","editions","useSeriesList","getSetItem","useSetItem","set","reload","Item","meta","image","WrappedItem","MintNFT","inAsset","inQuantity","inSerial","inSeries","inPrice","inEdition","assets","useIpfsItems","sets","useSetAllList","createSet","params","inThumb","index","inDescription","res","seriesList","editionList","desc","thumb","isSerial","edition","SeriesCluster","paddingRight","upSeriesStatus","setSeriesStatus","upEditionStatus","setEditionStatus","handleCreateSeries","inSeriesName","inSeriesImg","handleCreateEdition","inEditionName","inEditionSeries","inEditionImg","class","getSeriesList","getCurrentSeries","margin","getList","getSeriesItem","useSeriesItem","getSetList","useParams","useSetList","getEditionItem","DELETE_COLLECTION","CREATE_COLLECTION","Init","float","seriesID","useEditionItem","editionID","buyingState","setBuyingState","numberMinted","setID","purchaseHandyItem","WrappedPage","serialID","controls","window","val","staticType","ReactDOM","render","StrictMode","exact","position","delay","document","getElementById"],"mappings":"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","file":"static/js/main.d2ff33cd.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {useEffect} from \"react\"\r\nimport {atom, useRecoilState} from \"recoil\"\r\nimport * as fcl from \"@onflow/fcl\"\r\n\r\nexport const currentUser = atom({\r\n  key: \"CURRENT_USER\",\r\n  default: {addr: null, loggedIn: null, cid: null},\r\n})\r\n\r\nconst tools = {\r\n  logIn: fcl.logIn,\r\n  logOut: fcl.unauthenticate,\r\n  signUp: fcl.signUp,\r\n  changeUser: fcl.reauthenticate,\r\n}\r\n\r\nexport function useCurrentUser() {\r\n  const [user, setUser] = useRecoilState(currentUser)\r\n  useEffect(() => fcl.currentUser().subscribe(setUser), [setUser])\r\n  return [user, user.addr != null, tools]\r\n}\r\n","export const LOADING = \"LOADING\"\r\n\r\n// Exposed states of a Flow Transaction\r\nexport const IDLE = \"IDLE\"\r\nexport const PROCESSING = \"PROCESSING\"\r\nexport const SUCCESS = \"SUCCESS\"\r\nexport const ERROR = \"ERROR\"\r\n\r\n// How long to pause on a success or error message\r\n// before transitioning back to an IDLE state.\r\nexport const IDLE_DELAY = 1000\r\n","import * as fcl from \"@onflow/fcl\"\r\nimport {Address} from \"@onflow/types\"\r\n\r\nconst CODE = fcl.cdc`\r\nimport NonFungibleToken from 0xNonFungibleToken\r\nimport HandyItems from 0xHandyItems\r\n\r\n  pub fun main(address: Address): [UInt64] {\r\n    if let collection =  getAccount(address).getCapability<&HandyItems.Collection{NonFungibleToken.CollectionPublic, HandyItems.HandyItemsCollectionPublic}>(HandyItems.CollectionPublicPath).borrow() {\r\n      return collection.getIDs()\r\n    }\r\n\r\n    return []\r\n  }\r\n`\r\n\r\nexport function fetchAccountItems(address) {\r\n  if (address == null) return Promise.resolve([])\r\n\r\n  // prettier-ignore\r\n  return fcl.send([\r\n    fcl.script(CODE),\r\n    fcl.args([\r\n      fcl.arg(address, Address)\r\n    ]),\r\n  ]).then(fcl.decode).then(d => d.sort((a, b) => a - b))\r\n}\r\n","import {atomFamily, selectorFamily, useRecoilState} from \"recoil\"\r\nimport {fetchAccountItems} from \"../flow/script.get-account-items\"\r\nimport {IDLE, PROCESSING} from \"../global/constants\"\r\n\r\nexport const $state = atomFamily({\r\n  key: \"account-items::state\",\r\n  default: selectorFamily({\r\n    key: \"account-items::default\",\r\n    get: address => async () => {\r\n      return fetchAccountItems(address)},\r\n  }),\r\n})\r\n\r\nexport const $status = atomFamily({\r\n  key: \"account-items::status\",\r\n  default: IDLE,\r\n})\r\n\r\nexport function useAccountItems(address) {\r\n  const [items, setItems] = useRecoilState($state(address))\r\n  const [status, setStatus] = useRecoilState($status(address))\r\n\r\n  console.log(\"B\")\r\n  console.log(items)\r\n\r\n  return {\r\n    ids: items,\r\n    status,\r\n\r\n    async mint(recipient, name, \r\n      imageUrl, color, info, quantity) {\r\n      setStatus(PROCESSING)\r\n      await fetch(process.env.REACT_APP_API_ITEM_MINT, {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify({\r\n          recipient: recipient,\r\n          name: name,\r\n          tokenURI: imageUrl,\r\n          color: color,\r\n          info: info,\r\n          quantity: quantity,\r\n        }),\r\n      })\r\n      await fetchAccountItems(recipient).then(setItems)\r\n      setStatus(IDLE)\r\n    },\r\n    async refresh() {\r\n      setStatus(PROCESSING)\r\n      await fetchAccountItems(address).then(setItems)\r\n      setStatus(IDLE)\r\n    },\r\n  }\r\n}\r\n","import {send, decode, script, args, arg, cdc} from \"@onflow/fcl\"\r\nimport {Address} from \"@onflow/types\"\r\n\r\nconst CODE = cdc`\r\n  import FungibleToken from 0xFungibleToken\r\n  import NonFungibleToken from 0xNonFungibleToken\r\n  import FUSD from 0xFUSD\r\n  import HandyItems from 0xHandyItems\r\n  import NFTStorefront from 0xNFTStorefront\r\n\r\n  pub fun hasFUSD(_ address: Address): Bool {\r\n    let receiver: Bool = getAccount(address)\r\n      .getCapability<&FUSD.Vault{FungibleToken.Receiver}>(/public/fusdReceiver)\r\n      .check()\r\n\r\n    let balance: Bool = getAccount(address)\r\n      .getCapability<&FUSD.Vault{FungibleToken.Balance}>(/public/fusdBalance)\r\n      .check()\r\n\r\n    return receiver && balance\r\n  }\r\n\r\n  pub fun hasItems(_ address: Address): Bool {\r\n    return getAccount(address)\r\n      .getCapability<&HandyItems.Collection{NonFungibleToken.CollectionPublic, HandyItems.HandyItemsCollectionPublic}>(HandyItems.CollectionPublicPath)\r\n      .check()\r\n  }\r\n\r\n  pub fun hasStorefront(_ address: Address): Bool {\r\n    return getAccount(address)\r\n      .getCapability<&NFTStorefront.Storefront{NFTStorefront.StorefrontPublic}>(NFTStorefront.StorefrontPublicPath)\r\n      .check()\r\n  }\r\n\r\n  pub fun main(address: Address): {String: Bool} {\r\n    let ret: {String: Bool} = {}\r\n    ret[\"FUSD\"] = hasFUSD(address)\r\n    ret[\"HandyItems\"] = hasItems(address)\r\n    ret[\"HandyItemsMarket\"] = true\r\n    return ret\r\n  }\r\n`\r\n\r\nexport function isAccountInitialized(address) {\r\n  if (address == null || address == \"\")\r\n    return Promise.resolve(false)\r\n\r\n  // prettier-ignore\r\n  return send([\r\n    script(CODE),\r\n    args([\r\n      arg(address, Address)\r\n    ])\r\n  ]).then(decode)\r\n}\r\n","import * as fcl from \"@onflow/fcl\"\r\n\r\nconst noop = async () => {}\r\n\r\nexport async function tx(mods = [], opts = {}) {\r\n  const onStart = opts.onStart || noop\r\n  const onSubmission = opts.onSubmission || noop\r\n  const onUpdate = opts.onUpdate || noop\r\n  const onSuccess = opts.onSuccess || noop\r\n  const onError = opts.onError || noop\r\n  const onComplete = opts.onComplete || noop\r\n\r\n  try {\r\n    onStart()\r\n    var txId = await fcl.send(mods).then(fcl.decode)\r\n    console.info(\r\n      `%cTX[${txId}]: ${fvsTx(await fcl.config().get(\"env\"), txId)}`,\r\n      \"color:purple;font-weight:bold;font-family:monospace;\"\r\n    )\r\n    onSubmission(txId)\r\n    var unsub = await fcl.tx(txId).subscribe(onUpdate)\r\n    var txStatus = await fcl.tx(txId).onceSealed()\r\n    unsub()\r\n    console.info(\r\n      `%cTX[${txId}]: ${fvsTx(await fcl.config().get(\"env\"), txId)}`,\r\n      \"color:green;font-weight:bold;font-family:monospace;\"\r\n    )\r\n    await onSuccess(txStatus)\r\n    return txStatus\r\n  } catch (error) {\r\n    console.error(\r\n      `TX[${txId}]: ${fvsTx(await fcl.config().get(\"env\"), txId)}`,\r\n      error\r\n    )\r\n    onError(error)\r\n  } finally {\r\n    await onComplete()\r\n  }\r\n}\r\n\r\nfunction fvsTx(env, txId) {\r\n  return `https://flow-view-source.com/${env}/tx/${txId}`\r\n}\r\n","// prettier-ignore\r\nimport {transaction, limit, proposer, payer, authorizations, authz, cdc} from \"@onflow/fcl\"\r\nimport {invariant} from \"@onflow/util-invariant\"\r\nimport {tx} from \"./util/tx\"\r\n\r\nconst CODE = cdc`\r\n  import FungibleToken from 0xFungibleToken\r\n  import FUSD from 0xFUSD\r\n  import NonFungibleToken from 0xNonFungibleToken\r\n  import HandyItems from 0xHandyItems\r\n  import NFTStorefront from 0xNFTStorefront\r\n\r\n  pub fun hasItems(_ address: Address): Bool {\r\n    return getAccount(address)\r\n      .getCapability<&HandyItems.Collection{NonFungibleToken.CollectionPublic, HandyItems.HandyItemsCollectionPublic}>(HandyItems.CollectionPublicPath)\r\n      .check()\r\n  }\r\n\r\n  pub fun hasFUSD(_ address: Address): Bool {\r\n    let receiver = getAccount(address)\r\n      .getCapability<&FUSD.Vault{FungibleToken.Receiver}>(/public/fusdReceiver)\r\n      .check()\r\n\r\n    let balance = getAccount(address)\r\n      .getCapability<&FUSD.Vault{FungibleToken.Balance}>(/public/fusdBalance)\r\n      .check()\r\n\r\n    return receiver && balance\r\n  }\r\n\r\n  pub fun hasStorefront(_ address: Address): Bool {\r\n    return getAccount(address)\r\n      .getCapability<&NFTStorefront.Storefront{NFTStorefront.StorefrontPublic}>(NFTStorefront.StorefrontPublicPath)\r\n      .check()\r\n  }\r\n\r\n  transaction {\r\n    prepare(acct: AuthAccount) {\r\n      if !hasFUSD(acct.address) {\r\n        if acct.borrow<&FUSD.Vault>(from: /storage/fusdVault) == nil {\r\n          acct.save(<-FUSD.createEmptyVault(), to: /storage/fusdVault)\r\n        }\r\n        acct.unlink(/public/fusdReceiver)\r\n        acct.unlink(/public/fusdBalance)\r\n        acct.link<&FUSD.Vault{FungibleToken.Receiver}>(/public/fusdReceiver, target: /storage/fusdVault)\r\n        acct.link<&FUSD.Vault{FungibleToken.Balance}>(/public/fusdBalance, target: /storage/fusdVault)\r\n      }\r\n\r\n      if !hasItems(acct.address) {\r\n        if acct.borrow<&HandyItems.Collection>(from: HandyItems.CollectionStoragePath) == nil {\r\n          acct.save(<-HandyItems.createEmptyCollection(), to: HandyItems.CollectionStoragePath)\r\n        }\r\n        acct.unlink(HandyItems.CollectionPublicPath)\r\n        acct.link<&HandyItems.Collection{NonFungibleToken.CollectionPublic, HandyItems.HandyItemsCollectionPublic}>(HandyItems.CollectionPublicPath, target: HandyItems.CollectionStoragePath)\r\n      }\r\n/*\r\n      if !hasStorefront(acct.address) {\r\n        if acct.borrow<&NFTStorefront.Storefront>(from: NFTStorefront.StorefrontStoragePath) == nil {\r\n          acct.save(<-NFTStorefront.createStorefront(), to: NFTStorefront.StorefrontStoragePath)\r\n        }\r\n        acct.unlink(NFTStorefront.StorefrontPublicPath)\r\n        acct.link<&NFTStorefront.Storefront{NFTStorefront.StorefrontPublic}>(NFTStorefront.StorefrontPublicPath, target: NFTStorefront.StorefrontStoragePath)\r\n      } */\r\n    }\r\n  }\r\n`\r\n\r\nexport async function initializeAccount(address, opts = {}) {\r\n  // prettier-ignore\r\n  invariant(address != null, \"Tried to initialize an account but no address was supplied\")\r\n\r\n  return tx(\r\n    [\r\n      transaction(CODE),\r\n      limit(70),\r\n      proposer(authz),\r\n      payer(authz),\r\n      authorizations([authz]),\r\n    ],\r\n    opts\r\n  )\r\n}\r\n","import {\r\n  atomFamily,\r\n  selectorFamily,\r\n  useRecoilState,\r\n  useRecoilValue,\r\n} from \"recoil\"\r\nimport {\r\n  LOADING,\r\n  IDLE,\r\n  PROCESSING,\r\n  SUCCESS,\r\n  ERROR,\r\n  IDLE_DELAY,\r\n} from \"../global/constants\"\r\nimport {isAccountInitialized} from \"../flow/script.is-account-initialized\"\r\nimport {initializeAccount} from \"../flow/tx.initialize-account\"\r\n\r\nexport const $address = atomFamily({\r\n  key: \"init::address\",\r\n  default: null,\r\n})\r\n\r\nexport const $status = atomFamily({\r\n  key: \"init::status\",\r\n  default: IDLE,\r\n})\r\n\r\nexport const $init = atomFamily({\r\n  key: \"init::state\",\r\n  default: selectorFamily({\r\n    key: \"init::default\",\r\n    get: address => () => isAccountInitialized(address),\r\n  }),\r\n})\r\n\r\nexport const $computedInit = selectorFamily({\r\n  key: \"init::computed\",\r\n  get:\r\n    address =>\r\n    async ({get}) => {\r\n      const all = get($init(address))\r\n      return all.FUSD && all.HandyItems && all.HandyItemsMarket\r\n    },\r\n})\r\n\r\nexport function useInitialized(address) {\r\n  // const [address, setAddr] = useRecoilState($address(addr))\r\n  const [init, setInit] = useRecoilState($init(address))\r\n  const isInitialized = useRecoilValue($computedInit(address))\r\n  const [status, setStatus] = useRecoilState($status(address))\r\n\r\n  function recheck() {\r\n    isAccountInitialized(address).then(setInit)\r\n  }\r\n\r\n  return {\r\n    ...init,\r\n    isInitialized,\r\n    status: isInitialized == null ? LOADING : status,\r\n    recheck,\r\n    async initialize(addr) {\r\n      initializeAccount(addr != null ? addr \r\n        : address, {\r\n        onStart() {\r\n          setStatus(PROCESSING)\r\n        },\r\n        async onSuccess() {\r\n          recheck()\r\n          setStatus(SUCCESS)\r\n        },\r\n        onError() {\r\n          setStatus(ERROR)\r\n        },\r\n        async onComplete() {\r\n          setStatus(IDLE)\r\n        },\r\n      })\r\n    },\r\n    async isSpecificInitialized(address) {\r\n      const all = await isAccountInitialized(address)\r\n      console.log(all)\r\n      // setAddr(address)\r\n      return all.FUSD && all.HandyItems && all.HandyItemsMarket\r\n    }\r\n  }\r\n}\r\n","\r\nimport {IDLE} from \"../global/constants\"\r\nimport {useCurrentUser} from \"../hooks/use-current-user.hook\"\r\nimport {useAccountItems} from \"../hooks/use-account-items.hook\"\r\nimport { useInitialized } from \"../hooks/use-initialized.hook\"\r\nimport {Suspense, useState} from \"react\"\r\nimport {Redirect, useHistory} from \"react-router-dom\"\r\n\r\nimport './publish.css'\r\n\r\nexport function Page() {\r\n  const [state, setState] = useState({\r\n    txtAddress: \"\",\r\n    txtName: \"\",\r\n    txtImageURL: \"\", \r\n    txtColor: \"\",\r\n    txtInfo: \"\",\r\n    txtQuantity: \"\"\r\n  })\r\n  const history = useHistory();\r\n  const [user] = useCurrentUser()\r\n\r\n  // if (user.addr == null) return <Redirect to={\"/\"} />\r\n  const items = useAccountItems(user.addr)\r\n  const init = useInitialized(null)\r\n\r\n  const handleInit = (e) => {\r\n    e.preventDefault();\r\n    init.initialize(state.txtAddress);\r\n  }\r\n\r\n  const handleChange = (e) => {\r\n    setState({\r\n      ...state, \r\n      [e.target.name]: e.target.value\r\n    })\r\n  }\r\n\r\n  const handleView = (e) => {\r\n    e.preventDefault();\r\n    history.push(\"/list\");\r\n  }\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n\r\n    if (state.txtAddress.length != 18) {\r\n      alert(\"Enter Address Corretly!\");\r\n      return;\r\n    }\r\n\r\n    if (!await init.isSpecificInitialized(state.txtAddress)) {\r\n      alert(\"Initialize account first!\");\r\n      return;\r\n    }\r\n\r\n    items.mint(\r\n      state.txtAddress, \r\n      state.txtName, \r\n      state.txtImageURL, \r\n      state.txtColor, \r\n      state.txtInfo, \r\n      state.txtQuantity\r\n      )\r\n\r\n      console.log(items.ids.length);\r\n  }\r\n\r\n  const handleMarket = (e) => {\r\n    e.preventDefault();\r\n    history.push(\"/market\");\r\n  }\r\n\r\n  return (\r\n    <div className=\"grid-center\">\r\n      <h1>{user.addr}</h1>\r\n      <h1>Publish a NFT</h1>\r\n      <form>\r\n        <div className=\"grid-container\">\r\n          <label htmlFor=\"txtName\">Name</label> \r\n          <input name=\"txtName\" id=\"txtName\" onChange={handleChange} />\r\n          <label htmlFor=\"txtAddress\">Address</label> \r\n          <input name=\"txtAddress\" id=\"txtAddress\" onChange={handleChange} />\r\n          <label>Image URL</label> \r\n          <input name=\"txtImageURL\" id=\"txtImageURL\" onChange={handleChange} />\r\n          <label>Color</label> \r\n          <input name=\"txtColor\" id=\"txtColor\" onChange={handleChange} />\r\n          <label>Info</label> \r\n          <input name=\"txtInfo\" id=\"txtInfo\" onChange={handleChange} />\r\n          {1 == 0 && <><label>Quantity</label> \r\n          <input name=\"txtQuantity\" id=\"txtQuantity\" onChange={handleChange} />\r\n          </>}\r\n          <label>Series</label> \r\n          <input name=\"txtSeries\" id=\"txtSeries\" onChange={handleChange} />\r\n          <button disabled={user.addr !== state.txtAddress} onClick={handleInit}>\r\n            Initialize\r\n          </button>\r\n          <button disabled={items.status !== IDLE} onClick={handleSubmit}>\r\n            Send\r\n          </button>\r\n          <button onClick={handleView}>View List</button>\r\n          <button onClick={handleMarket}>View Marketplace</button>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  )\r\n}\r\n","// TODO: MOVE TO @onflow/util-batch\r\nimport {spawn, send, INIT} from \"@onflow/util-actor\"\r\nimport {uid} from \"@onflow/util-uid\"\r\n\r\nconst TICK = 500\r\nconst BUFFER_SIZE = 10\r\n\r\nconst SET_CALLBACK = \"SET_CALLBACK\"\r\nconst PROCESS = \"PROCESS\"\r\nconst MAYBE_PROCESS = \"MAYBE_PROCESS\"\r\nconst TIMEOUT = \"TIMEOUT\"\r\nconst ENQUEUE = \"ENQUEUE\"\r\nconst RESOLVE = \"RESOLVE\"\r\n\r\nconst HANDLERS = {\r\n  [INIT]: ctx => {\r\n    ctx.put(\"need\", new Set())\r\n    ctx.put(\"processing\", new Set())\r\n    ctx.put(\"hold\", {})\r\n    setInterval(() => ctx.sendSelf(TIMEOUT), TICK)\r\n  },\r\n\r\n  [SET_CALLBACK]: (ctx, letter, callback) => {\r\n    ctx.put(\"callback\", async (...args) => callback(...args))\r\n    ctx.sendSelf(MAYBE_PROCESS)\r\n  },\r\n\r\n  [ENQUEUE]: (ctx, letter, args) => {\r\n    const id = uid()\r\n    const hold = {id, args, reply: letter.reply}\r\n    ctx.update(\"need\", n => {\r\n      n.add(id)\r\n      return n\r\n    })\r\n    ctx.update(\"hold\", h => ({...h, [id]: hold}))\r\n    ctx.sendSelf(MAYBE_PROCESS)\r\n  },\r\n\r\n  [TIMEOUT]: ctx => {\r\n    if (ctx.get(\"need\").size) ctx.sendSelf(PROCESS)\r\n  },\r\n\r\n  [MAYBE_PROCESS]: ctx => {\r\n    if (ctx.get(\"need\") >= BUFFER_SIZE) ctx.sendSelf(PROCESS)\r\n  },\r\n\r\n  [PROCESS]: ctx => {\r\n    const callback = ctx.get(\"callback\")\r\n    if (typeof callback !== \"function\") return\r\n\r\n    const need = ctx.get(\"need\")\r\n    ctx.update(\"processing\", p => new Set([...p, ...need]))\r\n    ctx.put(\"need\", new Set())\r\n\r\n    const hold = ctx.get(\"hold\")\r\n    const payload = [...need].reduce(\r\n      (acc, key) => ({...acc, [key]: hold[key].args}),\r\n      {}\r\n    )\r\n\r\n    callback(payload).then(result => {\r\n      ctx.sendSelf(RESOLVE, result)\r\n    })\r\n  },\r\n  [RESOLVE]: (ctx, _, results) => {\r\n    const have = Object.keys(results)\r\n    for (let h of have) {\r\n      const hold = ctx.get(\"hold\")\r\n      hold[h].reply(results[h])\r\n      ctx.update(\"processing\", p => {\r\n        p.delete(h)\r\n        return p\r\n      })\r\n      ctx.update(\"hold\", hold => {\r\n        delete hold[h]\r\n        return hold\r\n      })\r\n    }\r\n  },\r\n}\r\n\r\nexport const batch = (name, callback) => {\r\n  spawn(HANDLERS, name)\r\n  send(name, SET_CALLBACK, callback)\r\n\r\n  return {\r\n    enqueue(...args) {\r\n      return send(name, ENQUEUE, args, {expectReply: true, timeout: 0})\r\n    },\r\n  }\r\n}\r\n","import * as fcl from \"@onflow/fcl\"\r\nimport * as t from \"@onflow/types\"\r\nimport {batch} from \"./util/batch\"\r\n\r\nconst CODE = fcl.cdc`\r\nimport NonFungibleToken from 0xNonFungibleToken\r\nimport HandyItems from 0xHandyItems\r\n\r\npub struct AccountItem {\r\n  pub let itemID: UInt64\r\n  pub let setID: UInt32\r\n  pub let serialID: UInt32\r\n  pub let owner: Address\r\n\r\n  init(itemID: UInt64, setID: UInt32, serialID: UInt32, owner: Address) {\r\n    self.itemID = itemID\r\n    self.setID = setID\r\n    self.serialID = serialID\r\n    self.owner = owner\r\n  }\r\n}\r\n\r\npub struct NftItem {\r\n  pub let series: HandyItems.QuerySeriesData\r\n  pub let edition: HandyItems.QueryEditionData\r\n  pub let set: HandyItems.QuerySetData\r\n  pub let item: AccountItem\r\n\r\n  init(series: HandyItems.QuerySeriesData, edition: HandyItems.QueryEditionData, \r\n    set: HandyItems.QuerySetData, item: AccountItem) {\r\n\r\n    self.series = series\r\n    self.edition = edition\r\n    self.set = set\r\n    self.item = item\r\n  }\r\n}\r\n\r\npub fun fetch(address: Address, id: UInt64): AccountItem? {\r\n  if let col = getAccount(address).getCapability<&HandyItems.Collection{NonFungibleToken.CollectionPublic, HandyItems.HandyItemsCollectionPublic}>(HandyItems.CollectionPublicPath).borrow() {\r\n    if let item = col.borrowHandyItem(id: id) {\r\n      return AccountItem(itemID: id, setID: item.setID, serialID: item.serialID, owner: address)\r\n    }\r\n  }\r\n\r\n  return nil\r\n}\r\n\r\npub fun main(keys: [String], addresses: [Address], ids: [UInt64]): {String: NftItem?} {\r\n  let r: {String: NftItem?} = {}\r\n  var i = 0\r\n\r\n  while i < keys.length {\r\n    let key = keys[i]\r\n    let address = addresses[i]\r\n    let id = ids[i]\r\n\r\n    let rkey = fetch(address: address, id: id)\r\n    let set = HandyItems.getSetData(setID: rkey!.setID)\r\n    let series = HandyItems.getSeriesData(series: set!.seriesID)\r\n    let edition = HandyItems.getEditionData(id: set!.editionID)\r\n\r\n    r[key] = NftItem(series: series!, edition: edition!, set: set!, item: rkey!);\r\n    i = i + 1\r\n  }\r\n  return r\r\n}\r\n`\r\n\r\nconst collate = px => {\r\n  return Object.keys(px).reduce(\r\n    (acc, key) => {\r\n      acc.keys.push(key)\r\n      acc.addresses.push(px[key][0])\r\n      acc.ids.push(px[key][1])\r\n      return acc\r\n    },\r\n    {keys: [], addresses: [], ids: []}\r\n  )\r\n}\r\n\r\nconst {enqueue} = batch(\"FETCH_ACCOUNT_ITEM\", async px => {\r\n  const {keys, addresses, ids} = collate(px)\r\n\r\n  return fcl\r\n    .send([\r\n      fcl.script(CODE),\r\n      fcl.args([\r\n        fcl.arg(keys, t.Array(t.String)),\r\n        fcl.arg(addresses, t.Array(t.Address)),\r\n        fcl.arg(ids.map(Number), t.Array(t.UInt64)),\r\n      ]),\r\n    ])\r\n    .then(fcl.decode)\r\n})\r\n\r\nexport async function fetchAccountItem(address, id) {\r\n  if (address == null || address === \"\") return Promise.resolve(null)\r\n  if (id == null) return Promise.resolve(null)\r\n  return enqueue(address, id)\r\n}\r\n","import * as fcl from \"@onflow/fcl\"\r\nimport * as t from \"@onflow/types\"\r\nimport {tx} from \"./util/tx\"\r\n\r\nconst CODE = fcl.cdc`\r\n  import FungibleToken from 0xFungibleToken\r\n  import NonFungibleToken from 0xNonFungibleToken\r\n  import FlowToken from 0xFlowToken \r\n  import HandyItems from 0xHandyItems\r\n  import NFTStorefront from 0xNFTStorefront\r\n\r\n  transaction(saleItemID: UInt64, saleItemPrice: UFix64) {\r\n\r\n    let flowReceiver: Capability<&FlowToken.Vault{FungibleToken.Receiver}>\r\n    let handyItemsCollection: Capability<&HandyItems.Collection{NonFungibleToken.Provider, NonFungibleToken.CollectionPublic}>\r\n    let storefront: &NFTStorefront.Storefront\r\n\r\n    prepare(account: AuthAccount) {\r\n      // We need a provider capability, but one is not provided by default so we create one if needed.\r\n      let handyItemsCollectionProviderPrivatePath = /private/handyItemsCollectionProvider\r\n\r\n      self.flowReceiver = account.getCapability<&FlowToken.Vault{FungibleToken.Receiver}>(/public/flowTokenReceiver)!\r\n\r\n      assert(self.flowReceiver.borrow() != nil, message: \"Missing or mis-typed FlowToken receiver\")\r\n\r\n      if !account.getCapability<&HandyItems.Collection{NonFungibleToken.Provider, NonFungibleToken.CollectionPublic}>(handyItemsCollectionProviderPrivatePath)!.check() {\r\n        account.link<&HandyItems.Collection{NonFungibleToken.Provider, NonFungibleToken.CollectionPublic}>(handyItemsCollectionProviderPrivatePath, target: HandyItems.CollectionStoragePath)\r\n      }\r\n\r\n      self.handyItemsCollection = account.getCapability<&HandyItems.Collection{NonFungibleToken.Provider, NonFungibleToken.CollectionPublic}>(handyItemsCollectionProviderPrivatePath)!\r\n      assert(self.handyItemsCollection.borrow() != nil, message: \"Missing or mis-typed HandyItemsCollection provider\")\r\n      \r\n      self.storefront = account.borrow<&NFTStorefront.Storefront>(from: NFTStorefront.StorefrontStoragePath)\r\n        ?? panic(\"Missing or mis-typed NFTStorefront Storefront\")\r\n    }\r\n\r\n    execute {\r\n      let saleCut = NFTStorefront.SaleCut(\r\n        receiver: self.flowReceiver,\r\n        amount: saleItemPrice\r\n      )\r\n\r\n      self.storefront.createSaleOffer(\r\n        nftProviderCapability: self.handyItemsCollection,\r\n        nftType: Type<@HandyItems.NFT>(),\r\n        nftID: saleItemID,\r\n        salePaymentVaultType: Type<@FlowToken.Vault>(),\r\n        saleCuts: [saleCut]\r\n      )\r\n    }\r\n  }\r\n\r\n`\r\n\r\nexport function createSaleOffer({itemID, price}, opts = {}) {\r\n  if (itemID == null)\r\n    throw new Error(\"createSaleOffer(itemID, price) -- itemID required\")\r\n  if (price == null)\r\n    throw new Error(\"createSaleOffer(itemID, price) -- price required\")\r\n\r\n  // prettier-ignore\r\n  return tx([\r\n    fcl.transaction(CODE),\r\n    fcl.args([\r\n      fcl.arg(Number(itemID), t.UInt64),\r\n      fcl.arg(String(price), t.UFix64),\r\n    ]),\r\n    fcl.proposer(fcl.authz),\r\n    fcl.payer(fcl.authz),\r\n    fcl.authorizations([\r\n      fcl.authz\r\n    ]),\r\n    fcl.limit(1000)\r\n  ], opts)\r\n}\r\n","import {sansPrefix} from \"@onflow/fcl\"\r\nimport {atomFamily, selectorFamily, useRecoilState} from \"recoil\"\r\nimport {useCurrentUser} from \"../hooks/use-current-user.hook\"\r\nimport {fetchAccountItem} from \"../flow/script.get-account-item\"\r\nimport {createSaleOffer} from \"../flow/tx.create-sale-offer\"\r\nimport {IDLE, PROCESSING} from \"../global/constants\"\r\nimport {useAccountItems} from \"../hooks/use-account-items.hook\"\r\n\r\nfunction expand(key) {\r\n  return key.split(\"|\")\r\n}\r\n\r\nfunction comp(address, id) {\r\n  return [address, id].join(\"|\")\r\n}\r\n\r\nexport const $state = atomFamily({\r\n  key: \"account-item::state\",\r\n  default: selectorFamily({\r\n    key: \"account-item::default\",\r\n    get: key => async () => fetchAccountItem(...expand(key)),\r\n  }),\r\n})\r\n\r\nexport const $status = atomFamily({\r\n  key: \"account-item::status\",\r\n  default: IDLE,\r\n})\r\n\r\nexport function useAccountItem(address, id) {\r\n  const [cu] = useCurrentUser()\r\n  const accountItems = useAccountItems(address)\r\n  const key = comp(address, id)\r\n  const [item, setItem] = useRecoilState($state(key))\r\n  const [status, setStatus] = useRecoilState($status(key))\r\n\r\n  return {\r\n    ...item,\r\n    status,\r\n    owned: sansPrefix(cu.addr) === sansPrefix(address),\r\n    async refresh() {\r\n      setStatus(PROCESSING)\r\n      await fetchAccountItem(...expand(key)).then(setItem)\r\n      setStatus(IDLE)\r\n    },\r\n    async sell(price) {\r\n      await createSaleOffer(\r\n        {itemID: id, price: price},\r\n        {\r\n          onStart() {\r\n            setStatus(PROCESSING)\r\n          },\r\n          async onSuccess() {\r\n            accountItems.refresh()\r\n          },\r\n          async onComplete() {\r\n            setStatus(IDLE)\r\n          },\r\n          async onError(error) {\r\n            \r\n          },\r\n        }\r\n      )\r\n    },\r\n  }\r\n}\r\n","import React, {useEffect, useState, Suspense} from \"react\"\r\nimport {useAccountItem} from \"../hooks/use-account-item.hook\"\r\nimport {useCurrentUser} from \"../hooks/use-current-user.hook\"\r\nimport {IDLE} from \"../global/constants\"\r\n\r\nexport function AccountItemCluster({address, id}) {\r\n  const item = useAccountItem(address, id)\r\n\r\n  const BUSY = item.status !== IDLE\r\n\r\n  if (address == null) return null\r\n  if (id == null) return null\r\n\r\n  return (\r\n    <div className=\"grid-list\">\r\n      <h3>Handy#{item.itemID}</h3>\r\n\r\n      <p>{item.name}</p>\r\n      <p>{item.tokenURI}</p>\r\n      <p>{item.color}</p>\r\n      <p>{item.info}</p>\r\n      <button \r\n        onClick={() => item.sell(\"5.0\")}\r\n      >\r\n        Sell\r\n      </button>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default function WrappedAccountItemCluster(props) {\r\n  return (\r\n    <Suspense fallback={null}>\r\n      <AccountItemCluster {...props} />\r\n    </Suspense>\r\n  )\r\n}\r\n","import {Suspense} from \"react\"\r\nimport {useAccountItems} from \"../hooks/use-account-items.hook\"\r\nimport {useCurrentUser} from \"../hooks/use-current-user.hook\"\r\nimport Item from \"./account-item\"\r\n\r\nexport function AccountItemsCluster({address}) {\r\n  const items = useAccountItems(address)\r\n  const [cu] = useCurrentUser()\r\n\r\n  if (address == null) return null\r\n\r\n  if (items.ids.length <= 0)\r\n    return (\r\n      <p>No Items</p>\r\n    )\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"grid-list\">\r\n        <h2>ID</h2>\r\n        <h2>Name</h2>\r\n        <h2>Image URL</h2>\r\n        <h2>Color</h2>\r\n        <h2>Info</h2>\r\n      </div>\r\n      {items.ids.map(id => (\r\n        <Item key={id} id={id} address={address} />\r\n      ))}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default function WrappedAccountItemsCluster({address}) {\r\n  return (\r\n    <Suspense fallback={null}>\r\n      <AccountItemsCluster address={address} />\r\n    </Suspense>\r\n  )\r\n}\r\n","\r\nimport {IDLE} from \"../global/constants\"\r\nimport {useCurrentUser} from \"../hooks/use-current-user.hook\"\r\nimport {useAccountItems} from \"../hooks/use-account-items.hook\"\r\nimport {Suspense, useState} from \"react\"\r\nimport {Redirect, useHistory} from \"react-router-dom\"\r\nimport AccountItemsCluster from '../comps/account-items'\r\n\r\nimport './list.css'\r\n\r\nexport function Page() {\r\n  const [state, setState] = useState({\r\n    txtAddress: \"\"\r\n  })\r\n  const [address, setAddress] = useState(\"\");\r\n  const [count, setCount] = useState(0);\r\n  const history = useHistory();\r\n  const [user] = useCurrentUser()\r\n\r\n  // if (user.addr == null) return <Redirect to={\"/\"} />\r\n\r\n  const handleChange = (e) => {\r\n    setState({\r\n      ...state,\r\n      [e.target.name]: e.target.value,\r\n    })\r\n  }\r\n\r\n  const handleList = (e) => {\r\n\r\n    if (state.txtAddress.length != 18) {\r\n      alert(\"Enter Address Corretly!\");\r\n      return;\r\n    }\r\n\r\n    setAddress(state.txtAddress);\r\n    setCount(1 - count);\r\n  }\r\n\r\n  const handleMint = (e) => {\r\n    e.preventDefault();\r\n    history.push(\"/publish\");\r\n  }\r\n\r\n  const handleMarket = (e) => {\r\n    e.preventDefault();\r\n    history.push(\"/market\");\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h1>NFT Listings</h1>\r\n\t    <div>\r\n        <label>Address: </label>\r\n        <input name=\"txtAddress\" id=\"txtAddress\" onChange={handleChange}/>&nbsp;\r\n        <button onClick={handleList}>List NFTs</button>\r\n        &nbsp;<button onClick={handleMint}>Mint an NFT</button>\r\n        &nbsp;<button onClick={handleMarket}>View Marketplace</button>\r\n        {\r\n          address != \"\" && <AccountItemsCluster address={address} />\r\n        }\r\n\t    </div>\r\n    </div>\r\n  )\r\n}\r\n","import {send, decode, script, args, arg, cdc} from \"@onflow/fcl\"\r\nimport {Address} from \"@onflow/types\"\r\n\r\nconst CODE = cdc`\r\nimport NFTStorefront from 0xNFTStorefront\r\n\r\npub fun main(account: Address): [UInt64] {\r\n    let storefrontRef = getAccount(account)\r\n        .getCapability<&NFTStorefront.Storefront{NFTStorefront.StorefrontPublic}>(\r\n            NFTStorefront.StorefrontPublicPath\r\n        )\r\n        .borrow()\r\n        ?? panic(\"Could not borrow public storefront from address\")\r\n    \r\n    return storefrontRef.getSaleOfferIDs()\r\n}\r\n`\r\n\r\nexport function getMarketItems(address) {\r\n  if (address == null || address == \"\")\r\n    return Promise.resolve([])\r\n\r\n  // prettier-ignore\r\n  return send([\r\n    script(CODE),\r\n    args([\r\n      arg(address, Address)\r\n    ])\r\n  ]).then(decode).then(d => d.sort((a, b) => a - b))\r\n}","import { useEffect } from \"react\";\r\nimport { atom, useRecoilState } from \"recoil\"\r\nimport { getMarketItems } from \"../flow/sc.get-market-items\";\r\nimport {IDLE, PROCESSING} from \"../global/constants\"\r\n\r\nexport const $marketItemsState = atom({\r\n  key: \"market-items::state\",\r\n  default: [],\r\n})\r\n\r\nexport const $marketItemsStatus = atom({\r\n  key: \"market-items::status\",\r\n  default: IDLE,\r\n})\r\n\r\nexport function useMarketItems(address) {\r\n  const [items, setItems] = useRecoilState($marketItemsState);\r\n  const [status, setStatus] = useRecoilState($marketItemsStatus);\r\n\r\n  useEffect(() => {\r\n    getMarketItems(address).then(setItems);\r\n  }, [address]);\r\n\r\n  return {\r\n    items,\r\n    status,\r\n    refresh() {\r\n      getMarketItems(address).then(setItems);\r\n    }\r\n  }\r\n}","import { send, script, args, arg, decode } from \"@onflow/fcl\"\r\nimport { Address, UInt64 } from \"@onflow/types\"\r\n\r\nexport async function getMarketItem(address, id) {\r\n  return send([\r\n      script`\r\n        import HandyItems from 0xHandyItems\r\n        import NonFungibleToken from 0xNonFungibleToken\r\n        import NFTStorefront from 0xNFTStorefront\r\n\r\n        pub struct SaleItem {\r\n          pub let itemID: UInt64\r\n          pub let name: String\r\n          pub let tokenURI: String\r\n          pub let color: String\r\n          pub let info: String\r\n          pub let owner: Address\r\n          pub let price: UFix64\r\n\r\n          init(itemID: UInt64, name: String, tokenURI: String, color: String,info: String, owner: Address, price: UFix64) {\r\n            self.itemID = itemID\r\n            self.name = name\r\n            self.tokenURI = tokenURI\r\n            self.color = color\r\n            self.info = info\r\n            self.owner = owner\r\n            self.price = price\r\n          }\r\n        }\r\n\r\n        pub fun main(address: Address, saleOfferResourceID: UInt64): SaleItem? {\r\n          let account = getAccount(address)\r\n\r\n          if let storefrontRef = account.getCapability<&NFTStorefront.Storefront{NFTStorefront.StorefrontPublic}>(NFTStorefront.StorefrontPublicPath).borrow() {\r\n            if let saleOffer = storefrontRef.borrowSaleOffer(saleOfferResourceID: saleOfferResourceID) {\r\n              let details = saleOffer.getDetails()\r\n\r\n              let itemID = details.nftID\r\n              let itemPrice = details.salePrice\r\n\r\n              if let collection = account.getCapability<&HandyItems.Collection{NonFungibleToken.CollectionPublic, HandyItems.HandyItemsCollectionPublic}>(HandyItems.CollectionPublicPath).borrow() {\r\n                if let item = collection.borrowHandyItem(id: itemID) {\r\n                  return SaleItem(itemID: itemID, name: item.name, tokenURI: item.tokenURI, \r\n                    color: item.color, info: item.info, owner: address, price: itemPrice)\r\n                }\r\n              }\r\n            }\r\n          }\r\n            \r\n          return nil\r\n        }\r\n    `,\r\n      args([arg(address, Address), arg(Number(id), UInt64)]),\r\n    ])\r\n    .then(decode)\r\n}\r\n","import * as fcl from \"@onflow/fcl\"\r\nimport * as t from \"@onflow/types\"\r\nimport {tx} from \"./util/tx\"\r\nimport {invariant} from \"@onflow/util-invariant\"\r\n\r\nconst CODE = fcl.cdc`\r\n  import FungibleToken from 0xFungibleToken\r\n  import NonFungibleToken from 0xNonFungibleToken\r\n  import FlowToken from 0xFlowToken\r\n  import HandyItems from 0xHandyItems\r\n  import NFTStorefront from 0xNFTStorefront\r\n\r\n  transaction(saleOfferResourceID: UInt64, storefrontAddress: Address) {\r\n\r\n    let paymentVault: @FungibleToken.Vault\r\n    let handyItemsCollection: &HandyItems.Collection{NonFungibleToken.Receiver}\r\n    let storefront: &NFTStorefront.Storefront{NFTStorefront.StorefrontPublic}\r\n    let saleOffer: &NFTStorefront.SaleOffer{NFTStorefront.SaleOfferPublic}\r\n\r\n    prepare(account: AuthAccount) {\r\n      self.storefront = getAccount(storefrontAddress)\r\n        .getCapability<&NFTStorefront.Storefront{NFTStorefront.StorefrontPublic}>(\r\n          NFTStorefront.StorefrontPublicPath\r\n        )!\r\n        .borrow()\r\n        ?? panic(\"Could not borrow Storefront from provided address\")\r\n\r\n      self.saleOffer = self.storefront.borrowSaleOffer(saleOfferResourceID: saleOfferResourceID)\r\n        ?? panic(\"No Offer with that ID in Storefront\")\r\n      \r\n      let price = self.saleOffer.getDetails().salePrice\r\n\r\n      let mainFlowVault = account.borrow<&FlowToken.Vault>(from: /storage/flowTokenVault)\r\n        ?? panic(\"Cannot borrow Kibble vault from account storage\")\r\n      \r\n      self.paymentVault <- mainFlowVault.withdraw(amount: price)\r\n\r\n      self.handyItemsCollection = account.borrow<&HandyItems.Collection{NonFungibleToken.Receiver}>(\r\n        from: HandyItems.CollectionStoragePath\r\n      ) ?? panic(\"Cannot borrow HandyItems collection receiver from account\")\r\n    }\r\n  \r\n    execute {\r\n      let item <- self.saleOffer.accept(\r\n        payment: <-self.paymentVault\r\n      )\r\n\r\n      self.handyItemsCollection.deposit(token: <-item)\r\n\r\n      self.storefront.cleanup(saleOfferResourceID: saleOfferResourceID)\r\n    }\r\n  }\r\n`\r\n\r\n// prettier-ignore\r\nexport function buyMarketItem({itemID, ownerAddress}, opts = {}) {\r\n  invariant(itemID != null, \"buyMarketItem({itemID, ownerAddress}) -- itemID required\")\r\n  invariant(ownerAddress != null, \"buyMarketItem({itemID, ownerAddress}) -- ownerAddress required\")\r\n\r\n  return tx([\r\n    fcl.transaction(CODE),\r\n    fcl.args([\r\n      fcl.arg(Number(itemID), t.UInt64),\r\n      fcl.arg(String(ownerAddress), t.Address),\r\n    ]),\r\n    fcl.proposer(fcl.authz),\r\n    fcl.payer(fcl.authz),\r\n    fcl.authorizations([fcl.authz]),\r\n    fcl.limit(1000),\r\n  ], opts)\r\n}\r\n","import { useEffect, useState } from \"react\";\r\nimport { getMarketItem } from \"../flow/sc.get-market-item\";\r\nimport { buyMarketItem } from \"../flow/tx.buy-market-item\"\r\n\r\nexport function useMarketItem(address, id) {\r\n  const [item, setItem] = useState({});\r\n\r\n  console.log(item.price);\r\n\r\n  useEffect(() => {\r\n      getMarketItem(address, id).then(setItem);\r\n  }, [address, id]);\r\n\r\n  return {\r\n    ...item,\r\n    async buy() {\r\n      await buyMarketItem(\r\n        {itemID: id, ownerAddress: address},\r\n        {\r\n          onStart() {\r\n          },\r\n          async onSuccess() {\r\n          },\r\n          async onComplete() {\r\n          },\r\n          async onError(error) {\r\n          },\r\n        }\r\n      )\r\n    },\r\n  }\r\n}","import {Suspense} from \"react\"\r\nimport {useMarketItem} from \"../hooks/use-market-item.hook\"\r\nimport {useCurrentUser} from \"../hooks/use-current-user.hook\"\r\nimport {IDLE} from \"../global/constants\"\r\n\r\nexport function MarketItemCluster({address, id}) {\r\n  const [cu, loggedIn] = useCurrentUser()\r\n  const item = useMarketItem(address, id)\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"grid-list\">\r\n        <h3>Handy#{item.itemID}</h3>\r\n\r\n        <p>{item.name}</p>\r\n        <p>{item.tokenURI}</p>\r\n        <p>{item.color}</p>\r\n        <p>{item.info}</p>\r\n        <button \r\n          onClick={() => item.buy()}\r\n        >\r\n          Buy\r\n        </button>\r\n     </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default function WrappedMarketItemCluster(props) {\r\n  return (\r\n    <Suspense fallback={null}>\r\n      <MarketItemCluster {...props} />\r\n    </Suspense>\r\n  )\r\n}\r\n","import {Suspense} from \"react\"\r\nimport {useMarketItems} from \"../hooks/use-market-items.hook\"\r\nimport Item from './market-item'\r\n\r\nexport function MarketItemsCluster() {\r\n  const {items} = useMarketItems(\"0x048ac6df55e9c6e6\");\r\n\r\n  if (items.length == 0)\r\n    return (\r\n      <p>No items listed for sale</p>\r\n    )\r\n\r\n  return (\r\n    <div>\r\n      <h1>NFT Marketplace</h1>\r\n      <div className=\"grid-list\">\r\n        <h2>ID</h2>\r\n        <h2>Name</h2>\r\n        <h2>Image URL</h2>\r\n        <h2>Color</h2>\r\n        <h2>Info</h2>\r\n      </div>\r\n      {items.map(item => \r\n          <Item\r\n            key={item}\r\n            id={item}\r\n            address={\"0x048ac6df55e9c6e6\"}\r\n          />\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default function WrappedMarketItemsCluster() {\r\n  return (\r\n    <Suspense fallback={null}>\r\n      <MarketItemsCluster />\r\n    </Suspense>\r\n  )\r\n}","\r\nimport {useCurrentUser} from \"../hooks/use-current-user.hook\"\r\nimport {Suspense, useState} from \"react\"\r\nimport {Redirect, useHistory} from \"react-router-dom\"\r\nimport MarketItems from \"../comps/market-items\"\r\n\r\nexport function Page() {\r\n  const history = useHistory();\r\n  const [user] = useCurrentUser()\r\n\r\n  // if (user.addr == null) return <Redirect to={\"/\"} />\r\n\r\n  return (\r\n    <div>\r\n      <h1>\r\n        {user.addr}\r\n      </h1>\r\n      <MarketItems />\r\n    </div>\r\n  )\r\n}\r\n","import React from \"react\"\r\n\r\nexport function SideBar() {\r\n\r\n  return (\r\n    <div className=\"f3-left\">\r\n      <h2>Mint Panel</h2>\r\n      <ul>\r\n        <li>\r\n          <a href=\"/mintpanel/collections\">Series</a>\r\n        </li>\r\n        <li>\r\n          <a href=\"/mintpanel/mintnft\">Mint NFTs</a>\r\n        </li>\r\n        <li>\r\n          <a href=\"/mintpanel/assets\">Assets</a>\r\n        </li>\r\n        <li>\r\n          <a href=\"/mintpanel/settings\">Settings</a>\r\n        </li>\r\n      </ul>\r\n    </div>\r\n  )\r\n}","\r\nimport {useEffect, useRef} from \"react\"\r\nimport {IDLE} from \"../../global/constants\"\r\nimport {useCurrentUser} from \"../../hooks/use-current-user.hook\"\r\nimport {useAccountItems} from \"../../hooks/use-account-items.hook\"\r\nimport {Suspense, useState} from \"react\"\r\nimport {Redirect, useHistory} from \"react-router-dom\"\r\nimport AccountItemsCluster from '../../comps/account-items'\r\n\r\nimport { SideBar } from \"./sidebar\"\r\nimport axios from \"axios\";\r\nimport fs from \"fs\";\r\n\r\nimport Loader from \"react-loader-spinner\";\r\nimport { toast } from \"react-toast\"\r\n\r\nimport \"./index.css\"\r\n\r\nconst PINATA_API_KEY = \"8b0d90ef4bf74827eb88\";\r\nconst PINATA_SECRET_API_KEY = \"609ec3e0c1641f4b41c0c6370eed55e108cea9f9396b9e5a1d123061de07b99b\";\r\n\r\nexport const pinJSONToIPFS = (pinataApiKey, pinataSecretApiKey, JSONBody) => {\r\n    const url = `https://api.pinata.cloud/pinning/pinJSONToIPFS`;\r\n    return axios\r\n        .post(url, JSONBody, {\r\n            headers: {\r\n                pinata_api_key: pinataApiKey,\r\n                pinata_secret_api_key: pinataSecretApiKey\r\n            }\r\n        })\r\n        .then(function (response) {\r\n            \r\n        })\r\n        .catch(function (error) {\r\n            \r\n        });\r\n};\r\n\r\nexport function Assets() {\r\n  const [state, setState] = useState({\r\n    inFile: \"\",\r\n    inName: \"\"\r\n  })\r\n  const [asList, setList] = useState([]);\r\n  const [isDirty, setDirty] = useState(true);\r\n  const [listingStatus, setListingStatus] = useState(0);  // 0: Loading, 1: Success, 2: Error.\r\n  const [uploadStatus, setUploadStatus] = useState(0);  // 0: Success, 1: Uploading to IPFS, 2: Uploading to DB\r\n                                                        // 3: IPFS Failed, 4: DB Failed\r\n  const inputFile = useRef(null);\r\n\r\n  useEffect(async () => {\r\n    if (!isDirty) return;\r\n\r\n    try {\r\n      const assetList = await axios.get(process.env.REACT_APP_API_URL + \"/v1/assets/list\");\r\n      if (assetList.data.success != \"true\") {\r\n        setListingStatus(2);\r\n        return;\r\n      }\r\n\r\n      setDirty(false);\r\n      setListingStatus(1);\r\n      setList(assetList.data.result);\r\n    } catch(e) {\r\n      setListingStatus(2);\r\n    }\r\n  }, [isDirty])\r\n\r\n  const handleUpload = async (e) => {\r\n    e.preventDefault();\r\n\r\n    console.log(inputFile);\r\n\r\n    if (state.inFile.length == 0) return;\r\n\r\n    try {\r\n      await pinFileToIPFS(\r\n        PINATA_API_KEY, \r\n        PINATA_SECRET_API_KEY, {\r\n          name: state.inName,\r\n          path: state.inFile,\r\n          obj: inputFile.current\r\n        });\r\n      \r\n      setDirty(true);\r\n    } catch (e) {\r\n\r\n    }\r\n  }\r\n\r\n  const handleChange = (e) => {\r\n    setState({\r\n      ...state, \r\n      [e.target.name]: e.target.value\r\n    })\r\n  }\r\n\r\n  const pinFileToIPFS = async (pinataApiKey, pinataSecretApiKey, imgData) => {\r\n    const url = `https://api.pinata.cloud/pinning/pinFileToIPFS`;\r\n    \r\n    console.log(imgData);\r\n  \r\n    let data = new FormData();\r\n    data.append('file', imgData.obj.files[0]);\r\n    \r\n    const metadata = JSON.stringify({\r\n        name: imgData.name,\r\n        keyvalues: {\r\n          name: imgData.name\r\n        }\r\n    });\r\n    data.append('pinataMetadata', metadata);\r\n    \r\n    const pinataOptions = JSON.stringify({\r\n        cidVersion: 0,\r\n        customPinPolicy: {\r\n            regions: [\r\n                {\r\n                    id: 'FRA1',\r\n                    desiredReplicationCount: 1\r\n                },\r\n                {\r\n                    id: 'NYC1',\r\n                    desiredReplicationCount: 2\r\n                }\r\n            ]\r\n        }\r\n    });\r\n    data.append('pinataOptions', pinataOptions);\r\n  \r\n    setUploadStatus(1);\r\n\r\n    return axios\r\n        .post(url, data, {\r\n            maxBodyLength: 'Infinity',\r\n            headers: {\r\n                'Content-Type': `multipart/form-data; boundary=${data._boundary}`,\r\n                pinata_api_key: pinataApiKey,\r\n                pinata_secret_api_key: pinataSecretApiKey\r\n            }\r\n        })\r\n        .then(function (response) {\r\n            setUploadStatus(2);\r\n            return axios\r\n            .post(process.env.REACT_APP_API_URL + \"/v1/assets/upload\", {\r\n              name: imgData.name,\r\n              path: \"https://cloudflare-ipfs.com/ipfs/\" + response.data.IpfsHash\r\n            })\r\n            .then(function (response) {\r\n              setUploadStatus(0);\r\n              toast.success(\"Upload Succeed.\");\r\n            })\r\n            .catch(function (error) {\r\n              setUploadStatus(4);\r\n              toast.error(\"Unexpected error occured while uploading.\");\r\n            })\r\n        })\r\n        .catch(function (error) {\r\n            setUploadStatus(3);\r\n            toast.error(\"Unexpected error occured while uploading.\");\r\n        });\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div style={{paddingLeft: \"20px\"}}>\r\n        <div>\r\n          <h3>::Assets</h3>\r\n        </div>\r\n        <div className=\"f3-panel-layout f3-asset\">\r\n          <div>\r\n            <label>Name</label>\r\n          </div>\r\n          <div>\r\n            <input id=\"inName\" name=\"inName\" value={state.inName} onChange={handleChange} />\r\n          </div>\r\n          <div></div>\r\n          <div>\r\n            <label>Browse for file: &nbsp;</label>\r\n          </div>\r\n          <div>\r\n            <input type=\"file\" id=\"inFile\" name=\"inFile\" value={state.inFile} onChange={handleChange} ref={inputFile}/>\r\n          </div>\r\n          <div>\r\n            <button id=\"\" onClick={handleUpload} disabled={uploadStatus == 1 || uploadStatus == 2}>\r\n              {\r\n                (uploadStatus == 1 || uploadStatus == 2) &&\r\n                <Loader type=\"Puff\" color=\"#00BFFF\" height={20} width={20} className=\"f3-inline\" />\r\n              }\r\n              UPLOAD\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className=\"hline\" />\r\n      <div style={{paddingLeft: \"20px\"}}>\r\n        <div>\r\n          <h3>Current Assets</h3>\r\n          { listingStatus == 0 && <Loader type=\"Oval\" color=\"#1f1f1f\" height={80} width={80} className=\"f3-center\" /> }\r\n          {\r\n            listingStatus == 1 &&\r\n              asList.map(item => (\r\n                <div className=\"f3-current-asset\">\r\n                  <div>\r\n                    <img src={item.img_url} />\r\n                  </div>\r\n                  <div>\r\n                    <div>\r\n                      <span>{item.name}</span>\r\n                    </div>\r\n                    <div>\r\n                      <a href={item.img_url} target=\"_blank\">{item.img_url}</a>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              ))\r\n          }\r\n          {\r\n            listingStatus == 2 && (\r\n              <p className=\"f3-center\">Unexpected error occured!</p>\r\n            )\r\n          }\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n\r\n}\r\n\r\nexport function Page() {\r\n  return (\r\n    <div>\r\n      <SideBar />\r\n      <div className=\"f3-main\">\r\n        <Assets />\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n","import {send, decode, script, args, arg, cdc} from \"@onflow/fcl\"\r\nimport {Address, UInt32} from \"@onflow/types\"\r\n\r\nconst CODE = cdc`\r\nimport NFTStorefront from 0xNFTStorefront\r\nimport HandyItems from 0xHandyItems\r\n\r\npub fun main(series: UInt32): {UInt32: HandyItems.QueryEditionData} {\r\n  return HandyItems.getEditions(series: series)\r\n}\r\n`\r\n\r\nexport function getEditionList(series) {\r\n  // prettier-ignore\r\n  return send([\r\n    script(CODE),\r\n    args([arg(Number(series), UInt32)])\r\n  ]).then(decode)\r\n}","import { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nimport { getEditionList } from \"../flow/sc.get-edition-list\";\r\n\r\nexport function useEditionList(series, bReload) {\r\n  const [items, setItems] = useState({});\r\n\r\n  useEffect(async () => {\r\n    if (series === \"\") {\r\n      console.log(\"Empty\");\r\n      setItems({});\r\n      return;\r\n    }\r\n\r\n    const editions = await getEditionList(series);\r\n\r\n    console.log(editions);\r\n\r\n    for (const prop in editions)\r\n      console.log(editions[prop]);\r\n\r\n    setItems(editions);\r\n  }, [series]);\r\n\r\n  return {\r\n    editions: items\r\n  }\r\n}","import {send, decode, script, args, arg, cdc} from \"@onflow/fcl\"\r\nimport {Address} from \"@onflow/types\"\r\n\r\nconst CODE = cdc`\r\nimport NFTStorefront from 0xNFTStorefront\r\nimport HandyItems from 0xHandyItems\r\n\r\npub fun main(): {UInt32: HandyItems.QuerySeriesData} {\r\n  return HandyItems.getSeries()\r\n}\r\n`\r\n\r\nexport function getSeriesList() {\r\n  // prettier-ignore\r\n  return send([\r\n    script(CODE),\r\n    args()\r\n  ]).then(decode)\r\n}","import { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nimport { getSeriesList } from \"../flow/sc.get-series-list\";\r\n\r\nexport function useSeriesList(isDirty) {\r\n  const [items, setItems] = useState({});\r\n\r\n  console.log(\"2. Use Series List\");\r\n  console.log(isDirty);\r\n\r\n  useEffect(async () => {\r\n    if (isDirty != true)\r\n      return;\r\n\r\n    const series = await getSeriesList();\r\n\r\n    console.log(series);\r\n\r\n    for (const prop in series)\r\n      console.log(series[prop]);\r\n\r\n    setItems(series);\r\n  });\r\n\r\n  return {\r\n    series: items\r\n  }\r\n}","import {send, decode, script, args, arg, cdc} from \"@onflow/fcl\"\r\nimport {Address, UInt32} from \"@onflow/types\"\r\n\r\nconst CODE = cdc`\r\nimport NFTStorefront from 0xNFTStorefront\r\nimport HandyItems from 0xHandyItems\r\n\r\npub struct NftItem {\r\n  pub let series: HandyItems.QuerySeriesData\r\n  pub let edition: HandyItems.QueryEditionData\r\n  pub let set: HandyItems.QuerySetData\r\n\r\n  init(series: HandyItems.QuerySeriesData, edition: HandyItems.QueryEditionData, \r\n    set: HandyItems.QuerySetData) {\r\n\r\n    self.series = series\r\n    self.edition = edition\r\n    self.set = set\r\n  }\r\n}\r\n\r\npub fun main(): {UInt32: NftItem?} {\r\n  let sets = HandyItems.getAllSets()\r\n  let r: {UInt32: NftItem?} = {}\r\n\r\n  for key in sets.keys {\r\n    let set = sets[key]!\r\n\r\n    let series = HandyItems.getSeriesData(series: set!.seriesID)\r\n    let edition = HandyItems.getEditionData(id: set!.editionID)\r\n\r\n    r[key] = NftItem(series: series!, edition: edition!, set: set!);\r\n  }\r\n  return r\r\n}\r\n`\r\n\r\nexport function getSetAllList() {\r\n  // prettier-ignore\r\n  return send([\r\n    script(CODE),\r\n    args()\r\n  ]).then(decode)\r\n}","import {send, decode, script, args, arg, cdc} from \"@onflow/fcl\"\r\nimport {Address, UInt32} from \"@onflow/types\"\r\n\r\nconst CODE = cdc`\r\nimport NFTStorefront from 0xNFTStorefront\r\nimport HandyItems from 0xHandyItems\r\n\r\npub fun main(id: UInt32): HandyItems.QuerySetData? {\r\n  return HandyItems.getSetData(setID: id)\r\n}\r\n`\r\n\r\nexport function getSetItem(series) {\r\n  // prettier-ignore\r\n  return send([\r\n    script(CODE),\r\n    args([arg(Number(series), UInt32)])\r\n  ]).then(decode)\r\n}","import { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nimport { getSetItem } from \"../flow/sc.get-set-item\";\r\n\r\nexport function useSetItem(id) {\r\n  const [item, setItem] = useState({});\r\n\r\n  async function reload() {\r\n    const set = await getSetItem(id)\r\n\r\n    setItem(set);\r\n  }\r\n\r\n  useEffect(async () => {\r\n    const set = await getSetItem(id)\r\n\r\n    console.log(set);\r\n\r\n    for (const prop in set)\r\n      console.log(set[prop]);\r\n\r\n    setItem(set);\r\n  }, []);\r\n\r\n  return {\r\n    item: item,\r\n    reload: reload\r\n  }\r\n}","\r\nimport {useEffect, useRef} from \"react\"\r\nimport {IDLE} from \"../../global/constants\"\r\nimport {useCurrentUser} from \"../../hooks/use-current-user.hook\"\r\nimport {useAccountItems} from \"../../hooks/use-account-items.hook\"\r\nimport { useIpfsItems } from \"../../hooks/use-ipfs-items.hook\"\r\nimport { useEditionList } from \"../../hooks/use-edition-list.hook\"\r\nimport { useSeriesList } from \"../../hooks/use-series-list.hook\"\r\nimport { useSetAllList } from \"../../hooks/use-set-all.hook\"\r\nimport { useSetItem } from \"../../hooks/use-set-item.hook\"\r\nimport {Suspense, useState} from \"react\"\r\nimport {Redirect, useHistory} from \"react-router-dom\"\r\nimport AccountItemsCluster from '../../comps/account-items'\r\n\r\nimport { SideBar } from \"./sidebar\"\r\nimport axios from \"axios\";\r\n\r\nexport function Item({meta}) {\r\n  const item = useSetItem(meta[\"id\"]);\r\n\r\n  console.log(meta[\"id\"]);\r\n  console.log(item);\r\n\r\n  return (\r\n    <div className=\"f3-store-series-item\">\r\n      <img src={meta.image} /> <br />\r\n      <a href={\"/editions/\" + meta.id}>{meta.name} Edition</a>\r\n    </div>\r\n  )\r\n\r\n}\r\n\r\nexport function WrappedItem(props) {\r\n  return (\r\n    <Suspense fallback={null}>\r\n      <Item {...props} />\r\n    </Suspense>\r\n  )\r\n}\r\n\r\nexport function MintNFT() {\r\n  const [state, setState] = useState({\r\n    inName: \"\",\r\n    inAsset: \"\",\r\n    inQuantity: \"0\",  \r\n    inSerial: \"yes\",\r\n    inSeries: \"\",\r\n    inPrice: \"\",\r\n    inEdition: \"-1\"\r\n  })\r\n  const items = useIpfsItems();\r\n  const { series } = useSeriesList();\r\n  const { editions } = useEditionList(state.inSeries);\r\n  const { sets } = useSetAllList();\r\n\r\n  const handleChange = (e) => {\r\n    setState({\r\n      ...state, \r\n      [e.target.name]: e.target.value\r\n    })\r\n  }\r\n\r\n  const handleMint = (e) => {\r\n    e.preventDefault();\r\n/*\r\n    mintItem({\r\n      name: state.inName,\r\n      tokenURI: items.assets[state.inAsset].img_url,\r\n      quantity: state.inQuantity,\r\n      isSerial: state.inSerial,\r\n      collection: state.inSeries,\r\n      price: state.inPrice,\r\n      series: state.inEdition\r\n    })\r\n*/\r\n    createSet({\r\n      name: state.inName,\r\n      desc: state.inDescription,\r\n      thumb: items.assets[state.inThumb].img_url,\r\n      quantity: state.inQuantity,\r\n      isSerial: state.inSerial,\r\n      series: state.inSeries,\r\n      price: state.inPrice,\r\n      edition: state.inEdition\r\n    })\r\n  }\r\n\r\n  const mintItem = async (params) => {\r\n    console.log(params);\r\n\r\n    await fetch(process.env.REACT_APP_API_ITEM_MINT, {\r\n    // await fetch(\"http://localhost:3003/v1/handy-items/mint\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify(params),\r\n    })\r\n  }\r\n\r\n  const createSet = async (params) => {\r\n      await fetch(process.env.REACT_APP_API_URL + \"/v1/handy-items/create-set\", {\r\n      //await fetch(\"http://localhost:3003/v1/handy-items/create-set\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify(params),\r\n    })\r\n  }\r\n\r\n  const editionList = () => {\r\n    var res = [];\r\n    \r\n    for (const prop in editions) {\r\n      res.push(<option key={prop} value={prop}>{editions[prop].name}</option>)\r\n    }\r\n\r\n    return res;\r\n  }\r\n\r\n  const seriesList = () => {\r\n    var res = [];\r\n    \r\n    for (const prop in series) {\r\n      res.push(<option key={prop} value={prop}>{series[prop].name}</option>)\r\n    }\r\n\r\n    return res;\r\n  }\r\n\r\n  const setList = () => {\r\n    var res = [];\r\n    \r\n    for (const prop in sets) {\r\n      res.push(<WrappedItem key={prop} meta={sets[prop]} />)\r\n    }\r\n\r\n    return res;\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <div style={{paddingLeft: \"20px\"}}>\r\n        <div>\r\n          <h3>::Mint NFTs</h3>\r\n        </div>\r\n        <div className=\"f3-panel-layout f3-mintnft-head\">\r\n          {/* First Row: Name and Asset(IPFS) */}\r\n          <div className=\"f3-mintnft-row\">\r\n            <div className=\"f3-mintnft-item\">\r\n              <div>\r\n                <label>Name: </label>\r\n              </div>\r\n              <div>\r\n                <input id=\"inName\" name=\"inName\" value={state.inName} onChange={handleChange} />\r\n              </div>\r\n            </div>\r\n            <div className=\"f3-mintnft-item\">\r\n              <div>\r\n                <label>NFT Thumbnail: </label>\r\n              </div>\r\n              <div>\r\n                <select id=\"inThumb\" name=\"inThumb\" onChange={handleChange} value={state.inThumb} >\r\n                  <option value=\"\"></option>\r\n                  {\r\n                    items.assets.map((item, index) => (\r\n                      <option key={index} value={index}>{item.name}</option>\r\n                    ))\r\n                  }\r\n                </select>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          {/* First Row: Name and Asset(IPFS) */}\r\n          <div className=\"f3-mintnft-row\">\r\n            <div className=\"f3-mintnft-item\">\r\n              <div>\r\n                <label>Description: </label>\r\n              </div>\r\n              <div>\r\n                <textarea id=\"inDescription\" name=\"inDescription\" value={state.inDescription} onChange={handleChange}>\r\n                  &nbsp;\r\n                </textarea>\r\n              </div>\r\n            </div>\r\n            <div className=\"f3-mintnft-item\">\r\n              <div>\r\n                <label>NFT Asset: </label>\r\n              </div>\r\n              <div>\r\n                <select id=\"inAsset\" name=\"inAsset\" onChange={handleChange} value={state.inAsset} >\r\n                  <option value=\"\"></option>\r\n                  {\r\n                    items.assets.map((item, index) => (\r\n                      <option key={index} value={index}>{item.name}</option>\r\n                    ))\r\n                  }\r\n                </select>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          {/* Second Row: Quantity and Serial#'s */}\r\n          <div className=\"f3-mintnft-row\">\r\n            <div className=\"f3-mintnft-item\">\r\n              <div>\r\n                <label>Quantity: </label>\r\n              </div>\r\n              <div>\r\n                <input id=\"inQuantity\" name=\"inQuantity\" value={state.inQuantity} \r\n                       onChange={handleChange} size=\"4\" className=\"f3-center\" />\r\n              </div>\r\n            </div>\r\n            <div className=\"f3-mintnft-item\">\r\n              <div>\r\n                <label>Serial #'s: </label>\r\n              </div>\r\n              <div>\r\n                <select id=\"inSerial\" name=\"inSerial\" value={state.inSerial} onChange={handleChange}>\r\n                  <option value=\"yes\">Yes</option>\r\n                  <option value=\"no\">No</option>\r\n                </select>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          {/* Third Row: Series and Price */}\r\n          <div className=\"f3-mintnft-row\">\r\n            <div className=\"f3-mintnft-item\">\r\n              <div>\r\n                <label>Series: </label>\r\n              </div>\r\n              <div>\r\n                <select id=\"inSeries\" name=\"inSeries\" value={state.inSeries} onChange={handleChange}>\r\n                  <option value=\"\"></option>\r\n                  { seriesList() }\r\n                </select>\r\n              </div>\r\n            </div>\r\n            <div className=\"f3-mintnft-item\">\r\n              <div>\r\n                <label>Price(USD): </label>\r\n              </div>\r\n              <div>\r\n                <input id=\"inPrice\" name=\"inPrice\" value={state.inPrice} onChange={handleChange} size=\"8\" /><span>&nbsp;$</span>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          {/* Fourth Row: Edition and Mint Button */}\r\n          <div className=\"f3-mintnft-row\">\r\n            <div className=\"f3-mintnft-item\">\r\n              <div>\r\n                <label>Edition: </label>\r\n              </div>\r\n              <div>\r\n                <select id=\"inEdition\" name=\"inEdition\" value={state.inEdition} onChange={handleChange}>\r\n                  <option value=\"-1\"></option>\r\n                  { editionList() }\r\n                </select>\r\n              </div>\r\n            </div>\r\n            <div className=\"f3-mintnft-item\">\r\n              <div>\r\n                <button onClick={handleMint}>MINT NFT</button>\r\n              </div>\r\n              <div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n        </div>\r\n      </div>\r\n      <div className=\"hline\" />\r\n        <div style={{paddingLeft: \"20px\"}}>\r\n          <div>\r\n            <h3>Current NFTs</h3>\r\n            { setList() }\r\n          </div>\r\n        </div>\r\n    </div>\r\n  )\r\n\r\n}\r\n\r\nexport function Page() {\r\n  return (\r\n    <div>\r\n      <SideBar />\r\n      <div className=\"f3-main\">\r\n        <MintNFT />\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n","import { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nexport function useIpfsItems() {\r\n  const [items, setItems] = useState([]);\r\n\r\n  useEffect(async () => {\r\n    const assetList = await axios.get(process.env.REACT_APP_API_URL + \"/v1/assets/list\");\r\n    if (assetList.data.success != \"true\") return;\r\n\r\n    setItems(assetList.data.result);\r\n  }, []);\r\n\r\n  return {\r\n    assets: items\r\n  }\r\n}","import { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nimport { getSetAllList } from \"../flow/sc.get-set-all\";\r\n\r\nexport function useSetAllList() {\r\n  const [items, setItems] = useState({});\r\n  // const [items, setItems] = useState({});\r\n\r\n  useEffect(async () => {\r\n    return;\r\n    const sets = await getSetAllList()\r\n\r\n    console.log(sets);\r\n\r\n    for (const prop in sets)\r\n      console.log(sets[prop]);\r\n\r\n    setItems(sets);\r\n  }, []);\r\n\r\n  return {\r\n    sets: items\r\n  }\r\n}","\r\nimport {useEffect, useRef} from \"react\"\r\nimport {IDLE} from \"../../global/constants\"\r\nimport {useCurrentUser} from \"../../hooks/use-current-user.hook\"\r\nimport {useAccountItems} from \"../../hooks/use-account-items.hook\"\r\nimport {Suspense, useState} from \"react\"\r\nimport {Redirect, useHistory} from \"react-router-dom\"\r\nimport AccountItemsCluster from '../../comps/account-items'\r\n\r\nimport { useSeriesList } from \"../../hooks/use-series-list.hook\"\r\n\r\nimport { SideBar } from \"./sidebar\"\r\nimport axios from \"axios\";\r\nimport fs from \"fs\";\r\n\r\nimport Loader from \"react-loader-spinner\";\r\nimport { toast } from \"react-toast\"\r\n\r\nimport \"./index.css\"\r\nimport { useEditionList } from \"../../hooks/use-edition-list.hook\"\r\n\r\nconst PINATA_API_KEY = \"8b0d90ef4bf74827eb88\";\r\nconst PINATA_SECRET_API_KEY = \"609ec3e0c1641f4b41c0c6370eed55e108cea9f9396b9e5a1d123061de07b99b\";\r\n\r\nexport const pinJSONToIPFS = (pinataApiKey, pinataSecretApiKey, JSONBody) => {\r\n    const url = `https://api.pinata.cloud/pinning/pinJSONToIPFS`;\r\n    return axios\r\n        .post(url, JSONBody, {\r\n            headers: {\r\n                pinata_api_key: pinataApiKey,\r\n                pinata_secret_api_key: pinataSecretApiKey\r\n            }\r\n        })\r\n        .then(function (response) {\r\n            \r\n        })\r\n        .catch(function (error) {\r\n            \r\n        });\r\n};\r\n\r\nexport const pinFileToIPFS = async (pinataApiKey, pinataSecretApiKey, imgData) => {\r\n  const url = `https://api.pinata.cloud/pinning/pinFileToIPFS`;\r\n  \r\n  console.log(imgData);\r\n\r\n  let data = new FormData();\r\n  data.append('file', imgData.obj.files[0]);\r\n  \r\n  const metadata = JSON.stringify({\r\n      name: imgData.name,\r\n      keyvalues: {\r\n        name: imgData.name\r\n      }\r\n  });\r\n  data.append('pinataMetadata', metadata);\r\n  \r\n  const pinataOptions = JSON.stringify({\r\n      cidVersion: 0,\r\n      customPinPolicy: {\r\n          regions: [\r\n              {\r\n                  id: 'FRA1',\r\n                  desiredReplicationCount: 1\r\n              },\r\n              {\r\n                  id: 'NYC1',\r\n                  desiredReplicationCount: 2\r\n              }\r\n          ]\r\n      }\r\n  });\r\n  data.append('pinataOptions', pinataOptions);\r\n\r\n  return axios\r\n      .post(url, data, {\r\n          maxBodyLength: 'Infinity',\r\n          headers: {\r\n              'Content-Type': `multipart/form-data; boundary=${data._boundary}`,\r\n              pinata_api_key: pinataApiKey,\r\n              pinata_secret_api_key: pinataSecretApiKey\r\n          }\r\n      })\r\n      .then(function (response) {\r\n          axios.post(process.env.REACT_APP_API_URL + \"/v1/assets/upload\", {\r\n            name: imgData.name,\r\n            path: \"https://cloudflare-ipfs.com/ipfs/\" + response.data.IpfsHash\r\n          })\r\n      })\r\n      .catch(function (error) {\r\n          //handle error here\r\n      });\r\n};\r\n\r\nfunction Item({meta}) {\r\n  return (\r\n    <div className=\"f3-collections-body-item f3-center\">\r\n      <img src={meta.image} width=\"100px\" />\r\n      {meta.name}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport function SeriesCluster({meta, reload}) {\r\n  console.log(typeof meta.id);\r\n  const { editions } = useEditionList(meta.id, reload);\r\n\r\n  const getEditionList = () => {\r\n    var res = [];\r\n\r\n    for (const prop in editions) {\r\n      res.push(\r\n        <Item meta={editions[prop]} />\r\n      )\r\n    }\r\n\r\n    return res;\r\n  }\r\n\r\n  return (\r\n    <div className=\"f3-collections-body\">\r\n      <div>\r\n        <div className=\"f3-center\" style={{paddingRight: \"20px\"}}>\r\n          { meta.name }\r\n          <img src={meta.image} width=\"100px\" height=\"auto\" />\r\n        </div>\r\n      </div>\r\n      <div>\r\n        Editions&nbsp;\r\n      </div>\r\n      <div>\r\n        { getEditionList() }\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport function Assets() {\r\n  const [state, setState] = useState({\r\n    inFile: \"\",\r\n    inName: \"\"\r\n  })\r\n  const [asList, setList] = useState([]);\r\n  const [isDirty, setDirty] = useState(true);\r\n  const [upSeriesStatus, setSeriesStatus] = useState(0);  // 0: Success, 1: Creating, 2: Error\r\n  const [upEditionStatus, setEditionStatus] = useState(0);\r\n  const { series } = useSeriesList(isDirty);\r\n\r\n  useEffect(async () => {\r\n    if (!isDirty) return;\r\n\r\n    const assetList = await axios.get(process.env.REACT_APP_API_URL + \"/v1/assets/list\");\r\n    if (assetList.data.success != \"true\") return;\r\n\r\n    setDirty(false);\r\n    setList(assetList.data.result);\r\n  }, [isDirty])\r\n\r\n  useEffect(() => {\r\n    console.log(\"3. Clear Dirty\");\r\n    setDirty(false);\r\n  }, [isDirty])\r\n\r\n  const handleChange = (e) => {\r\n    setState({\r\n      ...state, \r\n      [e.target.name]: e.target.value\r\n    })\r\n  }\r\n\r\n  const handleCreateSeries = async (e) => {\r\n\r\n    try {\r\n      setSeriesStatus(1);\r\n      //await fetch(process.env.REACT_APP_API_URL + \"/v1/handy-items/create-series\", {\r\n      await fetch(\"http://localhost:3003/v1/handy-items/create-series\", {\r\n          method: \"POST\",\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n          body: JSON.stringify({\r\n            name: state.inSeriesName,\r\n            image: asList[state.inSeriesImg].img_url\r\n          }),\r\n        })\r\n      setSeriesStatus(0);\r\n      setDirty(true);\r\n\r\n      toast.success(\"Series created successfully!\");\r\n    } catch (e) {\r\n      setSeriesStatus(2);\r\n      toast.error(\"Unexpected error occured while creating series!\");\r\n    }\r\n  }\r\n\r\n  const handleCreateEdition = async (e) => {\r\n\r\n    try {\r\n      setEditionStatus(1);\r\n      //await fetch(process.env.REACT_APP_API_URL + \"/v1/handy-items/create-edition\", {\r\n      await fetch(\"http://localhost:3003/v1/handy-items/create-edition\", {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify({\r\n          name: state.inEditionName,\r\n          series: state.inEditionSeries,\r\n          image: asList[state.inEditionImg].img_url\r\n        }),\r\n      })\r\n      setEditionStatus(0);\r\n      setDirty(true);\r\n      toast.success(\"Edition created successfully!\");\r\n    } catch (e) {\r\n      setEditionStatus(2);\r\n      toast.error(\"Unexpected error occured while creating edition!\");\r\n    }\r\n  }\r\n\r\n  const getSeriesList = () => {\r\n    var res = [];\r\n\r\n    for (const prop in series) {\r\n      res.push(<option key={prop} value={prop}>{series[prop].name}</option>)\r\n    }\r\n\r\n    return res;\r\n  }\r\n\r\n  const getCurrentSeries = () => {\r\n    var res = [];\r\n\r\n    console.log(series);\r\n\r\n    for (const prop in series) {\r\n      console.log(series[prop]);\r\n      res.push(\r\n        <SeriesCluster meta={series[prop]} reload={isDirty} />\r\n      )\r\n    }\r\n\r\n    return res;\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <div style={{paddingLeft: \"20px\"}}>\r\n        <div>\r\n          <h3>::Series</h3>\r\n        </div>\r\n        <div className=\"f3-panel-layout f3-collections-head\">\r\n          <div>\r\n            <label>Series Name:</label>\r\n          </div>\r\n          <div>\r\n            <input id=\"inSeriesName\" name=\"inSeriesName\" value={state.inSeriesName} onChange={handleChange} />\r\n          </div>\r\n          <div></div>\r\n          <div>\r\n            <label>Series Image: &nbsp;</label>\r\n          </div>\r\n          <div>\r\n            <select id=\"inSeriesImg\" name=\"inSeriesImg\" onChange={handleChange} value={state.inSeriesImg} >\r\n              <option value=\"\"></option>\r\n              {\r\n                asList.map((item, index) => (\r\n                  <option key={index} value={index}>{item.name}</option>\r\n                ))\r\n              }\r\n            </select>\r\n          </div>\r\n          <div>\r\n            <button class=\"f3-collections-btn\" id=\"\" onClick={handleCreateSeries} disabled={upSeriesStatus === 1}>\r\n              { \r\n                upSeriesStatus == 1 && \r\n                  <Loader type=\"Puff\" color=\"#00BFFF\" height={20} width={20} className=\"f3-inline\" />\r\n              }\r\n              CREATE SERIES\r\n            </button>\r\n          </div>\r\n          <div className=\"f3-collections-hline\">\r\n          </div>\r\n          <div>\r\n            <label>Series:</label>\r\n          </div>\r\n          <div>\r\n            <select id=\"inEditionSeries\" name=\"inEditionSeries\" onChange={handleChange} value={state.inEditionSeries}>\r\n              <option value=\"\"></option>\r\n              { getSeriesList() }\r\n            </select>\r\n          </div>\r\n          <div></div>\r\n          <div>\r\n            <label>Edition Name: </label>\r\n          </div>\r\n          <div>\r\n            <input id=\"inEditionName\" name=\"inEditionName\" value={state.inEditionName} onChange={handleChange} />\r\n          </div>\r\n          <div></div>\r\n          <div>\r\n            <label>Edition Image: </label>\r\n          </div>\r\n          <div>\r\n            <select id=\"inEditionImg\" name=\"inEditionImg\" onChange={handleChange} value={state.inEditionImg} >\r\n              <option value=\"\"></option>\r\n              {\r\n                asList.map((item, index) => (\r\n                  <option key={index} value={index}>{item.name}</option>\r\n                ))\r\n              }\r\n            </select>\r\n          </div>\r\n          <div>\r\n            <button class=\"f3-collections-btn\" id=\"\" onClick={handleCreateEdition} disabled={upEditionStatus === 1}>\r\n              { \r\n                upEditionStatus == 1 && \r\n                  <Loader type=\"Puff\" color=\"#00BFFF\" height={20} width={20} className=\"f3-inline\" />\r\n              }\r\n              CREATE EDITION\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className=\"hline\" />\r\n      <div style={{paddingLeft: \"20px\"}}>\r\n        <div>\r\n          <h3>Current Series</h3>\r\n        </div>\r\n        <div>\r\n          { getCurrentSeries() }\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n\r\n}\r\n\r\nexport function Page() {\r\n  return (\r\n    <div>\r\n      <SideBar />\r\n      <div className=\"f3-main\">\r\n        <Assets />\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n","import { useState, Suspense } from \"react\";\r\nimport { MarketItemsCluster } from \"../../comps/market-items\";\r\nimport { useAccountItem } from \"../../hooks/use-account-item.hook\";\r\nimport { useAccountItems } from \"../../hooks/use-account-items.hook\";\r\nimport { useSeriesList } from \"../../hooks/use-series-list.hook\";\r\n\r\nexport function Item({meta}) {\r\n\r\n  console.log(meta);\r\n\r\n  return (\r\n    <div className=\"f3-store-collection-item\">\r\n      <img src={meta.image} />\r\n      <a href={\"/series/\" + meta.id}>{meta.name}</a>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport function WrappedItem(props) {\r\n  return (\r\n    <Suspense fallback={null}>\r\n      <Item {...props} />\r\n    </Suspense>\r\n  )\r\n}\r\n\r\nexport function Page() {\r\n\r\n  const { series } = useSeriesList(true);\r\n\r\n  const getList = () => {\r\n    var res = [];\r\n    \r\n    for (const prop in series) {\r\n      res.push(<WrappedItem meta={series[prop]} />)\r\n    }\r\n\r\n    return res;\r\n  }\r\n\r\n  return (\r\n    <div className=\"f3-store-padding\">\r\n      <div>\r\n        <h1 style={{margin: \"10px 0px\"}}>NFT Storefront</h1>\r\n        <div className=\"f3-store-hline\"></div>\r\n      </div>\r\n      <div className=\"f3-store-padding\">\r\n        <div>\r\n          <h2 className=\"f3-store-h2\">Available Series</h2>\r\n        </div>\r\n        <div className=\"f3-store-container\">\r\n          { getList() }\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}","import {send, decode, script, args, arg, cdc} from \"@onflow/fcl\"\r\nimport {Address, UInt32} from \"@onflow/types\"\r\n\r\nconst CODE = cdc`\r\nimport NFTStorefront from 0xNFTStorefront\r\nimport HandyItems from 0xHandyItems\r\n\r\npub fun main(id: UInt32): HandyItems.QuerySeriesData? {\r\n  return HandyItems.getSeriesData(series: id)\r\n}\r\n`\r\n\r\nexport function getSeriesItem(series) {\r\n  // prettier-ignore\r\n  return send([\r\n    script(CODE),\r\n    args([arg(Number(series), UInt32)])\r\n  ]).then(decode)\r\n}","import { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nimport { getSeriesItem } from \"../flow/sc.get-series-item\";\r\n\r\nexport function useSeriesItem(id) {\r\n  const [item, setItem] = useState({});\r\n\r\n  useEffect(async () => {\r\n    const series = await getSeriesItem(id);\r\n\r\n    console.log(series);\r\n\r\n    for (const prop in series)\r\n      console.log(series[prop]);\r\n\r\n    setItem(series);\r\n  }, [id]);\r\n\r\n  return {\r\n    series: item\r\n  }\r\n}","import {send, decode, script, args, arg, cdc} from \"@onflow/fcl\"\r\nimport {Address, UInt32} from \"@onflow/types\"\r\n\r\nconst CODE = cdc`\r\nimport NFTStorefront from 0xNFTStorefront\r\nimport HandyItems from 0xHandyItems\r\n\r\npub fun main(series: UInt32): {UInt32: HandyItems.QuerySetEditionData} {\r\n  return HandyItems.getSets(series: series)\r\n}\r\n`\r\n\r\nexport function getSetList(series) {\r\n  // prettier-ignore\r\n  return send([\r\n    script(CODE),\r\n    args([arg(Number(series), UInt32)])\r\n  ]).then(decode)\r\n}","import { useState, Suspense } from \"react\";\r\nimport { useParams } from \"react-router\";\r\nimport { useAccountItem } from \"../../hooks/use-account-item.hook\";\r\nimport { useAccountItems } from \"../../hooks/use-account-items.hook\";\r\nimport { useEditionList } from \"../../hooks/use-edition-list.hook\";\r\nimport { useSeriesItem } from \"../../hooks/use-series-item.hook\";\r\nimport { useSetList } from \"../../hooks/use-set-list.hook\";\r\n\r\nexport function Item({meta}) {\r\n\r\n  return (\r\n    <div className=\"f3-store-series-item\">\r\n      <img src={meta.image} /> <br />\r\n      <a href={\"/editions/\" + meta.id}>{meta.name} Edition</a>\r\n    </div>\r\n  )\r\n\r\n}\r\n\r\nexport function WrappedItem(props) {\r\n  return (\r\n    <Suspense fallback={null}>\r\n      <Item {...props} />\r\n    </Suspense>\r\n  )\r\n}\r\n\r\nexport function Page() {\r\n\r\n  const { id } = useParams();\r\n  const { series } = useSeriesItem(id);\r\n  // const { editions } = useEditionList(id);/\r\n  const { sets } = useSetList(id);\r\n\r\n  const getList = () => {\r\n    var res = [];\r\n    \r\n    for (const prop in sets) {\r\n      res.push(<WrappedItem meta={sets[prop]} />)\r\n    }\r\n\r\n    return res;\r\n  }\r\n\r\n  return (\r\n    <div className=\"f3-store-padding\">\r\n      <div>\r\n        <h1 style={{margin: \"10px 0px\"}}>NFT Storefront</h1>\r\n        <div className=\"f3-store-hline\"></div>\r\n      </div>\r\n      <div className=\"f3-store-padding\">\r\n        <div>\r\n          <h2 className=\"f3-store-h2\">{series.name} Series - Current Editions</h2>\r\n        </div>\r\n        <div className=\"f3-store-container\">\r\n          { getList() }\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}","import { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nimport { getSetList } from \"../flow/sc.get-set-list\";\r\n\r\nexport function useSetList(series) {\r\n  const [items, setItems] = useState({});\r\n\r\n  useEffect(async () => {\r\n    const sets = await getSetList(series)\r\n\r\n    console.log(sets);\r\n\r\n    for (const prop in sets)\r\n      console.log(sets[prop]);\r\n\r\n    setItems(sets);\r\n  }, []);\r\n\r\n  return {\r\n    sets: items\r\n  }\r\n}","import {send, decode, script, args, arg, cdc} from \"@onflow/fcl\"\r\nimport {Address, UInt32} from \"@onflow/types\"\r\n\r\nconst CODE = cdc`\r\nimport NFTStorefront from 0xNFTStorefront\r\nimport HandyItems from 0xHandyItems\r\n\r\npub fun main(id: UInt32): HandyItems.QueryEditionData? {\r\n  return HandyItems.getEditionData(id: id)\r\n}\r\n`\r\n\r\nexport function getEditionItem(edition) {\r\n  // prettier-ignore\r\n  return send([\r\n    script(CODE),\r\n    args([arg(Number(edition), UInt32)])\r\n  ]).then(decode)\r\n}","import * as fcl from \"@onflow/fcl\"\r\nimport * as t from \"@onflow/types\"\r\nimport {tx} from \"./util/tx\"\r\nimport {invariant} from \"@onflow/util-invariant\"\r\n\r\nconst CODE = fcl.cdc`\r\n  import FungibleToken from 0xFungibleToken\r\n  import NonFungibleToken from 0xNonFungibleToken\r\n  import FUSD from 0xFUSD\r\n  import HandyItems from 0xHandyItems\r\n  import NFTStorefront from 0xNFTStorefront\r\n\r\n  transaction(setID: UInt32, storefrontAddress: Address) {\r\n\r\n    let paymentVault: @FungibleToken.Vault\r\n    let handyItemsCollection: &HandyItems.Collection{NonFungibleToken.Receiver}\r\n    let set: &HandyItems.Set\r\n\r\n    prepare(account: AuthAccount) {\r\n      self.set = HandyItems.borrowSet(setID: setID)\r\n      \r\n      let price: UFix64 = self.set.price\r\n      // let price: UFix64 = 3.0\r\n\r\n      let mainFUSDVault = account.borrow<&FUSD.Vault>(from: /storage/fusdVault)\r\n        ?? panic(\"Cannot borrow FUSD vault from account storage\")\r\n      \r\n      self.paymentVault <- mainFUSDVault.withdraw(amount: price)\r\n\r\n      self.handyItemsCollection = account.borrow<&HandyItems.Collection{NonFungibleToken.Receiver}>(\r\n        from: HandyItems.CollectionStoragePath\r\n      ) ?? panic(\"Cannot borrow HandyItems collection receiver from account\")\r\n    }\r\n  \r\n    execute {\r\n      let item <- self.set.mintNFT(\r\n        payment: <-self.paymentVault\r\n      )\r\n\r\n      self.handyItemsCollection.deposit(token: <-item)\r\n    }\r\n  }\r\n`\r\n\r\n// prettier-ignore\r\nexport function purchaseHandyItem({setID, ownerAddress}, opts = {}) {\r\n\r\n  return tx([\r\n    fcl.transaction(CODE),\r\n    fcl.args([\r\n      fcl.arg(Number(setID), t.UInt32),\r\n      fcl.arg(String(ownerAddress), t.Address),\r\n    ]),\r\n    fcl.proposer(fcl.authz),\r\n    fcl.payer(fcl.authz),\r\n    fcl.authorizations([fcl.authz]),\r\n    fcl.limit(1000),\r\n  ], opts)\r\n}\r\n","// prettier-ignore\r\nimport {transaction, limit, proposer, payer, authorizations, authz, cdc} from \"@onflow/fcl\"\r\nimport {invariant} from \"@onflow/util-invariant\"\r\nimport {tx} from \"./util/tx\"\r\n\r\nconst CODE = cdc`\r\n  import FungibleToken from 0xFungibleToken\r\n  import FUSD from 0xFUSD\r\n  import NonFungibleToken from 0xNonFungibleToken\r\n  import HandyItems from 0xHandyItems\r\n  import NFTStorefront from 0xNFTStorefront\r\n\r\n  pub fun hasItems(_ address: Address): Bool {\r\n    return getAccount(address)\r\n      .getCapability<&HandyItems.Collection{NonFungibleToken.CollectionPublic, HandyItems.HandyItemsCollectionPublic}>(HandyItems.CollectionPublicPath)\r\n      .check()\r\n  }\r\n\r\n  pub fun hasFUSD(_ address: Address): Bool {\r\n    let receiver: Bool = getAccount(address)\r\n      .getCapability<&FUSD.Vault{FungibleToken.Receiver}>(/public/fusdReceiver)\r\n      .check()\r\n\r\n    let balance: Bool = getAccount(address)\r\n      .getCapability<&FUSD.Vault{FungibleToken.Balance}>(/public/fusdBalance)\r\n      .check()\r\n\r\n    return receiver && balance\r\n  }\r\n\r\n  pub fun hasStorefront(_ address: Address): Bool {\r\n    return getAccount(address)\r\n      .getCapability<&NFTStorefront.Storefront{NFTStorefront.StorefrontPublic}>(NFTStorefront.StorefrontPublicPath)\r\n      .check()\r\n  }\r\n\r\n  transaction {\r\n    prepare(acct: AuthAccount) {\r\n\r\n      if !hasItems(acct.address) {\r\n        if acct.borrow<&HandyItems.Collection>(from: HandyItems.CollectionStoragePath) == nil {\r\n          acct.save(<-HandyItems.createEmptyCollection(), to: HandyItems.CollectionStoragePath)\r\n        }\r\n        acct.unlink(HandyItems.CollectionPublicPath)\r\n        acct.link<&HandyItems.Collection{NonFungibleToken.CollectionPublic, HandyItems.HandyItemsCollectionPublic}>(HandyItems.CollectionPublicPath, target: HandyItems.CollectionStoragePath)\r\n      }\r\n\r\n      if !hasStorefront(acct.address) {\r\n        if acct.borrow<&NFTStorefront.Storefront>(from: NFTStorefront.StorefrontStoragePath) == nil {\r\n          acct.save(<-NFTStorefront.createStorefront(), to: NFTStorefront.StorefrontStoragePath)\r\n        }\r\n        acct.unlink(NFTStorefront.StorefrontPublicPath)\r\n        acct.link<&NFTStorefront.Storefront{NFTStorefront.StorefrontPublic}>(NFTStorefront.StorefrontPublicPath, target: NFTStorefront.StorefrontStoragePath)\r\n      }\r\n    }\r\n  }\r\n`\r\n\r\nexport async function initializeAccount(address, opts = {}) {\r\n  // prettier-ignore\r\n  invariant(address != null, \"Tried to initialize an account but no address was supplied\")\r\n\r\n  return tx(\r\n    [\r\n      transaction(CODE),\r\n      limit(70),\r\n      proposer(authz),\r\n      payer(authz),\r\n      authorizations([authz]),\r\n    ],\r\n    opts\r\n  )\r\n}\r\n\r\nconst DELETE_COLLECTION = cdc`\r\n  import NonFungibleToken from 0xNonFungibleToken\r\n  import HandyItems from 0xHandyItems\r\n\r\n  transaction {\r\n    prepare(acct: AuthAccount) {\r\n      if acct.borrow<&HandyItems.Collection>(from: HandyItems.CollectionStoragePath) != nil {\r\n        let collection <- acct.load<@HandyItems.Collection>(from: HandyItems.CollectionStoragePath)\r\n        destroy collection\r\n      }\r\n      acct.unlink(HandyItems.CollectionPublicPath)\r\n    }\r\n  }\r\n`\r\n\r\nexport async function initDeleteCollection(address, opts = {}) {\r\n  // prettier-ignore\r\n  invariant(address != null, \"no address was supplied\")\r\n\r\n  return tx(\r\n    [\r\n      transaction(DELETE_COLLECTION),\r\n      limit(70),\r\n      proposer(authz),\r\n      payer(authz),\r\n      authorizations([authz]),\r\n    ],\r\n    opts\r\n  )\r\n}\r\n\r\nconst CREATE_COLLECTION = cdc`\r\n  import NonFungibleToken from 0xNonFungibleToken\r\n  import HandyItems from 0xHandyItems\r\n\r\n  transaction {\r\n    prepare(acct: AuthAccount) {\r\n      if acct.borrow<&HandyItems.Collection>(from: HandyItems.CollectionStoragePath) == nil {\r\n        acct.save(<-HandyItems.createEmptyCollection(), to: HandyItems.CollectionStoragePath)\r\n      }\r\n      acct.unlink(HandyItems.CollectionPublicPath)\r\n      acct.link<&HandyItems.Collection{NonFungibleToken.CollectionPublic, HandyItems.HandyItemsCollectionPublic}>(HandyItems.CollectionPublicPath, target: HandyItems.CollectionStoragePath)\r\n    }\r\n  }\r\n`\r\n\r\nexport async function initCreateCollection(address, opts = {}) {\r\n  // prettier-ignore\r\n  invariant(address != null, \"no address was supplied\")\r\n\r\n  return tx(\r\n    [\r\n      transaction(CREATE_COLLECTION),\r\n      limit(70),\r\n      proposer(authz),\r\n      payer(authz),\r\n      authorizations([authz]),\r\n    ],\r\n    opts\r\n  )\r\n}\r\n\r\nconst CREATE_FUSD = cdc`\r\n  import FungibleToken from 0xFungibleToken\r\n  import FUSD from 0xFUSD\r\n\r\n  transaction {\r\n    prepare(acct: AuthAccount) {\r\n      if (acct.borrow<&FUSD.Vault>(from: /storage/fusdVault) == nil) {\r\n        acct.save(<-FUSD.createEmptyVault(), to: /storage/fusdVault)\r\n      }\r\n\r\n      acct.unlink(/public/fusdReceiver)\r\n      acct.link<&FUSD.Vault{FungibleToken.Receiver}>(\r\n        /public/fusdReceiver,\r\n        target: /storage/fusdVault\r\n      )\r\n\r\n      acct.unlink(/public/fusdBalance)\r\n      acct.link<&FUSD.Vault{FungibleToken.Balance}>(\r\n        /public/fusdBalance,\r\n        target: /storage/fusdVault\r\n      )\r\n    }\r\n  }\r\n`\r\n\r\nexport async function initCreateFusd(address, opts = {}) {\r\n  // prettier-ignore\r\n  invariant(address != null, \"no address was supplied\")\r\n\r\n  return tx(\r\n    [\r\n      transaction(CREATE_FUSD),\r\n      limit(70),\r\n      proposer(authz),\r\n      payer(authz),\r\n      authorizations([authz]),\r\n    ],\r\n    opts\r\n  )\r\n}\r\n\r\nconst DELETE_ALL = cdc`\r\n  import FungibleToken from 0xFungibleToken\r\n  import FUSD from 0xFUSD\r\n  import NonFungibleToken from 0xNonFungibleToken\r\n  import HandyItems from 0xHandyItems\r\n  import NFTStorefront from 0xNFTStorefront\r\n\r\n  pub fun hasItems(_ address: Address): Bool {\r\n    return getAccount(address)\r\n      .getCapability<&HandyItems.Collection{NonFungibleToken.CollectionPublic, HandyItems.HandyItemsCollectionPublic}>(HandyItems.CollectionPublicPath)\r\n      .check()\r\n  }\r\n\r\n  pub fun hasFUSD(_ address: Address): Bool {\r\n    let receiver: Bool = getAccount(address)\r\n      .getCapability<&FUSD.Vault{FungibleToken.Receiver}>(/public/fusdReceiver)\r\n      .check()\r\n\r\n    let balance: Bool = getAccount(address)\r\n      .getCapability<&FUSD.Vault{FungibleToken.Balance}>(/public/fusdBalance)\r\n      .check()\r\n\r\n    return receiver && balance\r\n  }\r\n\r\n  pub fun hasStorefront(_ address: Address): Bool {\r\n    return getAccount(address)\r\n      .getCapability<&NFTStorefront.Storefront{NFTStorefront.StorefrontPublic}>(NFTStorefront.StorefrontPublicPath)\r\n      .check()\r\n  }\r\n\r\n  transaction {\r\n    prepare(acct: AuthAccount) {\r\n\r\n      if hasFUSD(acct.address) {\r\n        if acct.borrow<&FUSD.Vault>(from: /storage/fusdVault) != nil {\r\n          delete acct.load<@FUSD.Vault>(from: /storage/fusdVault)\r\n        }\r\n        acct.unlink(/public/fusdReceiver)\r\n        acct.unlink(/public/fusdBalance)\r\n\r\n      }\r\n\r\n      if !hasItems(acct.address) {\r\n        if acct.borrow<&HandyItems.Collection>(from: HandyItems.CollectionStoragePath) != nil {\r\n          acct.load(<-HandyItems.createEmptyCollection(), to: HandyItems.CollectionStoragePath)\r\n        }\r\n        acct.unlink(HandyItems.CollectionPublicPath)\r\n        acct.link<&HandyItems.Collection{NonFungibleToken.CollectionPublic, HandyItems.HandyItemsCollectionPublic}>(HandyItems.CollectionPublicPath, target: HandyItems.CollectionStoragePath)\r\n      }\r\n\r\n      if !hasStorefront(acct.address) {\r\n        if acct.borrow<&NFTStorefront.Storefront>(from: NFTStorefront.StorefrontStoragePath) == nil {\r\n          acct.save(<-NFTStorefront.createStorefront(), to: NFTStorefront.StorefrontStoragePath)\r\n        }\r\n        acct.unlink(NFTStorefront.StorefrontPublicPath)\r\n        acct.link<&NFTStorefront.Storefront{NFTStorefront.StorefrontPublic}>(NFTStorefront.StorefrontPublicPath, target: NFTStorefront.StorefrontStoragePath)\r\n      }\r\n    }\r\n  }\r\n`\r\n\r\nexport async function initDeleteAll(address, opts = {}) {\r\n  // prettier-ignore\r\n  invariant(address != null, \"Tried to initialize an account but no address was supplied\")\r\n\r\n  return tx(\r\n    [\r\n      transaction(DELETE_ALL),\r\n      limit(70),\r\n      proposer(authz),\r\n      payer(authz),\r\n      authorizations([authz]),\r\n    ],\r\n    opts\r\n  )\r\n}","import { Suspense } from \"react\";\r\nimport { useParams } from \"react-router\";\r\nimport { useAccountItem } from \"../../hooks/use-account-item.hook\";\r\nimport { useSetItem } from \"../../hooks/use-set-item.hook\";\r\nimport { useSeriesItem } from \"../../hooks/use-series-item.hook\";\r\nimport { useEditionItem } from \"../../hooks/use-edition-item.hook\";\r\nimport { purchaseHandyItem } from \"../../flow/tx.purchase-handy-item\";\r\nimport { useCurrentUser } from \"../../hooks/use-current-user.hook\";\r\nimport * as Init from \"../../flow/tx.initialize-my-account\";\r\n\r\nexport function Page() {\r\n  const [user, loggedIn, {signUp, logIn}] = useCurrentUser();\r\n\r\n  const handlePurchase = (e) => {\r\n    e.preventDefault();\r\n\r\n    if (!loggedIn) {\r\n      console.log(\"You must log in.\");\r\n      return;\r\n    }\r\n  }\r\n\r\n  const handleLogin = (e) => {\r\n    logIn();\r\n  }\r\n\r\n  const handleInitCollection = (e) => {\r\n    Init.initCreateCollection(user.addr);\r\n  }\r\n\r\n  const handleDeleteCollection = (e) => {\r\n    Init.initDeleteCollection(user.addr);\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      { loggedIn ? (\r\n        <div>\r\n          <button onClick={handleDeleteCollection}>Delete Collection</button>\r\n          <button onClick={handleInitCollection}>Init Collection</button>\r\n        </div>\r\n      ) : (\r\n        <div></div>\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport function WrappedPage(props) {\r\n  return (\r\n    <Suspense fallback={null}>\r\n      <Page {...props} />\r\n    </Suspense>\r\n  )\r\n}","\r\nimport { useCurrentUser } from \"../hooks/use-current-user.hook\";\r\nimport { useInitialized } from \"../hooks/use-initialized.hook\";\r\nimport \"./mint/index.css\"\r\n\r\nexport function Page() {\r\n  const [user, loggedIn, {signUp, logIn, logOut}] = useCurrentUser();\r\n  const init = useInitialized(user.addr)\r\n\r\n  console.log(init);\r\n\r\n  const handleConnectWallet = (e) => {\r\n    e.preventDefault();\r\n\r\n    logIn();\r\n  }\r\n\r\n  const handleInitializeWallet = (e) => {\r\n    e.preventDefault();\r\n\r\n    init.initialize(user.addr);\r\n  }\r\n\r\n  const handleLogout = (e) => {\r\n    e.preventDefault();\r\n\r\n    logOut();\r\n  }\r\n\r\n  return (\r\n    <div class=\"navbar\">\r\n      <ul>\r\n        <li><a href=\"/\">NFT Storefront</a></li>\r\n        <li><a href=\"/mywallet\">My Wallet</a></li>\r\n        <li style={{float: \"right\"}}>\r\n          { \r\n            loggedIn ? (\r\n              <div>\r\n                {\r\n                  init.isInitialized == true ? (\r\n                    <span className=\"f3-nav-addr\">Account Connected:&nbsp; {user.addr}</span>\r\n                  ): (\r\n                    <a href=\"#\" onClick={handleInitializeWallet}>Initialize Wallet</a>\r\n                  )\r\n                }\r\n                <a href=\"#\" onClick={handleLogout}>Sign out</a>\r\n              </div>\r\n            ) : (\r\n              <a href=\"#\" onClick={handleConnectWallet}>Connect Wallet</a>\r\n            )\r\n          }\r\n        </li>\r\n      </ul>\r\n    </div>\r\n  )\r\n}","import { Suspense, useState } from \"react\";\r\nimport { useParams } from \"react-router\";\r\nimport { useAccountItem } from \"../../hooks/use-account-item.hook\";\r\nimport { useSetItem } from \"../../hooks/use-set-item.hook\";\r\nimport { useSeriesItem } from \"../../hooks/use-series-item.hook\";\r\nimport { useEditionItem } from \"../../hooks/use-edition-item.hook\";\r\nimport { purchaseHandyItem } from \"../../flow/tx.purchase-handy-item\";\r\nimport { useCurrentUser } from \"../../hooks/use-current-user.hook\";\r\nimport { useInitialized } from \"../../hooks/use-initialized.hook\";\r\nimport { Page as Navbar } from \"../navbar\"\r\n\r\nimport { toast } from 'react-toast'\r\nimport Loader from \"react-loader-spinner\";\r\n\r\nexport function Page() {\r\n  let { id } = useParams();\r\n  const { item, reload } = useSetItem(id);\r\n\r\n  const [user, loggedIn, {signUp, logIn}] = useCurrentUser();\r\n\r\n  const { series } = useSeriesItem(Object.keys(item).length != 0 ? item.seriesID : \"\");\r\n  const { edition } = useEditionItem(Object.keys(item).length != 0 ? item.editionID : \"\");\r\n  const init = useInitialized(user.addr);\r\n  const [buyingState, setBuyingState] = useState(0);  // 0: Normal, 1: Buying, 2: Error\r\n\r\n  const handlePurchase = (e) => {\r\n    e.preventDefault();\r\n\r\n    purchaseHandyItem({setID: id, ownerAddress: process.env.REACT_APP_CONTRACT_HANDY_ITEMS}, {\r\n      onStart() {\r\n        setBuyingState(1);\r\n      },\r\n      async onSuccess() {\r\n        setBuyingState(0);\r\n        toast.success(\"Successfully purchased!\");\r\n      },\r\n      async onComplete() {\r\n        reload();\r\n      },\r\n      async onError(error) {\r\n        setBuyingState(2);\r\n        toast.error(\"Unexpected error occured! \\n\" + error);\r\n        console.log(error);\r\n      }\r\n    })\r\n  }\r\n\r\n  const handleLogin = (e) => {\r\n    logIn();\r\n  }\r\n\r\n  const handleInitializeWallet = (e) => {\r\n    e.preventDefault();\r\n\r\n    init.initialize(user.addr);\r\n  }\r\n\r\n  return (Object.keys(item).length != 0) ? (\r\n    <div>\r\n      <Navbar />\r\n    <div className=\"f3-store-padding\">\r\n      <div>\r\n        <h1 style={{margin: \"10px 0px\"}}>NFT Storefront</h1>\r\n        <div className=\"f3-store-hline\"></div>\r\n      </div>\r\n      <div className=\"f3-store-padding\">\r\n        <div>\r\n          <h2 className=\"f3-store-h2\">SportsCast - {series.name} {edition.name} Edition</h2>\r\n        </div>\r\n        <div>\r\n          <img\r\n            width=\"200px\"\r\n            height=\"250px\"\r\n            src={item.metadata[\"thumb_image\"]}\r\n          />\r\n          <p>{item.metadata[\"description\"]}</p>\r\n          <p>Player: {item.metadata[\"name\"]}</p>\r\n          <p>Edition: {edition.name}</p>\r\n          <p>Available: {item.quantity - item.numberMinted}</p>\r\n          <p>Price: ${item.price}</p>\r\n        </div>\r\n        {\r\n          loggedIn != true ? (\r\n            <button onClick={handleLogin}>Connect Wallet</button>\r\n          ) : (\r\n            init.isInitialized == true ? (\r\n              <button onClick={handlePurchase} disabled={buyingState == 1}>\r\n                { buyingState == 1 && \r\n                    <Loader type=\"Oval\" color=\"#1f1f1f\" height={20} width={20} className=\"f3-inline\" /> }\r\n                Purchase\r\n              </button>\r\n            ) : (\r\n              <button onClick={handleInitializeWallet}>Initialize Wallet</button>\r\n            )\r\n          )\r\n        }\r\n      </div>\r\n    </div>\r\n    </div>\r\n  ) : (\r\n    <div><Navbar /></div>\r\n  )\r\n}\r\n\r\nexport function WrappedPage(props) {\r\n  return (\r\n    <Suspense fallback={null}>\r\n      <Page {...props} />\r\n    </Suspense>\r\n  )\r\n}","import { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nimport { getEditionItem } from \"../flow/sc.get-edition-item\";\r\n\r\nexport function useEditionItem(id) {\r\n  const [item, setItem] = useState({});\r\n\r\n  useEffect(async () => {\r\n    const edition = await getEditionItem(id);\r\n\r\n    console.log(edition);\r\n\r\n    for (const prop in edition)\r\n      console.log(edition[prop]);\r\n\r\n      setItem(edition);\r\n  }, [id]);\r\n\r\n  return {\r\n    edition: item\r\n  }\r\n}","import { Suspense } from \"react\";\r\nimport { useAccountItem } from \"../../hooks/use-account-item.hook\";\r\nimport { useAccountItems } from \"../../hooks/use-account-items.hook\";\r\nimport { useCurrentUser } from \"../../hooks/use-current-user.hook\";\r\nimport { Page as Navbar} from \"../navbar\"\r\n\r\nexport function Item({addr, id}) {\r\n  const item = useAccountItem(addr, id);\r\n\r\n  console.log(item);\r\n\r\n  return (\r\n      item.item ? (\r\n        <div className=\"f3-mywallet-container\">\r\n          <div className=\"f3-center\">\r\n            <div>{item.set.metadata[\"name\"]}</div>\r\n            <img src={item.set.metadata[\"thumb_image\"]} />\r\n            <div>{item.edition.name} Edition</div>\r\n            <div>#{item.item.serialID} / {item.set.quantity}</div>\r\n          </div>\r\n          <div>\r\n            {/*src={process.env.REACT_APP_API_URL + \"/video/\" + item.edition.name + \".mp4\"}*/}\r\n            {/*\"http://nft.ikonicc.ca\" + \"/video/\" + item.edition.name + \".mp4\"*/}\r\n            <video\r\n              width=\"auto\"\r\n              height=\"150px\"\r\n              src={process.env.REACT_APP_API_URL + \"/video/\" + item.edition.name + \".mp4\"}\r\n              controls=\"controls\"\r\n            />\r\n          </div>\r\n        </div>\r\n      ) : (\r\n        <div></div>\r\n      )\r\n  )\r\n}\r\n\r\nexport function Page() {\r\n  const [user, loggedIn, {signUp, logIn}] = useCurrentUser();\r\n  const { ids } = useAccountItems(user.addr)\r\n\r\n  console.log(ids);\r\n\r\n  const handleLogin = (e) => {\r\n    logIn();\r\n  }\r\n\r\n  return (\r\n    <div className=\"f3-store-padding\">\r\n      <div>\r\n        <h1 style={{margin: \"10px 0px\"}}>NFT Storefront</h1>\r\n        <div className=\"f3-store-hline\"></div>\r\n      </div>\r\n      <div className=\"f3-store-padding\">\r\n        <div>\r\n          <h2 className=\"f3-store-h2\">My Wallet NFTs</h2>\r\n        </div>\r\n        <div>\r\n          { ids.map(item => <Item addr={user.addr} id={item} />) }\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport function WrappedPage(props) {\r\n  return (\r\n    <Suspense fallback={null}>\r\n      <Navbar />\r\n      <Page {...props} />\r\n    </Suspense>\r\n  )\r\n}","\r\nexport function Page() {\r\n  return <div>Page Not Found</div>\r\n}\r\n","import React, { Suspense } from 'react'\nimport ReactDOM from 'react-dom'\nimport {RecoilRoot} from \"recoil\"\nimport reportWebVitals from './reportWebVitals'\nimport {BrowserRouter as Router, Switch, Route} from \"react-router-dom\"\nimport { ToastContainer, toast } from 'react-toast'\n\nimport \"react-loader-spinner/dist/loader/css/react-spinner-loader.css\";\nimport './index.css';\n\nimport {Page as Root} from \"./pages/root.page\"\nimport {Page as Publish} from \"./pages/publish.page\"\nimport {Page as List} from \"./pages/list.page\"\nimport {Page as Market} from \"./pages/market.page\"\nimport {Page as MintPanel} from \"./pages/mint\"\nimport {Page as Assets} from \"./pages/mint/assets\"\nimport {Page as MintNFT} from \"./pages/mint/mintnft\"\nimport {Page as Collections} from \"./pages/mint/collections\"\nimport {Page as Series} from \"./pages/storefront/series\"\nimport {Page as Edition} from \"./pages/storefront/edition\"\nimport {Page as InitAcc} from \"./pages/storefront/initacc\"\nimport {Page as Navbar} from \"./pages/navbar\"\nimport {WrappedPage as Purchase} from \"./pages/storefront/purchase\"\nimport {WrappedPage as MyWallet} from './pages/storefront/mywallet'\nimport {Page as NotFound} from \"./pages/not-found.page\"\n\nimport * as fcl from \"@onflow/fcl\"\nimport * as t from \"@onflow/types\"\n\nwindow.fcl = fcl\nwindow.t = t\n\nfcl\n  .config()\n  .put(\"faucet\", process.env.REACT_APP_FAUCET_ADDRESS)\n  .put(\"accessNode.api\", process.env.REACT_APP_FLOW_ACCESS_API_URL)\n  .put(\"challenge.handshake\", process.env.REACT_APP_WALLET_DISCOVERY)\n  .put(\"0xFungibleToken\", process.env.REACT_APP_CONTRACT_FUNGIBLE_TOKEN)\n  .put(\"0xNonFungibleToken\", process.env.REACT_APP_CONTRACT_NON_FUNGIBLE_TOKEN)\n  .put(\"0xNFTStorefront\", process.env.REACT_APP_CONTRACT_NFT_STOREFRONT)\n  .put(\"0xHandyItems\", process.env.REACT_APP_CONTRACT_HANDY_ITEMS)\n  .put(\"0xFlowToken\", process.env.REACT_APP_CONTRACT_FLOW_TOKEN)\n  .put(\"0xFUSD\", process.env.REACT_APP_CONTRACT_FUSD_TOKEN)\n  .put(\"decoder.Type\", val => val.staticType)\n\n  console.log(process.env)\n\nReactDOM.render(\n  <React.StrictMode>\n    <RecoilRoot>\n      <Router>\n        <Switch>\n          <Route exact path=\"/publish\">\n            <Suspense fallback={null}>\n              <Publish />\n            </Suspense>\n          </Route>\n          <Route exact path=\"/list\">\n            <List />\n          </Route>\n          <Route exact path=\"/market\">\n            <Market />\n          </Route>\n          <Route exact path=\"/mintpanel\">\n            <Collections />\n          </Route>\n          <Route exact path=\"/mintpanel/assets\">\n            <Assets />\n          </Route>\n          <Route exact path=\"/mintpanel/mintnft\">\n            <MintNFT />\n          </Route>\n          <Route exact path=\"/mintpanel/collections\">\n            <Collections />\n          </Route>\n          <Route exact path=\"/mywallet\">\n            <MyWallet />\n          </Route>\n          <Route exact path=\"/init\">\n            <InitAcc />\n          </Route>\n          <Route exact path=\"/series/:id\">\n            <Suspense fallback={null}>\n              <Navbar />\n              <Edition />\n            </Suspense>\n          </Route>\n          <Route path=\"/editions/:id\">\n            <Purchase />\n          </Route>\n          <Route exact path=\"/\">\n            <Suspense fallback={null}>\n              <Navbar />\n              <Series />\n            </Suspense>\n          </Route>\n          <Route>\n            <NotFound />\n          </Route>\n        </Switch>\n      </Router>\n      <ToastContainer position=\"top-right\" delay=\"5000\" />\n    </RecoilRoot>\n  </React.StrictMode>\n  ,\n  document.getElementById(\"root\")\n)\n\nreportWebVitals()"],"sourceRoot":""}