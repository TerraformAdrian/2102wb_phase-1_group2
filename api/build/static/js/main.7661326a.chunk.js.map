{"version":3,"sources":["reportWebVitals.js","hooks/use-current-user.hook.js","global/constants.js","flow/script.get-account-items.js","hooks/use-account-items.hook.js","flow/script.is-account-initialized.js","flow/util/tx.js","flow/tx.initialize-account.js","hooks/use-initialized.hook.js","pages/publish.page.js","flow/util/batch.js","flow/script.get-account-item.js","flow/tx.create-sale-offer.js","hooks/use-account-item.hook.js","comps/account-item.js","comps/account-items.js","pages/list.page.js","flow/sc.get-market-items.js","hooks/use-market-items.hook.js","flow/sc.get-market-item.js","flow/tx.buy-market-item.js","hooks/use-market-item.hook.js","comps/market-item.js","comps/market-items.js","pages/market.page.js","pages/mint/sidebar.js","pages/mint/assets.js","flow/sc.get-edition-list.js","flow/sc.get-series-list.js","hooks/use-series-list.hook.js","pages/mint/mintnft.js","hooks/use-ipfs-items.hook.js","hooks/use-edition-list.hook.js","pages/mint/collections.js","pages/storefront/series.js","flow/sc.get-series-item.js","hooks/use-series-item.hook.js","flow/sc.get-set-list.js","pages/storefront/edition.js","hooks/use-set-list.hook.js","flow/sc.get-set-item.js","flow/sc.get-edition-item.js","flow/tx.purchase-handy-item.js","flow/tx.initialize-my-account.js","pages/storefront/initacc.js","pages/storefront/purchase.js","hooks/use-set-item.hook.js","hooks/use-edition-item.hook.js","pages/storefront/mywallet.js","pages/not-found.page.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","currentUser","atom","key","default","addr","loggedIn","cid","tools","logIn","fcl","logOut","signUp","changeUser","useCurrentUser","useRecoilState","user","setUser","useEffect","subscribe","IDLE","PROCESSING","CODE","fetchAccountItems","address","Promise","resolve","Address","d","sort","a","b","$state","atomFamily","selectorFamily","get","$status","useAccountItems","items","setItems","status","setStatus","console","log","ids","mint","recipient","name","imageUrl","color","info","quantity","fetch","process","method","headers","body","JSON","stringify","tokenURI","refresh","cdc","isAccountInitialized","send","script","args","arg","decode","noop","tx","mods","opts","onStart","onSubmission","onUpdate","onSuccess","onError","onComplete","txId","fvsTx","unsub","onceSealed","txStatus","error","env","initializeAccount","invariant","transaction","limit","proposer","authz","payer","authorizations","$address","$init","$computedInit","all","HandyItems","HandyItemsMarket","Page","useState","txtAddress","txtName","txtImageURL","txtColor","txtInfo","txtQuantity","state","setState","history","useHistory","init","setAddr","setInit","isInitialized","useRecoilValue","recheck","initialize","isSpecificInitialized","useInitialized","handleChange","e","target","value","handleSubmit","preventDefault","length","alert","className","htmlFor","id","onChange","disabled","onClick","push","callback","SET_CALLBACK","PROCESS","MAYBE_PROCESS","TIMEOUT","ENQUEUE","RESOLVE","HANDLERS","INIT","ctx","put","Set","setInterval","sendSelf","letter","uid","hold","reply","update","n","add","h","size","need","p","reduce","acc","result","_","results","have","Object","keys","delete","collate","px","addresses","t","map","Number","spawn","enqueue","expectReply","timeout","fetchAccountItem","createSaleOffer","itemID","price","Error","String","expand","split","useAccountItem","cu","accountItems","join","comp","item","setItem","owned","sansPrefix","sell","AccountItemCluster","WrappedAccountItemCluster","props","fallback","AccountItemsCluster","WrappedAccountItemsCluster","setAddress","count","setCount","getMarketItems","$marketItemsState","$marketItemsStatus","UInt64","buyMarketItem","ownerAddress","useMarketItem","getMarketItem","buy","MarketItemCluster","WrappedMarketItemCluster","MarketItemsCluster","useMarketItems","WrappedMarketItemsCluster","SideBar","href","pinFileToIPFS","pinataApiKey","pinataSecretApiKey","imgData","data","FormData","append","obj","files","metadata","keyvalues","pinataOptions","cidVersion","customPinPolicy","regions","desiredReplicationCount","axios","post","maxBodyLength","_boundary","pinata_api_key","pinata_secret_api_key","response","path","IpfsHash","catch","Assets","inFile","inName","asList","setList","isDirty","setDirty","inputFile","useRef","assetList","success","handleUpload","current","style","paddingLeft","type","ref","src","img_url","width","height","getEditionList","series","UInt32","useSeriesList","prop","MintNFT","inAsset","inQuantity","inSerial","inSeries","inPrice","inEdition","assets","useIpfsItems","editions","useEditionList","createSet","params","inThumb","index","inDescription","res","seriesList","editionList","desc","thumb","isSerial","edition","handleCreateSeries","inSeriesName","image","inSeriesImg","handleCreateEdition","inEditionName","inEditionSeries","inEditionImg","class","getSeriesList","Item","meta","WrappedItem","margin","getList","getSeriesItem","useSeriesItem","getSetList","useParams","sets","useSetList","getEditionItem","DELETE_COLLECTION","CREATE_COLLECTION","Init","set","useSetItem","seriesID","useEditionItem","editionID","numberMinted","setID","purchaseHandyItem","WrappedPage","serialID","window","val","staticType","ReactDOM","render","StrictMode","exact","children","document","getElementById"],"mappings":"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","file":"static/js/main.7661326a.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {useEffect} from \"react\"\r\nimport {atom, useRecoilState} from \"recoil\"\r\nimport * as fcl from \"@onflow/fcl\"\r\n\r\nexport const currentUser = atom({\r\n  key: \"CURRENT_USER\",\r\n  default: {addr: null, loggedIn: null, cid: null},\r\n})\r\n\r\nconst tools = {\r\n  logIn: fcl.logIn,\r\n  logOut: fcl.unauthenticate,\r\n  signUp: fcl.signUp,\r\n  changeUser: fcl.reauthenticate,\r\n}\r\n\r\nexport function useCurrentUser() {\r\n  const [user, setUser] = useRecoilState(currentUser)\r\n  useEffect(() => fcl.currentUser().subscribe(setUser), [setUser])\r\n  return [user, user.addr != null, tools]\r\n}\r\n","export const LOADING = \"LOADING\"\r\n\r\n// Exposed states of a Flow Transaction\r\nexport const IDLE = \"IDLE\"\r\nexport const PROCESSING = \"PROCESSING\"\r\nexport const SUCCESS = \"SUCCESS\"\r\nexport const ERROR = \"ERROR\"\r\n\r\n// How long to pause on a success or error message\r\n// before transitioning back to an IDLE state.\r\nexport const IDLE_DELAY = 1000\r\n","import * as fcl from \"@onflow/fcl\"\r\nimport {Address} from \"@onflow/types\"\r\n\r\nconst CODE = fcl.cdc`\r\nimport NonFungibleToken from 0xNonFungibleToken\r\nimport HandyItems from 0xHandyItems\r\n\r\n  pub fun main(address: Address): [UInt64] {\r\n    if let collection =  getAccount(address).getCapability<&HandyItems.Collection{NonFungibleToken.CollectionPublic, HandyItems.HandyItemsCollectionPublic}>(HandyItems.CollectionPublicPath).borrow() {\r\n      return collection.getIDs()\r\n    }\r\n\r\n    return []\r\n  }\r\n`\r\n\r\nexport function fetchAccountItems(address) {\r\n  if (address == null) return Promise.resolve([])\r\n\r\n  // prettier-ignore\r\n  return fcl.send([\r\n    fcl.script(CODE),\r\n    fcl.args([\r\n      fcl.arg(address, Address)\r\n    ]),\r\n  ]).then(fcl.decode).then(d => d.sort((a, b) => a - b))\r\n}\r\n","import {atomFamily, selectorFamily, useRecoilState} from \"recoil\"\r\nimport {fetchAccountItems} from \"../flow/script.get-account-items\"\r\nimport {IDLE, PROCESSING} from \"../global/constants\"\r\n\r\nexport const $state = atomFamily({\r\n  key: \"account-items::state\",\r\n  default: selectorFamily({\r\n    key: \"account-items::default\",\r\n    get: address => async () => {\r\n      return fetchAccountItems(address)},\r\n  }),\r\n})\r\n\r\nexport const $status = atomFamily({\r\n  key: \"account-items::status\",\r\n  default: IDLE,\r\n})\r\n\r\nexport function useAccountItems(address) {\r\n  const [items, setItems] = useRecoilState($state(address))\r\n  const [status, setStatus] = useRecoilState($status(address))\r\n\r\n  console.log(\"B\")\r\n  console.log(items)\r\n\r\n  return {\r\n    ids: items,\r\n    status,\r\n\r\n    async mint(recipient, name, \r\n      imageUrl, color, info, quantity) {\r\n      setStatus(PROCESSING)\r\n      await fetch(process.env.REACT_APP_API_ITEM_MINT, {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify({\r\n          recipient: recipient,\r\n          name: name,\r\n          tokenURI: imageUrl,\r\n          color: color,\r\n          info: info,\r\n          quantity: quantity,\r\n        }),\r\n      })\r\n      await fetchAccountItems(recipient).then(setItems)\r\n      setStatus(IDLE)\r\n    },\r\n    async refresh() {\r\n      setStatus(PROCESSING)\r\n      await fetchAccountItems(address).then(setItems)\r\n      setStatus(IDLE)\r\n    },\r\n  }\r\n}\r\n","import {send, decode, script, args, arg, cdc} from \"@onflow/fcl\"\r\nimport {Address} from \"@onflow/types\"\r\n\r\nconst CODE = cdc`\r\n  import FungibleToken from 0xFungibleToken\r\n  import NonFungibleToken from 0xNonFungibleToken\r\n  import HandyItems from 0xHandyItems\r\n  import NFTStorefront from 0xNFTStorefront\r\n\r\n  pub fun hasItems(_ address: Address): Bool {\r\n    return getAccount(address)\r\n      .getCapability<&HandyItems.Collection{NonFungibleToken.CollectionPublic, HandyItems.HandyItemsCollectionPublic}>(HandyItems.CollectionPublicPath)\r\n      .check()\r\n  }\r\n\r\n  pub fun hasStorefront(_ address: Address): Bool {\r\n    return getAccount(address)\r\n      .getCapability<&NFTStorefront.Storefront{NFTStorefront.StorefrontPublic}>(NFTStorefront.StorefrontPublicPath)\r\n      .check()\r\n  }\r\n\r\n  pub fun main(address: Address): {String: Bool} {\r\n    let ret: {String: Bool} = {}\r\n    ret[\"HandyItems\"] = hasItems(address)\r\n    ret[\"HandyItemsMarket\"] = hasStorefront(address)\r\n    return ret\r\n  }\r\n`\r\n\r\nexport function isAccountInitialized(address) {\r\n  if (address == null || address == \"\")\r\n    return Promise.resolve(false)\r\n\r\n  // prettier-ignore\r\n  return send([\r\n    script(CODE),\r\n    args([\r\n      arg(address, Address)\r\n    ])\r\n  ]).then(decode)\r\n}\r\n","import * as fcl from \"@onflow/fcl\"\r\n\r\nconst noop = async () => {}\r\n\r\nexport async function tx(mods = [], opts = {}) {\r\n  const onStart = opts.onStart || noop\r\n  const onSubmission = opts.onSubmission || noop\r\n  const onUpdate = opts.onUpdate || noop\r\n  const onSuccess = opts.onSuccess || noop\r\n  const onError = opts.onError || noop\r\n  const onComplete = opts.onComplete || noop\r\n\r\n  try {\r\n    onStart()\r\n    var txId = await fcl.send(mods).then(fcl.decode)\r\n    console.info(\r\n      `%cTX[${txId}]: ${fvsTx(await fcl.config().get(\"env\"), txId)}`,\r\n      \"color:purple;font-weight:bold;font-family:monospace;\"\r\n    )\r\n    onSubmission(txId)\r\n    var unsub = await fcl.tx(txId).subscribe(onUpdate)\r\n    var txStatus = await fcl.tx(txId).onceSealed()\r\n    unsub()\r\n    console.info(\r\n      `%cTX[${txId}]: ${fvsTx(await fcl.config().get(\"env\"), txId)}`,\r\n      \"color:green;font-weight:bold;font-family:monospace;\"\r\n    )\r\n    await onSuccess(txStatus)\r\n    return txStatus\r\n  } catch (error) {\r\n    console.error(\r\n      `TX[${txId}]: ${fvsTx(await fcl.config().get(\"env\"), txId)}`,\r\n      error\r\n    )\r\n    onError(error)\r\n  } finally {\r\n    await onComplete()\r\n  }\r\n}\r\n\r\nfunction fvsTx(env, txId) {\r\n  return `https://flow-view-source.com/${env}/tx/${txId}`\r\n}\r\n","// prettier-ignore\r\nimport {transaction, limit, proposer, payer, authorizations, authz, cdc} from \"@onflow/fcl\"\r\nimport {invariant} from \"@onflow/util-invariant\"\r\nimport {tx} from \"./util/tx\"\r\n\r\nconst CODE = cdc`\r\n  import FungibleToken from 0xFungibleToken\r\n  import FlowToken from 0xFlowToken\r\n  import NonFungibleToken from 0xNonFungibleToken\r\n  import HandyItems from 0xHandyItems\r\n  import NFTStorefront from 0xNFTStorefront\r\n\r\n  pub fun hasItems(_ address: Address): Bool {\r\n    return getAccount(address)\r\n      .getCapability<&HandyItems.Collection{NonFungibleToken.CollectionPublic, HandyItems.HandyItemsCollectionPublic}>(HandyItems.CollectionPublicPath)\r\n      .check()\r\n  }\r\n\r\n  pub fun hasFLOW(_ address: Address): Bool {\r\n    let receiver = getAccount(address)\r\n      .getCapability<&FlowToken.Vault{FungibleToken.Receiver}>(/public/flowReceiver)\r\n      .check()\r\n\r\n    let balance = getAccount(address)\r\n      .getCapability<&FlowToken.Vault{FungibleToken.Balance}>(/public/flowBalance)\r\n      .check()\r\n\r\n    return receiver && balance\r\n  }\r\n\r\n  pub fun hasStorefront(_ address: Address): Bool {\r\n    return getAccount(address)\r\n      .getCapability<&NFTStorefront.Storefront{NFTStorefront.StorefrontPublic}>(NFTStorefront.StorefrontPublicPath)\r\n      .check()\r\n  }\r\n\r\n  transaction {\r\n    prepare(acct: AuthAccount) {\r\n\r\n      if !hasItems(acct.address) {\r\n        if acct.borrow<&HandyItems.Collection>(from: HandyItems.CollectionStoragePath) == nil {\r\n          acct.save(<-HandyItems.createEmptyCollection(), to: HandyItems.CollectionStoragePath)\r\n        }\r\n        acct.unlink(HandyItems.CollectionPublicPath)\r\n        acct.link<&HandyItems.Collection{NonFungibleToken.CollectionPublic, HandyItems.HandyItemsCollectionPublic}>(HandyItems.CollectionPublicPath, target: HandyItems.CollectionStoragePath)\r\n      }\r\n\r\n      if !hasStorefront(acct.address) {\r\n        if acct.borrow<&NFTStorefront.Storefront>(from: NFTStorefront.StorefrontStoragePath) == nil {\r\n          acct.save(<-NFTStorefront.createStorefront(), to: NFTStorefront.StorefrontStoragePath)\r\n        }\r\n        acct.unlink(NFTStorefront.StorefrontPublicPath)\r\n        acct.link<&NFTStorefront.Storefront{NFTStorefront.StorefrontPublic}>(NFTStorefront.StorefrontPublicPath, target: NFTStorefront.StorefrontStoragePath)\r\n      }\r\n    }\r\n  }\r\n`\r\n\r\nexport async function initializeAccount(address, opts = {}) {\r\n  // prettier-ignore\r\n  invariant(address != null, \"Tried to initialize an account but no address was supplied\")\r\n\r\n  return tx(\r\n    [\r\n      transaction(CODE),\r\n      limit(70),\r\n      proposer(authz),\r\n      payer(authz),\r\n      authorizations([authz]),\r\n    ],\r\n    opts\r\n  )\r\n}\r\n","import {\r\n  atomFamily,\r\n  selectorFamily,\r\n  useRecoilState,\r\n  useRecoilValue,\r\n} from \"recoil\"\r\nimport {\r\n  LOADING,\r\n  IDLE,\r\n  PROCESSING,\r\n  SUCCESS,\r\n  ERROR,\r\n  IDLE_DELAY,\r\n} from \"../global/constants\"\r\nimport {isAccountInitialized} from \"../flow/script.is-account-initialized\"\r\nimport {initializeAccount} from \"../flow/tx.initialize-account\"\r\n\r\nexport const $address = atomFamily({\r\n  key: \"init::address\",\r\n  default: null,\r\n})\r\n\r\nexport const $status = atomFamily({\r\n  key: \"init::status\",\r\n  default: IDLE,\r\n})\r\n\r\nexport const $init = atomFamily({\r\n  key: \"init::state\",\r\n  default: selectorFamily({\r\n    key: \"init::default\",\r\n    get: address => () => isAccountInitialized(address),\r\n  }),\r\n})\r\n\r\nexport const $computedInit = selectorFamily({\r\n  key: \"init::computed\",\r\n  get:\r\n    address =>\r\n    async ({get}) => {\r\n      const all = get($init(address))\r\n      return all.HandyItems || all.HandyItemsMarket\r\n    },\r\n})\r\n\r\nexport function useInitialized(addr) {\r\n  const [address, setAddr] = useRecoilState($address(addr))\r\n  const [init, setInit] = useRecoilState($init(address))\r\n  const isInitialized = useRecoilValue($computedInit(address))\r\n  const [status, setStatus] = useRecoilState($status(address))\r\n\r\n  console.log(address)\r\n\r\n  function recheck() {\r\n    isAccountInitialized(address).then(setInit)\r\n  }\r\n\r\n  return {\r\n    ...init,\r\n    isInitialized,\r\n    status: isInitialized == null ? LOADING : status,\r\n    recheck,\r\n    async initialize(addr) {\r\n      initializeAccount(addr != null ? addr \r\n        : address, {\r\n        onStart() {\r\n          setStatus(PROCESSING)\r\n        },\r\n        async onSuccess() {\r\n          recheck()\r\n          setStatus(SUCCESS)\r\n        },\r\n        onError() {\r\n          setStatus(ERROR)\r\n        },\r\n        async onComplete() {\r\n          setStatus(IDLE)\r\n        },\r\n      })\r\n    },\r\n    async isSpecificInitialized(address) {\r\n      const all = await isAccountInitialized(address)\r\n      console.log(all)\r\n      setAddr(address)\r\n      return all.HandyItems || all.HandyItemsMarket\r\n    }\r\n  }\r\n}\r\n","\r\nimport {IDLE} from \"../global/constants\"\r\nimport {useCurrentUser} from \"../hooks/use-current-user.hook\"\r\nimport {useAccountItems} from \"../hooks/use-account-items.hook\"\r\nimport { useInitialized } from \"../hooks/use-initialized.hook\"\r\nimport {Suspense, useState} from \"react\"\r\nimport {Redirect, useHistory} from \"react-router-dom\"\r\n\r\nimport './publish.css'\r\n\r\nexport function Page() {\r\n  const [state, setState] = useState({\r\n    txtAddress: \"\",\r\n    txtName: \"\",\r\n    txtImageURL: \"\", \r\n    txtColor: \"\",\r\n    txtInfo: \"\",\r\n    txtQuantity: \"\"\r\n  })\r\n  const history = useHistory();\r\n  const [user] = useCurrentUser()\r\n\r\n  // if (user.addr == null) return <Redirect to={\"/\"} />\r\n  const items = useAccountItems(user.addr)\r\n  const init = useInitialized(null)\r\n\r\n  const handleInit = (e) => {\r\n    e.preventDefault();\r\n    init.initialize(state.txtAddress);\r\n  }\r\n\r\n  const handleChange = (e) => {\r\n    setState({\r\n      ...state, \r\n      [e.target.name]: e.target.value\r\n    })\r\n  }\r\n\r\n  const handleView = (e) => {\r\n    e.preventDefault();\r\n    history.push(\"/list\");\r\n  }\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n\r\n    if (state.txtAddress.length != 18) {\r\n      alert(\"Enter Address Corretly!\");\r\n      return;\r\n    }\r\n\r\n    if (!await init.isSpecificInitialized(state.txtAddress)) {\r\n      alert(\"Initialize account first!\");\r\n      return;\r\n    }\r\n\r\n    items.mint(\r\n      state.txtAddress, \r\n      state.txtName, \r\n      state.txtImageURL, \r\n      state.txtColor, \r\n      state.txtInfo, \r\n      state.txtQuantity\r\n      )\r\n\r\n      console.log(items.ids.length);\r\n  }\r\n\r\n  const handleMarket = (e) => {\r\n    e.preventDefault();\r\n    history.push(\"/market\");\r\n  }\r\n\r\n  return (\r\n    <div className=\"grid-center\">\r\n      <h1>{user.addr}</h1>\r\n      <h1>Publish a NFT</h1>\r\n      <form>\r\n        <div className=\"grid-container\">\r\n          <label htmlFor=\"txtName\">Name</label> \r\n          <input name=\"txtName\" id=\"txtName\" onChange={handleChange} />\r\n          <label htmlFor=\"txtAddress\">Address</label> \r\n          <input name=\"txtAddress\" id=\"txtAddress\" onChange={handleChange} />\r\n          <label>Image URL</label> \r\n          <input name=\"txtImageURL\" id=\"txtImageURL\" onChange={handleChange} />\r\n          <label>Color</label> \r\n          <input name=\"txtColor\" id=\"txtColor\" onChange={handleChange} />\r\n          <label>Info</label> \r\n          <input name=\"txtInfo\" id=\"txtInfo\" onChange={handleChange} />\r\n          {1 == 0 && <><label>Quantity</label> \r\n          <input name=\"txtQuantity\" id=\"txtQuantity\" onChange={handleChange} />\r\n          </>}\r\n          <label>Series</label> \r\n          <input name=\"txtSeries\" id=\"txtSeries\" onChange={handleChange} />\r\n          <button disabled={user.addr !== state.txtAddress} onClick={handleInit}>\r\n            Initialize\r\n          </button>\r\n          <button disabled={items.status !== IDLE} onClick={handleSubmit}>\r\n            Send\r\n          </button>\r\n          <button onClick={handleView}>View List</button>\r\n          <button onClick={handleMarket}>View Marketplace</button>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  )\r\n}\r\n","// TODO: MOVE TO @onflow/util-batch\r\nimport {spawn, send, INIT} from \"@onflow/util-actor\"\r\nimport {uid} from \"@onflow/util-uid\"\r\n\r\nconst TICK = 500\r\nconst BUFFER_SIZE = 10\r\n\r\nconst SET_CALLBACK = \"SET_CALLBACK\"\r\nconst PROCESS = \"PROCESS\"\r\nconst MAYBE_PROCESS = \"MAYBE_PROCESS\"\r\nconst TIMEOUT = \"TIMEOUT\"\r\nconst ENQUEUE = \"ENQUEUE\"\r\nconst RESOLVE = \"RESOLVE\"\r\n\r\nconst HANDLERS = {\r\n  [INIT]: ctx => {\r\n    ctx.put(\"need\", new Set())\r\n    ctx.put(\"processing\", new Set())\r\n    ctx.put(\"hold\", {})\r\n    setInterval(() => ctx.sendSelf(TIMEOUT), TICK)\r\n  },\r\n\r\n  [SET_CALLBACK]: (ctx, letter, callback) => {\r\n    ctx.put(\"callback\", async (...args) => callback(...args))\r\n    ctx.sendSelf(MAYBE_PROCESS)\r\n  },\r\n\r\n  [ENQUEUE]: (ctx, letter, args) => {\r\n    const id = uid()\r\n    const hold = {id, args, reply: letter.reply}\r\n    ctx.update(\"need\", n => {\r\n      n.add(id)\r\n      return n\r\n    })\r\n    ctx.update(\"hold\", h => ({...h, [id]: hold}))\r\n    ctx.sendSelf(MAYBE_PROCESS)\r\n  },\r\n\r\n  [TIMEOUT]: ctx => {\r\n    if (ctx.get(\"need\").size) ctx.sendSelf(PROCESS)\r\n  },\r\n\r\n  [MAYBE_PROCESS]: ctx => {\r\n    if (ctx.get(\"need\") >= BUFFER_SIZE) ctx.sendSelf(PROCESS)\r\n  },\r\n\r\n  [PROCESS]: ctx => {\r\n    const callback = ctx.get(\"callback\")\r\n    if (typeof callback !== \"function\") return\r\n\r\n    const need = ctx.get(\"need\")\r\n    ctx.update(\"processing\", p => new Set([...p, ...need]))\r\n    ctx.put(\"need\", new Set())\r\n\r\n    const hold = ctx.get(\"hold\")\r\n    const payload = [...need].reduce(\r\n      (acc, key) => ({...acc, [key]: hold[key].args}),\r\n      {}\r\n    )\r\n\r\n    callback(payload).then(result => {\r\n      ctx.sendSelf(RESOLVE, result)\r\n    })\r\n  },\r\n  [RESOLVE]: (ctx, _, results) => {\r\n    const have = Object.keys(results)\r\n    for (let h of have) {\r\n      const hold = ctx.get(\"hold\")\r\n      hold[h].reply(results[h])\r\n      ctx.update(\"processing\", p => {\r\n        p.delete(h)\r\n        return p\r\n      })\r\n      ctx.update(\"hold\", hold => {\r\n        delete hold[h]\r\n        return hold\r\n      })\r\n    }\r\n  },\r\n}\r\n\r\nexport const batch = (name, callback) => {\r\n  spawn(HANDLERS, name)\r\n  send(name, SET_CALLBACK, callback)\r\n\r\n  return {\r\n    enqueue(...args) {\r\n      return send(name, ENQUEUE, args, {expectReply: true, timeout: 0})\r\n    },\r\n  }\r\n}\r\n","import * as fcl from \"@onflow/fcl\"\r\nimport * as t from \"@onflow/types\"\r\nimport {batch} from \"./util/batch\"\r\n\r\nconst CODE = fcl.cdc`\r\nimport NonFungibleToken from 0xNonFungibleToken\r\nimport HandyItems from 0xHandyItems\r\n\r\npub struct AccountItem {\r\n  pub let itemID: UInt64\r\n  pub let setID: UInt32\r\n  pub let serialID: UInt32\r\n  pub let owner: Address\r\n\r\n  init(itemID: UInt64, setID: UInt32, serialID: UInt32, owner: Address) {\r\n    self.itemID = itemID\r\n    self.setID = setID\r\n    self.serialID = serialID\r\n    self.owner = owner\r\n  }\r\n}\r\n\r\npub struct NftItem {\r\n  pub let series: HandyItems.QuerySeriesData\r\n  pub let edition: HandyItems.QueryEditionData\r\n  pub let set: HandyItems.QuerySetData\r\n  pub let item: AccountItem\r\n\r\n  init(series: HandyItems.QuerySeriesData, edition: HandyItems.QueryEditionData, \r\n    set: HandyItems.QuerySetData, item: AccountItem) {\r\n\r\n    self.series = series\r\n    self.edition = edition\r\n    self.set = set\r\n    self.item = item\r\n  }\r\n}\r\n\r\npub fun fetch(address: Address, id: UInt64): AccountItem? {\r\n  if let col = getAccount(address).getCapability<&HandyItems.Collection{NonFungibleToken.CollectionPublic, HandyItems.HandyItemsCollectionPublic}>(HandyItems.CollectionPublicPath).borrow() {\r\n    if let item = col.borrowHandyItem(id: id) {\r\n      return AccountItem(itemID: id, setID: item.setID, serialID: item.serialID, owner: address)\r\n    }\r\n  }\r\n\r\n  return nil\r\n}\r\n\r\npub fun main(keys: [String], addresses: [Address], ids: [UInt64]): {String: NftItem?} {\r\n  let r: {String: NftItem?} = {}\r\n  var i = 0\r\n\r\n  while i < keys.length {\r\n    let key = keys[i]\r\n    let address = addresses[i]\r\n    let id = ids[i]\r\n\r\n    let rkey = fetch(address: address, id: id)\r\n    let set = HandyItems.getSetData(setID: rkey!.setID)\r\n    let series = HandyItems.getSeriesData(series: set!.seriesID)\r\n    let edition = HandyItems.getEditionData(id: set!.editionID)\r\n\r\n    r[key] = NftItem(series: series!, edition: edition!, set: set!, item: rkey!);\r\n    i = i + 1\r\n  }\r\n  return r\r\n}\r\n`\r\n\r\nconst collate = px => {\r\n  return Object.keys(px).reduce(\r\n    (acc, key) => {\r\n      acc.keys.push(key)\r\n      acc.addresses.push(px[key][0])\r\n      acc.ids.push(px[key][1])\r\n      return acc\r\n    },\r\n    {keys: [], addresses: [], ids: []}\r\n  )\r\n}\r\n\r\nconst {enqueue} = batch(\"FETCH_ACCOUNT_ITEM\", async px => {\r\n  const {keys, addresses, ids} = collate(px)\r\n\r\n  return fcl\r\n    .send([\r\n      fcl.script(CODE),\r\n      fcl.args([\r\n        fcl.arg(keys, t.Array(t.String)),\r\n        fcl.arg(addresses, t.Array(t.Address)),\r\n        fcl.arg(ids.map(Number), t.Array(t.UInt64)),\r\n      ]),\r\n    ])\r\n    .then(fcl.decode)\r\n})\r\n\r\nexport async function fetchAccountItem(address, id) {\r\n  if (address == null || address === \"\") return Promise.resolve(null)\r\n  if (id == null) return Promise.resolve(null)\r\n  return enqueue(address, id)\r\n}\r\n","import * as fcl from \"@onflow/fcl\"\r\nimport * as t from \"@onflow/types\"\r\nimport {tx} from \"./util/tx\"\r\n\r\nconst CODE = fcl.cdc`\r\n  import FungibleToken from 0xFungibleToken\r\n  import NonFungibleToken from 0xNonFungibleToken\r\n  import FlowToken from 0xFlowToken \r\n  import HandyItems from 0xHandyItems\r\n  import NFTStorefront from 0xNFTStorefront\r\n\r\n  transaction(saleItemID: UInt64, saleItemPrice: UFix64) {\r\n\r\n    let flowReceiver: Capability<&FlowToken.Vault{FungibleToken.Receiver}>\r\n    let handyItemsCollection: Capability<&HandyItems.Collection{NonFungibleToken.Provider, NonFungibleToken.CollectionPublic}>\r\n    let storefront: &NFTStorefront.Storefront\r\n\r\n    prepare(account: AuthAccount) {\r\n      // We need a provider capability, but one is not provided by default so we create one if needed.\r\n      let handyItemsCollectionProviderPrivatePath = /private/handyItemsCollectionProvider\r\n\r\n      self.flowReceiver = account.getCapability<&FlowToken.Vault{FungibleToken.Receiver}>(/public/flowTokenReceiver)!\r\n\r\n      assert(self.flowReceiver.borrow() != nil, message: \"Missing or mis-typed FlowToken receiver\")\r\n\r\n      if !account.getCapability<&HandyItems.Collection{NonFungibleToken.Provider, NonFungibleToken.CollectionPublic}>(handyItemsCollectionProviderPrivatePath)!.check() {\r\n        account.link<&HandyItems.Collection{NonFungibleToken.Provider, NonFungibleToken.CollectionPublic}>(handyItemsCollectionProviderPrivatePath, target: HandyItems.CollectionStoragePath)\r\n      }\r\n\r\n      self.handyItemsCollection = account.getCapability<&HandyItems.Collection{NonFungibleToken.Provider, NonFungibleToken.CollectionPublic}>(handyItemsCollectionProviderPrivatePath)!\r\n      assert(self.handyItemsCollection.borrow() != nil, message: \"Missing or mis-typed HandyItemsCollection provider\")\r\n      \r\n      self.storefront = account.borrow<&NFTStorefront.Storefront>(from: NFTStorefront.StorefrontStoragePath)\r\n        ?? panic(\"Missing or mis-typed NFTStorefront Storefront\")\r\n    }\r\n\r\n    execute {\r\n      let saleCut = NFTStorefront.SaleCut(\r\n        receiver: self.flowReceiver,\r\n        amount: saleItemPrice\r\n      )\r\n\r\n      self.storefront.createSaleOffer(\r\n        nftProviderCapability: self.handyItemsCollection,\r\n        nftType: Type<@HandyItems.NFT>(),\r\n        nftID: saleItemID,\r\n        salePaymentVaultType: Type<@FlowToken.Vault>(),\r\n        saleCuts: [saleCut]\r\n      )\r\n    }\r\n  }\r\n\r\n`\r\n\r\nexport function createSaleOffer({itemID, price}, opts = {}) {\r\n  if (itemID == null)\r\n    throw new Error(\"createSaleOffer(itemID, price) -- itemID required\")\r\n  if (price == null)\r\n    throw new Error(\"createSaleOffer(itemID, price) -- price required\")\r\n\r\n  // prettier-ignore\r\n  return tx([\r\n    fcl.transaction(CODE),\r\n    fcl.args([\r\n      fcl.arg(Number(itemID), t.UInt64),\r\n      fcl.arg(String(price), t.UFix64),\r\n    ]),\r\n    fcl.proposer(fcl.authz),\r\n    fcl.payer(fcl.authz),\r\n    fcl.authorizations([\r\n      fcl.authz\r\n    ]),\r\n    fcl.limit(1000)\r\n  ], opts)\r\n}\r\n","import {sansPrefix} from \"@onflow/fcl\"\r\nimport {atomFamily, selectorFamily, useRecoilState} from \"recoil\"\r\nimport {useCurrentUser} from \"../hooks/use-current-user.hook\"\r\nimport {fetchAccountItem} from \"../flow/script.get-account-item\"\r\nimport {createSaleOffer} from \"../flow/tx.create-sale-offer\"\r\nimport {IDLE, PROCESSING} from \"../global/constants\"\r\nimport {useAccountItems} from \"../hooks/use-account-items.hook\"\r\n\r\nfunction expand(key) {\r\n  return key.split(\"|\")\r\n}\r\n\r\nfunction comp(address, id) {\r\n  return [address, id].join(\"|\")\r\n}\r\n\r\nexport const $state = atomFamily({\r\n  key: \"account-item::state\",\r\n  default: selectorFamily({\r\n    key: \"account-item::default\",\r\n    get: key => async () => fetchAccountItem(...expand(key)),\r\n  }),\r\n})\r\n\r\nexport const $status = atomFamily({\r\n  key: \"account-item::status\",\r\n  default: IDLE,\r\n})\r\n\r\nexport function useAccountItem(address, id) {\r\n  const [cu] = useCurrentUser()\r\n  const accountItems = useAccountItems(address)\r\n  const key = comp(address, id)\r\n  const [item, setItem] = useRecoilState($state(key))\r\n  const [status, setStatus] = useRecoilState($status(key))\r\n\r\n  return {\r\n    ...item,\r\n    status,\r\n    owned: sansPrefix(cu.addr) === sansPrefix(address),\r\n    async refresh() {\r\n      setStatus(PROCESSING)\r\n      await fetchAccountItem(...expand(key)).then(setItem)\r\n      setStatus(IDLE)\r\n    },\r\n    async sell(price) {\r\n      await createSaleOffer(\r\n        {itemID: id, price: price},\r\n        {\r\n          onStart() {\r\n            setStatus(PROCESSING)\r\n          },\r\n          async onSuccess() {\r\n            accountItems.refresh()\r\n          },\r\n          async onComplete() {\r\n            setStatus(IDLE)\r\n          },\r\n          async onError(error) {\r\n            \r\n          },\r\n        }\r\n      )\r\n    },\r\n  }\r\n}\r\n","import React, {useEffect, useState, Suspense} from \"react\"\r\nimport {useAccountItem} from \"../hooks/use-account-item.hook\"\r\nimport {useCurrentUser} from \"../hooks/use-current-user.hook\"\r\nimport {IDLE} from \"../global/constants\"\r\n\r\nexport function AccountItemCluster({address, id}) {\r\n  const item = useAccountItem(address, id)\r\n\r\n  const BUSY = item.status !== IDLE\r\n\r\n  if (address == null) return null\r\n  if (id == null) return null\r\n\r\n  return (\r\n    <div className=\"grid-list\">\r\n      <h3>Handy#{item.itemID}</h3>\r\n\r\n      <p>{item.name}</p>\r\n      <p>{item.tokenURI}</p>\r\n      <p>{item.color}</p>\r\n      <p>{item.info}</p>\r\n      <button \r\n        onClick={() => item.sell(\"5.0\")}\r\n      >\r\n        Sell\r\n      </button>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default function WrappedAccountItemCluster(props) {\r\n  return (\r\n    <Suspense fallback={null}>\r\n      <AccountItemCluster {...props} />\r\n    </Suspense>\r\n  )\r\n}\r\n","import {Suspense} from \"react\"\r\nimport {useAccountItems} from \"../hooks/use-account-items.hook\"\r\nimport {useCurrentUser} from \"../hooks/use-current-user.hook\"\r\nimport Item from \"./account-item\"\r\n\r\nexport function AccountItemsCluster({address}) {\r\n  const items = useAccountItems(address)\r\n  const [cu] = useCurrentUser()\r\n\r\n  if (address == null) return null\r\n\r\n  if (items.ids.length <= 0)\r\n    return (\r\n      <p>No Items</p>\r\n    )\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"grid-list\">\r\n        <h2>ID</h2>\r\n        <h2>Name</h2>\r\n        <h2>Image URL</h2>\r\n        <h2>Color</h2>\r\n        <h2>Info</h2>\r\n      </div>\r\n      {items.ids.map(id => (\r\n        <Item key={id} id={id} address={address} />\r\n      ))}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default function WrappedAccountItemsCluster({address}) {\r\n  return (\r\n    <Suspense fallback={null}>\r\n      <AccountItemsCluster address={address} />\r\n    </Suspense>\r\n  )\r\n}\r\n","\r\nimport {IDLE} from \"../global/constants\"\r\nimport {useCurrentUser} from \"../hooks/use-current-user.hook\"\r\nimport {useAccountItems} from \"../hooks/use-account-items.hook\"\r\nimport {Suspense, useState} from \"react\"\r\nimport {Redirect, useHistory} from \"react-router-dom\"\r\nimport AccountItemsCluster from '../comps/account-items'\r\n\r\nimport './list.css'\r\n\r\nexport function Page() {\r\n  const [state, setState] = useState({\r\n    txtAddress: \"\"\r\n  })\r\n  const [address, setAddress] = useState(\"\");\r\n  const [count, setCount] = useState(0);\r\n  const history = useHistory();\r\n  const [user] = useCurrentUser()\r\n\r\n  // if (user.addr == null) return <Redirect to={\"/\"} />\r\n\r\n  const handleChange = (e) => {\r\n    setState({\r\n      ...state,\r\n      [e.target.name]: e.target.value,\r\n    })\r\n  }\r\n\r\n  const handleList = (e) => {\r\n\r\n    if (state.txtAddress.length != 18) {\r\n      alert(\"Enter Address Corretly!\");\r\n      return;\r\n    }\r\n\r\n    setAddress(state.txtAddress);\r\n    setCount(1 - count);\r\n  }\r\n\r\n  const handleMint = (e) => {\r\n    e.preventDefault();\r\n    history.push(\"/publish\");\r\n  }\r\n\r\n  const handleMarket = (e) => {\r\n    e.preventDefault();\r\n    history.push(\"/market\");\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h1>NFT Listings</h1>\r\n\t    <div>\r\n        <label>Address: </label>\r\n        <input name=\"txtAddress\" id=\"txtAddress\" onChange={handleChange}/>&nbsp;\r\n        <button onClick={handleList}>List NFTs</button>\r\n        &nbsp;<button onClick={handleMint}>Mint an NFT</button>\r\n        &nbsp;<button onClick={handleMarket}>View Marketplace</button>\r\n        {\r\n          address != \"\" && <AccountItemsCluster address={address} />\r\n        }\r\n\t    </div>\r\n    </div>\r\n  )\r\n}\r\n","import {send, decode, script, args, arg, cdc} from \"@onflow/fcl\"\r\nimport {Address} from \"@onflow/types\"\r\n\r\nconst CODE = cdc`\r\nimport NFTStorefront from 0xNFTStorefront\r\n\r\npub fun main(account: Address): [UInt64] {\r\n    let storefrontRef = getAccount(account)\r\n        .getCapability<&NFTStorefront.Storefront{NFTStorefront.StorefrontPublic}>(\r\n            NFTStorefront.StorefrontPublicPath\r\n        )\r\n        .borrow()\r\n        ?? panic(\"Could not borrow public storefront from address\")\r\n    \r\n    return storefrontRef.getSaleOfferIDs()\r\n}\r\n`\r\n\r\nexport function getMarketItems(address) {\r\n  if (address == null || address == \"\")\r\n    return Promise.resolve([])\r\n\r\n  // prettier-ignore\r\n  return send([\r\n    script(CODE),\r\n    args([\r\n      arg(address, Address)\r\n    ])\r\n  ]).then(decode).then(d => d.sort((a, b) => a - b))\r\n}","import { useEffect } from \"react\";\r\nimport { atom, useRecoilState } from \"recoil\"\r\nimport { getMarketItems } from \"../flow/sc.get-market-items\";\r\nimport {IDLE, PROCESSING} from \"../global/constants\"\r\n\r\nexport const $marketItemsState = atom({\r\n  key: \"market-items::state\",\r\n  default: [],\r\n})\r\n\r\nexport const $marketItemsStatus = atom({\r\n  key: \"market-items::status\",\r\n  default: IDLE,\r\n})\r\n\r\nexport function useMarketItems(address) {\r\n  const [items, setItems] = useRecoilState($marketItemsState);\r\n  const [status, setStatus] = useRecoilState($marketItemsStatus);\r\n\r\n  useEffect(() => {\r\n    getMarketItems(address).then(setItems);\r\n  }, [address]);\r\n\r\n  return {\r\n    items,\r\n    status,\r\n    refresh() {\r\n      getMarketItems(address).then(setItems);\r\n    }\r\n  }\r\n}","import { send, script, args, arg, decode } from \"@onflow/fcl\"\r\nimport { Address, UInt64 } from \"@onflow/types\"\r\n\r\nexport async function getMarketItem(address, id) {\r\n  return send([\r\n      script`\r\n        import HandyItems from 0xHandyItems\r\n        import NonFungibleToken from 0xNonFungibleToken\r\n        import NFTStorefront from 0xNFTStorefront\r\n\r\n        pub struct SaleItem {\r\n          pub let itemID: UInt64\r\n          pub let name: String\r\n          pub let tokenURI: String\r\n          pub let color: String\r\n          pub let info: String\r\n          pub let owner: Address\r\n          pub let price: UFix64\r\n\r\n          init(itemID: UInt64, name: String, tokenURI: String, color: String,info: String, owner: Address, price: UFix64) {\r\n            self.itemID = itemID\r\n            self.name = name\r\n            self.tokenURI = tokenURI\r\n            self.color = color\r\n            self.info = info\r\n            self.owner = owner\r\n            self.price = price\r\n          }\r\n        }\r\n\r\n        pub fun main(address: Address, saleOfferResourceID: UInt64): SaleItem? {\r\n          let account = getAccount(address)\r\n\r\n          if let storefrontRef = account.getCapability<&NFTStorefront.Storefront{NFTStorefront.StorefrontPublic}>(NFTStorefront.StorefrontPublicPath).borrow() {\r\n            if let saleOffer = storefrontRef.borrowSaleOffer(saleOfferResourceID: saleOfferResourceID) {\r\n              let details = saleOffer.getDetails()\r\n\r\n              let itemID = details.nftID\r\n              let itemPrice = details.salePrice\r\n\r\n              if let collection = account.getCapability<&HandyItems.Collection{NonFungibleToken.CollectionPublic, HandyItems.HandyItemsCollectionPublic}>(HandyItems.CollectionPublicPath).borrow() {\r\n                if let item = collection.borrowHandyItem(id: itemID) {\r\n                  return SaleItem(itemID: itemID, name: item.name, tokenURI: item.tokenURI, \r\n                    color: item.color, info: item.info, owner: address, price: itemPrice)\r\n                }\r\n              }\r\n            }\r\n          }\r\n            \r\n          return nil\r\n        }\r\n    `,\r\n      args([arg(address, Address), arg(Number(id), UInt64)]),\r\n    ])\r\n    .then(decode)\r\n}\r\n","import * as fcl from \"@onflow/fcl\"\r\nimport * as t from \"@onflow/types\"\r\nimport {tx} from \"./util/tx\"\r\nimport {invariant} from \"@onflow/util-invariant\"\r\n\r\nconst CODE = fcl.cdc`\r\n  import FungibleToken from 0xFungibleToken\r\n  import NonFungibleToken from 0xNonFungibleToken\r\n  import FlowToken from 0xFlowToken\r\n  import HandyItems from 0xHandyItems\r\n  import NFTStorefront from 0xNFTStorefront\r\n\r\n  transaction(saleOfferResourceID: UInt64, storefrontAddress: Address) {\r\n\r\n    let paymentVault: @FungibleToken.Vault\r\n    let handyItemsCollection: &HandyItems.Collection{NonFungibleToken.Receiver}\r\n    let storefront: &NFTStorefront.Storefront{NFTStorefront.StorefrontPublic}\r\n    let saleOffer: &NFTStorefront.SaleOffer{NFTStorefront.SaleOfferPublic}\r\n\r\n    prepare(account: AuthAccount) {\r\n      self.storefront = getAccount(storefrontAddress)\r\n        .getCapability<&NFTStorefront.Storefront{NFTStorefront.StorefrontPublic}>(\r\n          NFTStorefront.StorefrontPublicPath\r\n        )!\r\n        .borrow()\r\n        ?? panic(\"Could not borrow Storefront from provided address\")\r\n\r\n      self.saleOffer = self.storefront.borrowSaleOffer(saleOfferResourceID: saleOfferResourceID)\r\n        ?? panic(\"No Offer with that ID in Storefront\")\r\n      \r\n      let price = self.saleOffer.getDetails().salePrice\r\n\r\n      let mainFlowVault = account.borrow<&FlowToken.Vault>(from: /storage/flowTokenVault)\r\n        ?? panic(\"Cannot borrow Kibble vault from account storage\")\r\n      \r\n      self.paymentVault <- mainFlowVault.withdraw(amount: price)\r\n\r\n      self.handyItemsCollection = account.borrow<&HandyItems.Collection{NonFungibleToken.Receiver}>(\r\n        from: HandyItems.CollectionStoragePath\r\n      ) ?? panic(\"Cannot borrow HandyItems collection receiver from account\")\r\n    }\r\n  \r\n    execute {\r\n      let item <- self.saleOffer.accept(\r\n        payment: <-self.paymentVault\r\n      )\r\n\r\n      self.handyItemsCollection.deposit(token: <-item)\r\n\r\n      self.storefront.cleanup(saleOfferResourceID: saleOfferResourceID)\r\n    }\r\n  }\r\n`\r\n\r\n// prettier-ignore\r\nexport function buyMarketItem({itemID, ownerAddress}, opts = {}) {\r\n  invariant(itemID != null, \"buyMarketItem({itemID, ownerAddress}) -- itemID required\")\r\n  invariant(ownerAddress != null, \"buyMarketItem({itemID, ownerAddress}) -- ownerAddress required\")\r\n\r\n  return tx([\r\n    fcl.transaction(CODE),\r\n    fcl.args([\r\n      fcl.arg(Number(itemID), t.UInt64),\r\n      fcl.arg(String(ownerAddress), t.Address),\r\n    ]),\r\n    fcl.proposer(fcl.authz),\r\n    fcl.payer(fcl.authz),\r\n    fcl.authorizations([fcl.authz]),\r\n    fcl.limit(1000),\r\n  ], opts)\r\n}\r\n","import { useEffect, useState } from \"react\";\r\nimport { getMarketItem } from \"../flow/sc.get-market-item\";\r\nimport { buyMarketItem } from \"../flow/tx.buy-market-item\"\r\n\r\nexport function useMarketItem(address, id) {\r\n  const [item, setItem] = useState({});\r\n\r\n  console.log(item.price);\r\n\r\n  useEffect(() => {\r\n      getMarketItem(address, id).then(setItem);\r\n  }, [address, id]);\r\n\r\n  return {\r\n    ...item,\r\n    async buy() {\r\n      await buyMarketItem(\r\n        {itemID: id, ownerAddress: address},\r\n        {\r\n          onStart() {\r\n          },\r\n          async onSuccess() {\r\n          },\r\n          async onComplete() {\r\n          },\r\n          async onError(error) {\r\n          },\r\n        }\r\n      )\r\n    },\r\n  }\r\n}","import {Suspense} from \"react\"\r\nimport {useMarketItem} from \"../hooks/use-market-item.hook\"\r\nimport {useCurrentUser} from \"../hooks/use-current-user.hook\"\r\nimport {IDLE} from \"../global/constants\"\r\n\r\nexport function MarketItemCluster({address, id}) {\r\n  const [cu, loggedIn] = useCurrentUser()\r\n  const item = useMarketItem(address, id)\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"grid-list\">\r\n        <h3>Handy#{item.itemID}</h3>\r\n\r\n        <p>{item.name}</p>\r\n        <p>{item.tokenURI}</p>\r\n        <p>{item.color}</p>\r\n        <p>{item.info}</p>\r\n        <button \r\n          onClick={() => item.buy()}\r\n        >\r\n          Buy\r\n        </button>\r\n     </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default function WrappedMarketItemCluster(props) {\r\n  return (\r\n    <Suspense fallback={null}>\r\n      <MarketItemCluster {...props} />\r\n    </Suspense>\r\n  )\r\n}\r\n","import {Suspense} from \"react\"\r\nimport {useMarketItems} from \"../hooks/use-market-items.hook\"\r\nimport Item from './market-item'\r\n\r\nexport function MarketItemsCluster() {\r\n  const {items} = useMarketItems(\"0x048ac6df55e9c6e6\");\r\n\r\n  if (items.length == 0)\r\n    return (\r\n      <p>No items listed for sale</p>\r\n    )\r\n\r\n  return (\r\n    <div>\r\n      <h1>NFT Marketplace</h1>\r\n      <div className=\"grid-list\">\r\n        <h2>ID</h2>\r\n        <h2>Name</h2>\r\n        <h2>Image URL</h2>\r\n        <h2>Color</h2>\r\n        <h2>Info</h2>\r\n      </div>\r\n      {items.map(item => \r\n          <Item\r\n            key={item}\r\n            id={item}\r\n            address={\"0x048ac6df55e9c6e6\"}\r\n          />\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default function WrappedMarketItemsCluster() {\r\n  return (\r\n    <Suspense fallback={null}>\r\n      <MarketItemsCluster />\r\n    </Suspense>\r\n  )\r\n}","\r\nimport {useCurrentUser} from \"../hooks/use-current-user.hook\"\r\nimport {Suspense, useState} from \"react\"\r\nimport {Redirect, useHistory} from \"react-router-dom\"\r\nimport MarketItems from \"../comps/market-items\"\r\n\r\nexport function Page() {\r\n  const history = useHistory();\r\n  const [user] = useCurrentUser()\r\n\r\n  // if (user.addr == null) return <Redirect to={\"/\"} />\r\n\r\n  return (\r\n    <div>\r\n      <h1>\r\n        {user.addr}\r\n      </h1>\r\n      <MarketItems />\r\n    </div>\r\n  )\r\n}\r\n","import React from \"react\"\r\n\r\nexport function SideBar() {\r\n\r\n  return (\r\n    <div className=\"f3-left\">\r\n      <h2>Mint Panel</h2>\r\n      <ul>\r\n        <li>\r\n          <a href=\"/mintpanel/collections\">Series</a>\r\n        </li>\r\n        <li>\r\n          <a href=\"/mintpanel/mintnft\">Mint NFTs</a>\r\n        </li>\r\n        <li>\r\n          <a href=\"/mintpanel/assets\">Assets</a>\r\n        </li>\r\n        <li>\r\n          <a href=\"/mintpanel/settings\">Settings</a>\r\n        </li>\r\n      </ul>\r\n    </div>\r\n  )\r\n}","\r\nimport {useEffect, useRef} from \"react\"\r\nimport {IDLE} from \"../../global/constants\"\r\nimport {useCurrentUser} from \"../../hooks/use-current-user.hook\"\r\nimport {useAccountItems} from \"../../hooks/use-account-items.hook\"\r\nimport {Suspense, useState} from \"react\"\r\nimport {Redirect, useHistory} from \"react-router-dom\"\r\nimport AccountItemsCluster from '../../comps/account-items'\r\n\r\nimport { SideBar } from \"./sidebar\"\r\nimport axios from \"axios\";\r\nimport fs from \"fs\";\r\n\r\nimport \"./index.css\"\r\n\r\nconst PINATA_API_KEY = \"8b0d90ef4bf74827eb88\";\r\nconst PINATA_SECRET_API_KEY = \"609ec3e0c1641f4b41c0c6370eed55e108cea9f9396b9e5a1d123061de07b99b\";\r\n\r\nexport const pinJSONToIPFS = (pinataApiKey, pinataSecretApiKey, JSONBody) => {\r\n    const url = `https://api.pinata.cloud/pinning/pinJSONToIPFS`;\r\n    return axios\r\n        .post(url, JSONBody, {\r\n            headers: {\r\n                pinata_api_key: pinataApiKey,\r\n                pinata_secret_api_key: pinataSecretApiKey\r\n            }\r\n        })\r\n        .then(function (response) {\r\n            \r\n        })\r\n        .catch(function (error) {\r\n            \r\n        });\r\n};\r\n\r\nexport const pinFileToIPFS = async (pinataApiKey, pinataSecretApiKey, imgData) => {\r\n  const url = `https://api.pinata.cloud/pinning/pinFileToIPFS`;\r\n  \r\n  console.log(imgData);\r\n\r\n  let data = new FormData();\r\n  data.append('file', imgData.obj.files[0]);\r\n  \r\n  const metadata = JSON.stringify({\r\n      name: imgData.name,\r\n      keyvalues: {\r\n        name: imgData.name\r\n      }\r\n  });\r\n  data.append('pinataMetadata', metadata);\r\n  \r\n  const pinataOptions = JSON.stringify({\r\n      cidVersion: 0,\r\n      customPinPolicy: {\r\n          regions: [\r\n              {\r\n                  id: 'FRA1',\r\n                  desiredReplicationCount: 1\r\n              },\r\n              {\r\n                  id: 'NYC1',\r\n                  desiredReplicationCount: 2\r\n              }\r\n          ]\r\n      }\r\n  });\r\n  data.append('pinataOptions', pinataOptions);\r\n\r\n  return axios\r\n      .post(url, data, {\r\n          maxBodyLength: 'Infinity',\r\n          headers: {\r\n              'Content-Type': `multipart/form-data; boundary=${data._boundary}`,\r\n              pinata_api_key: pinataApiKey,\r\n              pinata_secret_api_key: pinataSecretApiKey\r\n          }\r\n      })\r\n      .then(function (response) {\r\n          axios.post(process.env.REACT_APP_API_URL + \"/v1/assets/upload\", {\r\n            name: imgData.name,\r\n            path: \"https://cloudflare-ipfs.com/ipfs/\" + response.data.IpfsHash\r\n          })\r\n      })\r\n      .catch(function (error) {\r\n          //handle error here\r\n      });\r\n};\r\n\r\nexport function Assets() {\r\n  const [state, setState] = useState({\r\n    inFile: \"\",\r\n    inName: \"\"\r\n  })\r\n  const [asList, setList] = useState([]);\r\n  const [isDirty, setDirty] = useState(true);\r\n  const inputFile = useRef(null);\r\n\r\n  useEffect(async () => {\r\n    if (!isDirty) return;\r\n\r\n    const assetList = await axios.get(process.env.REACT_APP_API_URL + \"/v1/assets/list\");\r\n    if (assetList.data.success != \"true\") return;\r\n\r\n    setDirty(false);\r\n    setList(assetList.data.result);\r\n  }, [isDirty])\r\n\r\n  const handleUpload = async (e) => {\r\n    e.preventDefault();\r\n\r\n    console.log(inputFile);\r\n\r\n    if (state.inFile.length == 0) return;\r\n\r\n    await pinFileToIPFS(\r\n      PINATA_API_KEY, \r\n      PINATA_SECRET_API_KEY, {\r\n        name: state.inName,\r\n        path: state.inFile,\r\n        obj: inputFile.current\r\n      });\r\n    setDirty(true);\r\n  }\r\n\r\n  const handleChange = (e) => {\r\n    setState({\r\n      ...state, \r\n      [e.target.name]: e.target.value\r\n    })\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <div style={{paddingLeft: \"20px\"}}>\r\n        <div>\r\n          <h3>::Assets</h3>\r\n        </div>\r\n        <div className=\"f3-panel-layout f3-asset\">\r\n          <div>\r\n            <label>Name</label>\r\n          </div>\r\n          <div>\r\n            <input id=\"inName\" name=\"inName\" value={state.inName} onChange={handleChange} />\r\n          </div>\r\n          <div></div>\r\n          <div>\r\n            <label>Browse for file: &nbsp;</label>\r\n          </div>\r\n          <div>\r\n            <input type=\"file\" id=\"inFile\" name=\"inFile\" value={state.inFile} onChange={handleChange} ref={inputFile}/>\r\n          </div>\r\n          <div>\r\n            <button id=\"\" onClick={handleUpload}>UPLOAD</button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className=\"hline\" />\r\n      <div style={{paddingLeft: \"20px\"}}>\r\n        <div>\r\n          <h3>Current Assets</h3>\r\n          {\r\n            asList.map(item => (\r\n              <div className=\"f3-current-asset\">\r\n                <div>\r\n                  <img \r\n                    src={item.img_url}\r\n                    width=\"78px\"\r\n                    height=\"49px\"\r\n                  />\r\n                </div>\r\n                <div>\r\n                  <div>\r\n                    <span>{item.name}</span>\r\n                  </div>\r\n                  <div>\r\n                    <a href={item.img_url} target=\"_blank\">{item.img_url}</a>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            ))\r\n          }\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n\r\n}\r\n\r\nexport function Page() {\r\n  return (\r\n    <div>\r\n      <SideBar />\r\n      <div className=\"f3-main\">\r\n        <Assets />\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n","import {send, decode, script, args, arg, cdc} from \"@onflow/fcl\"\r\nimport {Address, UInt32} from \"@onflow/types\"\r\n\r\nconst CODE = cdc`\r\nimport NFTStorefront from 0xNFTStorefront\r\nimport HandyItems from 0xHandyItems\r\n\r\npub fun main(series: UInt32): {UInt32: HandyItems.QueryEditionData} {\r\n  return HandyItems.getEditions(series: series)\r\n}\r\n`\r\n\r\nexport function getEditionList(series) {\r\n  // prettier-ignore\r\n  return send([\r\n    script(CODE),\r\n    args([arg(Number(series), UInt32)])\r\n  ]).then(decode)\r\n}","import {send, decode, script, args, arg, cdc} from \"@onflow/fcl\"\r\nimport {Address} from \"@onflow/types\"\r\n\r\nconst CODE = cdc`\r\nimport NFTStorefront from 0xNFTStorefront\r\nimport HandyItems from 0xHandyItems\r\n\r\npub fun main(): {UInt32: HandyItems.QuerySeriesData} {\r\n  return HandyItems.getSeries()\r\n}\r\n`\r\n\r\nexport function getSeriesList() {\r\n  // prettier-ignore\r\n  return send([\r\n    script(CODE),\r\n    args()\r\n  ]).then(decode)\r\n}","import { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nimport { getSeriesList } from \"../flow/sc.get-series-list\";\r\n\r\nexport function useSeriesList() {\r\n  const [items, setItems] = useState({});\r\n\r\n  useEffect(async () => {\r\n    const series = await getSeriesList();\r\n\r\n    console.log(series);\r\n\r\n    for (const prop in series)\r\n      console.log(series[prop]);\r\n\r\n    setItems(series);\r\n  }, []);\r\n\r\n  return {\r\n    series: items\r\n  }\r\n}","\r\nimport {useEffect, useRef} from \"react\"\r\nimport {IDLE} from \"../../global/constants\"\r\nimport {useCurrentUser} from \"../../hooks/use-current-user.hook\"\r\nimport {useAccountItems} from \"../../hooks/use-account-items.hook\"\r\nimport { useIpfsItems } from \"../../hooks/use-ipfs-items.hook\"\r\nimport { useEditionList } from \"../../hooks/use-edition-list.hook\"\r\nimport { useSeriesList } from \"../../hooks/use-series-list.hook\"\r\nimport {Suspense, useState} from \"react\"\r\nimport {Redirect, useHistory} from \"react-router-dom\"\r\nimport AccountItemsCluster from '../../comps/account-items'\r\n\r\nimport { SideBar } from \"./sidebar\"\r\nimport axios from \"axios\";\r\n\r\nexport function MintNFT() {\r\n  const [state, setState] = useState({\r\n    inName: \"\",\r\n    inAsset: \"\",\r\n    inQuantity: \"0\",\r\n    inSerial: \"yes\",\r\n    inSeries: \"\",\r\n    inPrice: \"\",\r\n    inEdition: \"-1\"\r\n  })\r\n  const items = useIpfsItems();\r\n  const { series } = useSeriesList();\r\n  const { editions } = useEditionList(state.inSeries);\r\n\r\n  const handleChange = (e) => {\r\n    setState({\r\n      ...state, \r\n      [e.target.name]: e.target.value\r\n    })\r\n  }\r\n\r\n  const handleMint = (e) => {\r\n    e.preventDefault();\r\n/*\r\n    mintItem({\r\n      name: state.inName,\r\n      tokenURI: items.assets[state.inAsset].img_url,\r\n      quantity: state.inQuantity,\r\n      isSerial: state.inSerial,\r\n      collection: state.inSeries,\r\n      price: state.inPrice,\r\n      series: state.inEdition\r\n    })\r\n*/\r\n    createSet({\r\n      name: state.inName,\r\n      desc: state.inDescription,\r\n      thumb: items.assets[state.inThumb].img_url,\r\n      quantity: state.inQuantity,\r\n      isSerial: state.inSerial,\r\n      series: state.inSeries,\r\n      price: state.inPrice,\r\n      edition: state.inEdition\r\n    })\r\n  }\r\n\r\n  const mintItem = async (params) => {\r\n    console.log(params);\r\n\r\n    await fetch(process.env.REACT_APP_API_ITEM_MINT, {\r\n    // await fetch(\"http://localhost:3003/v1/handy-items/mint\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify(params),\r\n    })\r\n  }\r\n\r\n  const createSet = async (params) => {\r\n      await fetch(process.env.REACT_APP_API_URL + \"/v1/handy-items/create-set\", {\r\n      //await fetch(\"http://localhost:3003/v1/handy-items/create-set\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify(params),\r\n    })\r\n  }\r\n\r\n  const editionList = () => {\r\n    var res = [];\r\n    \r\n    for (const prop in editions) {\r\n      res.push(<option key={prop} value={prop}>{editions[prop].name}</option>)\r\n    }\r\n\r\n    return res;\r\n  }\r\n\r\n  const seriesList = () => {\r\n    var res = [];\r\n    \r\n    for (const prop in series) {\r\n      res.push(<option key={prop} value={prop}>{series[prop].name}</option>)\r\n    }\r\n\r\n    return res;\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <div style={{paddingLeft: \"20px\"}}>\r\n        <div>\r\n          <h3>::Mint NFTs</h3>\r\n        </div>\r\n        <div className=\"f3-panel-layout f3-mintnft-head\">\r\n          {/* First Row: Name and Asset(IPFS) */}\r\n          <div className=\"f3-mintnft-row\">\r\n            <div className=\"f3-mintnft-item\">\r\n              <div>\r\n                <label>Name: </label>\r\n              </div>\r\n              <div>\r\n                <input id=\"inName\" name=\"inName\" value={state.inName} onChange={handleChange} />\r\n              </div>\r\n            </div>\r\n            <div className=\"f3-mintnft-item\">\r\n              <div>\r\n                <label>NFT Thumbnail: </label>\r\n              </div>\r\n              <div>\r\n                <select id=\"inThumb\" name=\"inThumb\" onChange={handleChange} value={state.inThumb} >\r\n                  <option value=\"\"></option>\r\n                  {\r\n                    items.assets.map((item, index) => (\r\n                      <option key={index} value={index}>{item.name}</option>\r\n                    ))\r\n                  }\r\n                </select>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          {/* First Row: Name and Asset(IPFS) */}\r\n          <div className=\"f3-mintnft-row\">\r\n            <div className=\"f3-mintnft-item\">\r\n              <div>\r\n                <label>Description: </label>\r\n              </div>\r\n              <div>\r\n                <textarea id=\"inDescription\" name=\"inDescription\" value={state.inDescription} onChange={handleChange}>\r\n                  &nbsp;\r\n                </textarea>\r\n              </div>\r\n            </div>\r\n            <div className=\"f3-mintnft-item\">\r\n              <div>\r\n                <label>NFT Asset: </label>\r\n              </div>\r\n              <div>\r\n                <select id=\"inAsset\" name=\"inAsset\" onChange={handleChange} value={state.inAsset} >\r\n                  <option value=\"\"></option>\r\n                  {\r\n                    items.assets.map((item, index) => (\r\n                      <option key={index} value={index}>{item.name}</option>\r\n                    ))\r\n                  }\r\n                </select>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          {/* Second Row: Quantity and Serial#'s */}\r\n          <div className=\"f3-mintnft-row\">\r\n            <div className=\"f3-mintnft-item\">\r\n              <div>\r\n                <label>Quantity: </label>\r\n              </div>\r\n              <div>\r\n                <input id=\"inQuantity\" name=\"inQuantity\" value={state.inQuantity} \r\n                       onChange={handleChange} size=\"4\" className=\"f3-center\" />\r\n              </div>\r\n            </div>\r\n            <div className=\"f3-mintnft-item\">\r\n              <div>\r\n                <label>Serial #'s: </label>\r\n              </div>\r\n              <div>\r\n                <select id=\"inSerial\" name=\"inSerial\" value={state.inSerial} onChange={handleChange}>\r\n                  <option value=\"yes\">Yes</option>\r\n                  <option value=\"no\">No</option>\r\n                </select>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          {/* Third Row: Series and Price */}\r\n          <div className=\"f3-mintnft-row\">\r\n            <div className=\"f3-mintnft-item\">\r\n              <div>\r\n                <label>Series: </label>\r\n              </div>\r\n              <div>\r\n                <select id=\"inSeries\" name=\"inSeries\" value={state.inSeries} onChange={handleChange}>\r\n                  <option value=\"\"></option>\r\n                  { seriesList() }\r\n                </select>\r\n              </div>\r\n            </div>\r\n            <div className=\"f3-mintnft-item\">\r\n              <div>\r\n                <label>Price(USD): </label>\r\n              </div>\r\n              <div>\r\n                <input id=\"inPrice\" name=\"inPrice\" value={state.inPrice} onChange={handleChange} size=\"8\" /><span>&nbsp;$</span>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          {/* Fourth Row: Edition and Mint Button */}\r\n          <div className=\"f3-mintnft-row\">\r\n            <div className=\"f3-mintnft-item\">\r\n              <div>\r\n                <label>Edition: </label>\r\n              </div>\r\n              <div>\r\n                <select id=\"inEdition\" name=\"inEdition\" value={state.inEdition} onChange={handleChange}>\r\n                  <option value=\"-1\"></option>\r\n                  { editionList() }\r\n                </select>\r\n              </div>\r\n            </div>\r\n            <div className=\"f3-mintnft-item\">\r\n              <div>\r\n                <button onClick={handleMint}>MINT NFT</button>\r\n              </div>\r\n              <div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n        </div>\r\n      </div>\r\n      <div className=\"hline\" />\r\n        <div style={{paddingLeft: \"20px\"}}>\r\n          <div>\r\n            <h3>Current Series</h3>\r\n          </div>\r\n        </div>\r\n    </div>\r\n  )\r\n\r\n}\r\n\r\nexport function Page() {\r\n  return (\r\n    <div>\r\n      <SideBar />\r\n      <div className=\"f3-main\">\r\n        <MintNFT />\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n","import { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nexport function useIpfsItems() {\r\n  const [items, setItems] = useState([]);\r\n\r\n  useEffect(async () => {\r\n    const assetList = await axios.get(process.env.REACT_APP_API_URL + \"/v1/assets/list\");\r\n    if (assetList.data.success != \"true\") return;\r\n\r\n    setItems(assetList.data.result);\r\n  }, []);\r\n\r\n  return {\r\n    assets: items\r\n  }\r\n}","import { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nimport { getEditionList } from \"../flow/sc.get-edition-list\";\r\n\r\nexport function useEditionList(series) {\r\n  const [items, setItems] = useState({});\r\n\r\n  useEffect(async () => {\r\n    if (series == \"\") {\r\n      setItems({});\r\n      return;\r\n    }\r\n\r\n    const editions = await getEditionList(series);\r\n\r\n    console.log(editions);\r\n\r\n    for (const prop in editions)\r\n      console.log(editions[prop]);\r\n\r\n    setItems(editions);\r\n  }, [series]);\r\n\r\n  return {\r\n    editions: items\r\n  }\r\n}","\r\nimport {useEffect, useRef} from \"react\"\r\nimport {IDLE} from \"../../global/constants\"\r\nimport {useCurrentUser} from \"../../hooks/use-current-user.hook\"\r\nimport {useAccountItems} from \"../../hooks/use-account-items.hook\"\r\nimport {Suspense, useState} from \"react\"\r\nimport {Redirect, useHistory} from \"react-router-dom\"\r\nimport AccountItemsCluster from '../../comps/account-items'\r\n\r\nimport { useSeriesList } from \"../../hooks/use-series-list.hook\"\r\n\r\nimport { SideBar } from \"./sidebar\"\r\nimport axios from \"axios\";\r\nimport fs from \"fs\";\r\n\r\nimport \"./index.css\"\r\n\r\nconst PINATA_API_KEY = \"8b0d90ef4bf74827eb88\";\r\nconst PINATA_SECRET_API_KEY = \"609ec3e0c1641f4b41c0c6370eed55e108cea9f9396b9e5a1d123061de07b99b\";\r\n\r\nexport const pinJSONToIPFS = (pinataApiKey, pinataSecretApiKey, JSONBody) => {\r\n    const url = `https://api.pinata.cloud/pinning/pinJSONToIPFS`;\r\n    return axios\r\n        .post(url, JSONBody, {\r\n            headers: {\r\n                pinata_api_key: pinataApiKey,\r\n                pinata_secret_api_key: pinataSecretApiKey\r\n            }\r\n        })\r\n        .then(function (response) {\r\n            \r\n        })\r\n        .catch(function (error) {\r\n            \r\n        });\r\n};\r\n\r\nexport const pinFileToIPFS = async (pinataApiKey, pinataSecretApiKey, imgData) => {\r\n  const url = `https://api.pinata.cloud/pinning/pinFileToIPFS`;\r\n  \r\n  console.log(imgData);\r\n\r\n  let data = new FormData();\r\n  data.append('file', imgData.obj.files[0]);\r\n  \r\n  const metadata = JSON.stringify({\r\n      name: imgData.name,\r\n      keyvalues: {\r\n        name: imgData.name\r\n      }\r\n  });\r\n  data.append('pinataMetadata', metadata);\r\n  \r\n  const pinataOptions = JSON.stringify({\r\n      cidVersion: 0,\r\n      customPinPolicy: {\r\n          regions: [\r\n              {\r\n                  id: 'FRA1',\r\n                  desiredReplicationCount: 1\r\n              },\r\n              {\r\n                  id: 'NYC1',\r\n                  desiredReplicationCount: 2\r\n              }\r\n          ]\r\n      }\r\n  });\r\n  data.append('pinataOptions', pinataOptions);\r\n\r\n  return axios\r\n      .post(url, data, {\r\n          maxBodyLength: 'Infinity',\r\n          headers: {\r\n              'Content-Type': `multipart/form-data; boundary=${data._boundary}`,\r\n              pinata_api_key: pinataApiKey,\r\n              pinata_secret_api_key: pinataSecretApiKey\r\n          }\r\n      })\r\n      .then(function (response) {\r\n          axios.post(process.env.REACT_APP_API_URL + \"/v1/assets/upload\", {\r\n            name: imgData.name,\r\n            path: \"https://cloudflare-ipfs.com/ipfs/\" + response.data.IpfsHash\r\n          })\r\n      })\r\n      .catch(function (error) {\r\n          //handle error here\r\n      });\r\n};\r\n\r\n\r\nexport function Assets() {\r\n  const [state, setState] = useState({\r\n    inFile: \"\",\r\n    inName: \"\"\r\n  })\r\n  const [asList, setList] = useState([]);\r\n  const [isDirty, setDirty] = useState(true);\r\n  const { series } = useSeriesList();\r\n\r\n  useEffect(async () => {\r\n    if (!isDirty) return;\r\n\r\n    const assetList = await axios.get(process.env.REACT_APP_API_URL + \"/v1/assets/list\");\r\n    if (assetList.data.success != \"true\") return;\r\n\r\n    setDirty(false);\r\n    setList(assetList.data.result);\r\n  }, [isDirty])\r\n\r\n  const handleChange = (e) => {\r\n    setState({\r\n      ...state, \r\n      [e.target.name]: e.target.value\r\n    })\r\n  }\r\n\r\n  const handleCreateSeries = async (e) => {\r\n\r\n    await fetch(process.env.REACT_APP_API_URL + \"/v1/handy-items/create-series\", {\r\n    //await fetch(\"http://localhost:3003/v1/handy-items/create-series\", {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify({\r\n          name: state.inSeriesName,\r\n          image: asList[state.inSeriesImg].img_url\r\n        }),\r\n      })\r\n  }\r\n\r\n  const handleCreateEdition = async (e) => {\r\n\r\n    await fetch(process.env.REACT_APP_API_URL + \"/v1/handy-items/create-edition\", {\r\n    //await fetch(\"http://localhost:3003/v1/handy-items/create-edition\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify({\r\n        name: state.inEditionName,\r\n        series: state.inEditionSeries,\r\n        image: asList[state.inEditionImg].img_url\r\n      }),\r\n    })\r\n  }\r\n\r\n  const getSeriesList = () => {\r\n    var res = [];\r\n\r\n    for (const prop in series) {\r\n      res.push(<option key={prop} value={prop}>{series[prop].name}</option>)\r\n    }\r\n\r\n    return res;\r\n  }\r\n\r\n  const getSeriesListFor = () => {\r\n    var res = [];\r\n\r\n    for (const prop in series) {\r\n      res.push(\r\n        <div>\r\n          <img src={series[prop].image} />\r\n        </div>\r\n      )\r\n    }\r\n\r\n    return res;\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <div style={{paddingLeft: \"20px\"}}>\r\n        <div>\r\n          <h3>::Series</h3>\r\n        </div>\r\n        <div className=\"f3-panel-layout f3-collections-head\">\r\n          <div>\r\n            <label>Series Name:</label>\r\n          </div>\r\n          <div>\r\n            <input id=\"inSeriesName\" name=\"inSeriesName\" value={state.inSeriesName} onChange={handleChange} />\r\n          </div>\r\n          <div></div>\r\n          <div>\r\n            <label>Series Image: &nbsp;</label>\r\n          </div>\r\n          <div>\r\n            <select id=\"inSeriesImg\" name=\"inSeriesImg\" onChange={handleChange} value={state.inSeriesImg} >\r\n              <option value=\"\"></option>\r\n              {\r\n                asList.map((item, index) => (\r\n                  <option key={index} value={index}>{item.name}</option>\r\n                ))\r\n              }\r\n            </select>\r\n          </div>\r\n          <div>\r\n            <button class=\"f3-collections-btn\" id=\"\" onClick={handleCreateSeries}>CREATE SERIES</button>\r\n          </div>\r\n          <div className=\"f3-collections-hline\">\r\n          </div>\r\n          <div>\r\n            <label>Series:</label>\r\n          </div>\r\n          <div>\r\n            <select id=\"inEditionSeries\" name=\"inEditionSeries\" onChange={handleChange} value={state.inEditionSeries}>\r\n              <option value=\"\"></option>\r\n              { getSeriesList() }\r\n            </select>\r\n          </div>\r\n          <div></div>\r\n          <div>\r\n            <label>Edition Name: </label>\r\n          </div>\r\n          <div>\r\n            <input id=\"inEditionName\" name=\"inEditionName\" value={state.inEditionName} onChange={handleChange} />\r\n          </div>\r\n          <div></div>\r\n          <div>\r\n            <label>Edition Image: </label>\r\n          </div>\r\n          <div>\r\n            <select id=\"inEditionImg\" name=\"inEditionImg\" onChange={handleChange} value={state.inEditionImg} >\r\n              <option value=\"\"></option>\r\n              {\r\n                asList.map((item, index) => (\r\n                  <option key={index} value={index}>{item.name}</option>\r\n                ))\r\n              }\r\n            </select>\r\n          </div>\r\n          <div>\r\n            <button class=\"f3-collections-btn\" id=\"\" onClick={handleCreateEdition}>CREATE EDITION</button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className=\"hline\" />\r\n      <div style={{paddingLeft: \"20px\"}}>\r\n        <div>\r\n          <h3>Current Series</h3>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n\r\n}\r\n\r\nexport function Page() {\r\n  return (\r\n    <div>\r\n      <SideBar />\r\n      <div className=\"f3-main\">\r\n        <Assets />\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n","import { useState, Suspense } from \"react\";\r\nimport { MarketItemsCluster } from \"../../comps/market-items\";\r\nimport { useAccountItem } from \"../../hooks/use-account-item.hook\";\r\nimport { useAccountItems } from \"../../hooks/use-account-items.hook\";\r\nimport { useSeriesList } from \"../../hooks/use-series-list.hook\";\r\n\r\nexport function Item({meta}) {\r\n\r\n  console.log(meta);\r\n\r\n  return (\r\n    <div className=\"f3-store-collection-item\">\r\n      <img src={meta.image} />\r\n      <a href={\"/series/\" + meta.id}>{meta.name}</a>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport function WrappedItem(props) {\r\n  return (\r\n    <Suspense fallback={null}>\r\n      <Item {...props} />\r\n    </Suspense>\r\n  )\r\n}\r\n\r\nexport function Page() {\r\n\r\n  const { series } = useSeriesList();\r\n\r\n  const getList = () => {\r\n    var res = [];\r\n    \r\n    for (const prop in series) {\r\n      res.push(<WrappedItem meta={series[prop]} />)\r\n    }\r\n\r\n    return res;\r\n  }\r\n\r\n  return (\r\n    <div className=\"f3-store-padding\">\r\n      <div>\r\n        <h1 style={{margin: \"10px 0px\"}}>NFT Storefront</h1>\r\n        <div className=\"f3-store-hline\"></div>\r\n      </div>\r\n      <div className=\"f3-store-padding\">\r\n        <div>\r\n          <h2 className=\"f3-store-h2\">Available Series</h2>\r\n        </div>\r\n        <div className=\"f3-store-container\">\r\n          { getList() }\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}","import {send, decode, script, args, arg, cdc} from \"@onflow/fcl\"\r\nimport {Address, UInt32} from \"@onflow/types\"\r\n\r\nconst CODE = cdc`\r\nimport NFTStorefront from 0xNFTStorefront\r\nimport HandyItems from 0xHandyItems\r\n\r\npub fun main(id: UInt32): HandyItems.QuerySeriesData? {\r\n  return HandyItems.getSeriesData(series: id)\r\n}\r\n`\r\n\r\nexport function getSeriesItem(series) {\r\n  // prettier-ignore\r\n  return send([\r\n    script(CODE),\r\n    args([arg(Number(series), UInt32)])\r\n  ]).then(decode)\r\n}","import { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nimport { getSeriesItem } from \"../flow/sc.get-series-item\";\r\n\r\nexport function useSeriesItem(id) {\r\n  const [item, setItem] = useState({});\r\n\r\n  useEffect(async () => {\r\n    const series = await getSeriesItem(id);\r\n\r\n    console.log(series);\r\n\r\n    for (const prop in series)\r\n      console.log(series[prop]);\r\n\r\n    setItem(series);\r\n  }, [id]);\r\n\r\n  return {\r\n    series: item\r\n  }\r\n}","import {send, decode, script, args, arg, cdc} from \"@onflow/fcl\"\r\nimport {Address, UInt32} from \"@onflow/types\"\r\n\r\nconst CODE = cdc`\r\nimport NFTStorefront from 0xNFTStorefront\r\nimport HandyItems from 0xHandyItems\r\n\r\npub fun main(series: UInt32): {UInt32: HandyItems.QuerySetEditionData} {\r\n  return HandyItems.getSets(series: series)\r\n}\r\n`\r\n\r\nexport function getSetList(series) {\r\n  // prettier-ignore\r\n  return send([\r\n    script(CODE),\r\n    args([arg(Number(series), UInt32)])\r\n  ]).then(decode)\r\n}","import { useState, Suspense } from \"react\";\r\nimport { useParams } from \"react-router\";\r\nimport { useAccountItem } from \"../../hooks/use-account-item.hook\";\r\nimport { useAccountItems } from \"../../hooks/use-account-items.hook\";\r\nimport { useEditionList } from \"../../hooks/use-edition-list.hook\";\r\nimport { useSeriesItem } from \"../../hooks/use-series-item.hook\";\r\nimport { useSetList } from \"../../hooks/use-set-list.hook\";\r\n\r\nexport function Item({meta}) {\r\n\r\n  return (\r\n    <div className=\"f3-store-series-item\">\r\n      <img src={meta.image} /> <br />\r\n      <a href={\"/editions/\" + meta.id}>{meta.name} Edition</a>\r\n    </div>\r\n  )\r\n\r\n}\r\n\r\nexport function WrappedItem(props) {\r\n  return (\r\n    <Suspense fallback={null}>\r\n      <Item {...props} />\r\n    </Suspense>\r\n  )\r\n}\r\n\r\nexport function Page() {\r\n\r\n  const { id } = useParams();\r\n  const { series } = useSeriesItem(id);\r\n  // const { editions } = useEditionList(id);/\r\n  const { sets } = useSetList(id);\r\n\r\n  const getList = () => {\r\n    var res = [];\r\n    \r\n    for (const prop in sets) {\r\n      res.push(<WrappedItem meta={sets[prop]} />)\r\n    }\r\n\r\n    return res;\r\n  }\r\n\r\n  return (\r\n    <div className=\"f3-store-padding\">\r\n      <div>\r\n        <h1 style={{margin: \"10px 0px\"}}>NFT Storefront</h1>\r\n        <div className=\"f3-store-hline\"></div>\r\n      </div>\r\n      <div className=\"f3-store-padding\">\r\n        <div>\r\n          <h2 className=\"f3-store-h2\">{series.name} Series - Current Editions</h2>\r\n        </div>\r\n        <div className=\"f3-store-container\">\r\n          { getList() }\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}","import { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nimport { getSetList } from \"../flow/sc.get-set-list\";\r\n\r\nexport function useSetList(series) {\r\n  const [items, setItems] = useState({});\r\n\r\n  useEffect(async () => {\r\n    const sets = await getSetList(series)\r\n\r\n    console.log(sets);\r\n\r\n    for (const prop in sets)\r\n      console.log(sets[prop]);\r\n\r\n    setItems(sets);\r\n  }, []);\r\n\r\n  return {\r\n    sets: items\r\n  }\r\n}","import {send, decode, script, args, arg, cdc} from \"@onflow/fcl\"\r\nimport {Address, UInt32} from \"@onflow/types\"\r\n\r\nconst CODE = cdc`\r\nimport NFTStorefront from 0xNFTStorefront\r\nimport HandyItems from 0xHandyItems\r\n\r\npub fun main(id: UInt32): HandyItems.QuerySetData? {\r\n  return HandyItems.getSetData(setID: id)\r\n}\r\n`\r\n\r\nexport function getSetItem(series) {\r\n  // prettier-ignore\r\n  return send([\r\n    script(CODE),\r\n    args([arg(Number(series), UInt32)])\r\n  ]).then(decode)\r\n}","import {send, decode, script, args, arg, cdc} from \"@onflow/fcl\"\r\nimport {Address, UInt32} from \"@onflow/types\"\r\n\r\nconst CODE = cdc`\r\nimport NFTStorefront from 0xNFTStorefront\r\nimport HandyItems from 0xHandyItems\r\n\r\npub fun main(id: UInt32): HandyItems.QueryEditionData? {\r\n  return HandyItems.getEditionData(id: id)\r\n}\r\n`\r\n\r\nexport function getEditionItem(edition) {\r\n  // prettier-ignore\r\n  return send([\r\n    script(CODE),\r\n    args([arg(Number(edition), UInt32)])\r\n  ]).then(decode)\r\n}","import * as fcl from \"@onflow/fcl\"\r\nimport * as t from \"@onflow/types\"\r\nimport {tx} from \"./util/tx\"\r\nimport {invariant} from \"@onflow/util-invariant\"\r\n\r\nconst CODE = fcl.cdc`\r\n  import FungibleToken from 0xFungibleToken\r\n  import NonFungibleToken from 0xNonFungibleToken\r\n  import FUSD from 0xFUSD\r\n  import HandyItems from 0xHandyItems\r\n  import NFTStorefront from 0xNFTStorefront\r\n\r\n  transaction(setID: UInt32, storefrontAddress: Address) {\r\n\r\n    let paymentVault: @FungibleToken.Vault\r\n    let handyItemsCollection: &HandyItems.Collection{NonFungibleToken.Receiver}\r\n    let set: &HandyItems.Set\r\n\r\n    prepare(account: AuthAccount) {\r\n      self.set = HandyItems.borrowSet(setID: setID)\r\n      \r\n      // let price: UFix64 = self.set.price\r\n      let price: UFix64 = 3.0\r\n\r\n      let mainFUSDVault = account.borrow<&FUSD.Vault>(from: /storage/fusdVault)\r\n        ?? panic(\"Cannot borrow FUSD vault from account storage\")\r\n      \r\n      self.paymentVault <- mainFUSDVault.withdraw(amount: price)\r\n\r\n      self.handyItemsCollection = account.borrow<&HandyItems.Collection{NonFungibleToken.Receiver}>(\r\n        from: HandyItems.CollectionStoragePath\r\n      ) ?? panic(\"Cannot borrow HandyItems collection receiver from account\")\r\n    }\r\n  \r\n    execute {\r\n      let item <- self.set.mintNFT(\r\n        payment: <-self.paymentVault\r\n      )\r\n\r\n      self.handyItemsCollection.deposit(token: <-item)\r\n    }\r\n  }\r\n`\r\n\r\n// prettier-ignore\r\nexport function purchaseHandyItem({setID, ownerAddress}, opts = {}) {\r\n\r\n  return tx([\r\n    fcl.transaction(CODE),\r\n    fcl.args([\r\n      fcl.arg(Number(setID), t.UInt32),\r\n      fcl.arg(String(ownerAddress), t.Address),\r\n    ]),\r\n    fcl.proposer(fcl.authz),\r\n    fcl.payer(fcl.authz),\r\n    fcl.authorizations([fcl.authz]),\r\n    fcl.limit(1000),\r\n  ], opts)\r\n}\r\n","// prettier-ignore\r\nimport {transaction, limit, proposer, payer, authorizations, authz, cdc} from \"@onflow/fcl\"\r\nimport {invariant} from \"@onflow/util-invariant\"\r\nimport {tx} from \"./util/tx\"\r\n\r\nconst CODE = cdc`\r\n  import FungibleToken from 0xFungibleToken\r\n  import FlowToken from 0xFlowToken\r\n  import NonFungibleToken from 0xNonFungibleToken\r\n  import HandyItems from 0xHandyItems\r\n  import NFTStorefront from 0xNFTStorefront\r\n\r\n  pub fun hasItems(_ address: Address): Bool {\r\n    return getAccount(address)\r\n      .getCapability<&HandyItems.Collection{NonFungibleToken.CollectionPublic, HandyItems.HandyItemsCollectionPublic}>(HandyItems.CollectionPublicPath)\r\n      .check()\r\n  }\r\n\r\n  pub fun hasFLOW(_ address: Address): Bool {\r\n    let receiver = getAccount(address)\r\n      .getCapability<&FlowToken.Vault{FungibleToken.Receiver}>(/public/flowReceiver)\r\n      .check()\r\n\r\n    let balance = getAccount(address)\r\n      .getCapability<&FlowToken.Vault{FungibleToken.Balance}>(/public/flowBalance)\r\n      .check()\r\n\r\n    return receiver && balance\r\n  }\r\n\r\n  pub fun hasStorefront(_ address: Address): Bool {\r\n    return getAccount(address)\r\n      .getCapability<&NFTStorefront.Storefront{NFTStorefront.StorefrontPublic}>(NFTStorefront.StorefrontPublicPath)\r\n      .check()\r\n  }\r\n\r\n  transaction {\r\n    prepare(acct: AuthAccount) {\r\n\r\n      if !hasItems(acct.address) {\r\n        if acct.borrow<&HandyItems.Collection>(from: HandyItems.CollectionStoragePath) == nil {\r\n          acct.save(<-HandyItems.createEmptyCollection(), to: HandyItems.CollectionStoragePath)\r\n        }\r\n        acct.unlink(HandyItems.CollectionPublicPath)\r\n        acct.link<&HandyItems.Collection{NonFungibleToken.CollectionPublic, HandyItems.HandyItemsCollectionPublic}>(HandyItems.CollectionPublicPath, target: HandyItems.CollectionStoragePath)\r\n      }\r\n\r\n      if !hasStorefront(acct.address) {\r\n        if acct.borrow<&NFTStorefront.Storefront>(from: NFTStorefront.StorefrontStoragePath) == nil {\r\n          acct.save(<-NFTStorefront.createStorefront(), to: NFTStorefront.StorefrontStoragePath)\r\n        }\r\n        acct.unlink(NFTStorefront.StorefrontPublicPath)\r\n        acct.link<&NFTStorefront.Storefront{NFTStorefront.StorefrontPublic}>(NFTStorefront.StorefrontPublicPath, target: NFTStorefront.StorefrontStoragePath)\r\n      }\r\n    }\r\n  }\r\n`\r\n\r\nexport async function initializeAccount(address, opts = {}) {\r\n  // prettier-ignore\r\n  invariant(address != null, \"Tried to initialize an account but no address was supplied\")\r\n\r\n  return tx(\r\n    [\r\n      transaction(CODE),\r\n      limit(70),\r\n      proposer(authz),\r\n      payer(authz),\r\n      authorizations([authz]),\r\n    ],\r\n    opts\r\n  )\r\n}\r\n\r\nconst DELETE_COLLECTION = cdc`\r\n  import NonFungibleToken from 0xNonFungibleToken\r\n  import HandyItems from 0xHandyItems\r\n\r\n  transaction {\r\n    prepare(acct: AuthAccount) {\r\n      if acct.borrow<&HandyItems.Collection>(from: HandyItems.CollectionStoragePath) != nil {\r\n        let collection <- acct.load<@HandyItems.Collection>(from: HandyItems.CollectionStoragePath)\r\n        destroy collection\r\n      }\r\n      acct.unlink(HandyItems.CollectionPublicPath)\r\n    }\r\n  }\r\n`\r\n\r\nexport async function initDeleteCollection(address, opts = {}) {\r\n  // prettier-ignore\r\n  invariant(address != null, \"no address was supplied\")\r\n\r\n  return tx(\r\n    [\r\n      transaction(DELETE_COLLECTION),\r\n      limit(70),\r\n      proposer(authz),\r\n      payer(authz),\r\n      authorizations([authz]),\r\n    ],\r\n    opts\r\n  )\r\n}\r\n\r\nconst CREATE_COLLECTION = cdc`\r\n  import NonFungibleToken from 0xNonFungibleToken\r\n  import HandyItems from 0xHandyItems\r\n\r\n  transaction {\r\n    prepare(acct: AuthAccount) {\r\n      if acct.borrow<&HandyItems.Collection>(from: HandyItems.CollectionStoragePath) == nil {\r\n        acct.save(<-HandyItems.createEmptyCollection(), to: HandyItems.CollectionStoragePath)\r\n      }\r\n      acct.unlink(HandyItems.CollectionPublicPath)\r\n      acct.link<&HandyItems.Collection{NonFungibleToken.CollectionPublic, HandyItems.HandyItemsCollectionPublic}>(HandyItems.CollectionPublicPath, target: HandyItems.CollectionStoragePath)\r\n    }\r\n  }\r\n`\r\n\r\nexport async function initCreateCollection(address, opts = {}) {\r\n  // prettier-ignore\r\n  invariant(address != null, \"no address was supplied\")\r\n\r\n  return tx(\r\n    [\r\n      transaction(CREATE_COLLECTION),\r\n      limit(70),\r\n      proposer(authz),\r\n      payer(authz),\r\n      authorizations([authz]),\r\n    ],\r\n    opts\r\n  )\r\n}\r\n\r\nconst CREATE_FUSD = cdc`\r\n  import FungibleToken from 0xFungibleToken\r\n  import FUSD from 0xFUSD\r\n\r\n  transaction {\r\n    prepare(acct: AuthAccount) {\r\n      if (acct.borrow<&FUSD.Vault>(from: /storage/fusdVault) == nil) {\r\n        acct.save(<-FUSD.createEmptyVault(), to: /storage/fusdVault)\r\n      }\r\n\r\n      acct.unlink(/public/fusdReceiver)\r\n      acct.link<&FUSD.Vault{FungibleToken.Receiver}>(\r\n        /public/fusdReceiver,\r\n        target: /storage/fusdVault\r\n      )\r\n\r\n      acct.unlink(/public/fusdBalance)\r\n      acct.link<&FUSD.Vault{FungibleToken.Balance}>(\r\n        /public/fusdBalance,\r\n        target: /storage/fusdVault\r\n      )\r\n    }\r\n  }\r\n`\r\n\r\nexport async function initCreateFusd(address, opts = {}) {\r\n  // prettier-ignore\r\n  invariant(address != null, \"no address was supplied\")\r\n\r\n  return tx(\r\n    [\r\n      transaction(CREATE_FUSD),\r\n      limit(70),\r\n      proposer(authz),\r\n      payer(authz),\r\n      authorizations([authz]),\r\n    ],\r\n    opts\r\n  )\r\n}","import { Suspense } from \"react\";\r\nimport { useParams } from \"react-router\";\r\nimport { useAccountItem } from \"../../hooks/use-account-item.hook\";\r\nimport { useSetItem } from \"../../hooks/use-set-item.hook\";\r\nimport { useSeriesItem } from \"../../hooks/use-series-item.hook\";\r\nimport { useEditionItem } from \"../../hooks/use-edition-item.hook\";\r\nimport { purchaseHandyItem } from \"../../flow/tx.purchase-handy-item\";\r\nimport { useCurrentUser } from \"../../hooks/use-current-user.hook\";\r\nimport * as Init from \"../../flow/tx.initialize-my-account\";\r\n\r\nexport function Page() {\r\n  const [user, loggedIn, {signUp, logIn}] = useCurrentUser();\r\n\r\n  const handlePurchase = (e) => {\r\n    e.preventDefault();\r\n\r\n    if (!loggedIn) {\r\n      console.log(\"You must log in.\");\r\n      return;\r\n    }\r\n  }\r\n\r\n  const handleLogin = (e) => {\r\n    logIn();\r\n  }\r\n\r\n  const handleInitCollection = (e) => {\r\n    Init.initCreateCollection(user.addr);\r\n  }\r\n\r\n  const handleDeleteCollection = (e) => {\r\n    Init.initDeleteCollection(user.addr);\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      { loggedIn ? (\r\n        <div>\r\n          <button onClick={handleDeleteCollection}>Delete Collection</button>\r\n          <button onClick={handleInitCollection}>Init Collection</button>\r\n        </div>\r\n      ) : (\r\n        <div></div>\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport function WrappedPage(props) {\r\n  return (\r\n    <Suspense fallback={null}>\r\n      <Page {...props} />\r\n    </Suspense>\r\n  )\r\n}","import { Suspense } from \"react\";\r\nimport { useParams } from \"react-router\";\r\nimport { useAccountItem } from \"../../hooks/use-account-item.hook\";\r\nimport { useSetItem } from \"../../hooks/use-set-item.hook\";\r\nimport { useSeriesItem } from \"../../hooks/use-series-item.hook\";\r\nimport { useEditionItem } from \"../../hooks/use-edition-item.hook\";\r\nimport { purchaseHandyItem } from \"../../flow/tx.purchase-handy-item\";\r\nimport { useCurrentUser } from \"../../hooks/use-current-user.hook\";\r\n\r\nexport function Page() {\r\n  let { id } = useParams();\r\n  const { item } = useSetItem(id);\r\n\r\n  const [user, loggedIn, {signUp, logIn}] = useCurrentUser();\r\n\r\n  const { series } = useSeriesItem(Object.keys(item).length != 0 ? item.seriesID : \"\");\r\n  const { edition } = useEditionItem(Object.keys(item).length != 0 ? item.editionID : \"\");\r\n\r\n  const handlePurchase = (e) => {\r\n    e.preventDefault();\r\n\r\n    if (!loggedIn) {\r\n      console.log(\"You must log in.\");\r\n      return;\r\n    }\r\n\r\n    purchaseHandyItem({setID: id, ownerAddress: process.env.REACT_APP_CONTRACT_HANDY_ITEMS}, {\r\n      onStart() {\r\n      },\r\n      async onSuccess() {\r\n      },\r\n      async onComplete() {\r\n      },\r\n      async onError(error) {\r\n      }\r\n    })\r\n  }\r\n\r\n  const handleLogin = (e) => {\r\n    logIn();\r\n  }\r\n\r\n  return (Object.keys(item).length != 0) ? (\r\n    <div className=\"f3-store-padding\">\r\n      <div>\r\n        <h1 style={{margin: \"10px 0px\"}}>NFT Storefront</h1>\r\n        <div className=\"f3-store-hline\"></div>\r\n      </div>\r\n      <div className=\"f3-store-padding\">\r\n        <div>\r\n          <h2 className=\"f3-store-h2\">SportsCast - {series.name} {edition.name} Edition</h2>\r\n        </div>\r\n        <div>\r\n          <img src={item.metadata[\"thumb_image\"]} />\r\n          <p>{item.metadata[\"description\"]}</p>\r\n          <p>Player: {item.metadata[\"name\"]}</p>\r\n          <p>Edition: {edition.name}</p>\r\n          <p>Available: {item.quantity - item.numberMinted}</p>\r\n          <p>Price: ${item.price}</p>\r\n        </div>\r\n        <button onClick={handlePurchase}>Purchase</button>\r\n        { !loggedIn &&\r\n          <button onClick={handleLogin}>Log In</button>\r\n        }\r\n      </div>\r\n    </div>\r\n  ) : (\r\n    <div></div>\r\n  )\r\n}\r\n\r\nexport function WrappedPage(props) {\r\n  return (\r\n    <Suspense fallback={null}>\r\n      <Page {...props} />\r\n    </Suspense>\r\n  )\r\n}","import { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nimport { getSetItem } from \"../flow/sc.get-set-item\";\r\n\r\nexport function useSetItem(id) {\r\n  const [item, setItem] = useState({});\r\n\r\n  useEffect(async () => {\r\n    const set = await getSetItem(id)\r\n\r\n    console.log(set);\r\n\r\n    for (const prop in set)\r\n      console.log(set[prop]);\r\n\r\n    setItem(set);\r\n  }, []);\r\n\r\n  return {\r\n    item: item\r\n  }\r\n}","import { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nimport { getEditionItem } from \"../flow/sc.get-edition-item\";\r\n\r\nexport function useEditionItem(id) {\r\n  const [item, setItem] = useState({});\r\n\r\n  useEffect(async () => {\r\n    const edition = await getEditionItem(id);\r\n\r\n    console.log(edition);\r\n\r\n    for (const prop in edition)\r\n      console.log(edition[prop]);\r\n\r\n      setItem(edition);\r\n  }, [id]);\r\n\r\n  return {\r\n    edition: item\r\n  }\r\n}","import { Suspense } from \"react\";\r\nimport { useAccountItem } from \"../../hooks/use-account-item.hook\";\r\nimport { useAccountItems } from \"../../hooks/use-account-items.hook\";\r\nimport { useCurrentUser } from \"../../hooks/use-current-user.hook\";\r\n\r\nexport function Item({addr, id}) {\r\n  const item = useAccountItem(addr, id);\r\n\r\n  console.log(item);\r\n\r\n  return (\r\n      item.item && \r\n        <div>\r\n          <p>{item.set.metadata[\"name\"]}</p>\r\n          <img src={item.set.metadata[\"thumb_image\"]} />\r\n          <p>{item.edition.name} Edition</p>\r\n          <p>#{item.item.serialID} / {item.set.quantity}</p>\r\n        </div>\r\n  )\r\n}\r\n\r\nexport function Page() {\r\n  const [user, loggedIn, {signUp, logIn}] = useCurrentUser();\r\n  const { ids } = useAccountItems(user.addr)\r\n\r\n  console.log(ids);\r\n\r\n  const handleLogin = (e) => {\r\n    logIn();\r\n  }\r\n\r\n  return (\r\n    <div className=\"f3-store-padding\">\r\n      <div>\r\n        <h1 style={{margin: \"10px 0px\"}}>NFT Storefront</h1>\r\n        <div className=\"f3-store-hline\"></div>\r\n      </div>\r\n      <div className=\"f3-store-padding\">\r\n        <div>\r\n          <h2 className=\"f3-store-h2\">My Wallet NFTs</h2>\r\n        </div>\r\n        <div className=\"f3-mywallet-container\">\r\n          <div>\r\n            {\r\n              ids.map(item => (\r\n                <Item addr={user.addr} id={item} />\r\n              ))\r\n            }\r\n          </div>\r\n        </div>\r\n\r\n        { !loggedIn &&\r\n          <button onClick={handleLogin}>Log In</button>\r\n        }\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport function WrappedPage(props) {\r\n  return (\r\n    <Suspense fallback={null}>\r\n      <Page {...props} />\r\n    </Suspense>\r\n  )\r\n}","\r\nexport function Page() {\r\n  return <div>Page Not Found</div>\r\n}\r\n","import React, { Suspense } from 'react'\nimport ReactDOM from 'react-dom'\nimport {RecoilRoot} from \"recoil\"\nimport reportWebVitals from './reportWebVitals'\nimport {BrowserRouter as Router, Switch, Route} from \"react-router-dom\"\n\nimport './index.css';\n\nimport {Page as Root} from \"./pages/root.page\"\nimport {Page as Publish} from \"./pages/publish.page\"\nimport {Page as List} from \"./pages/list.page\"\nimport {Page as Market} from \"./pages/market.page\"\nimport {Page as MintPanel} from \"./pages/mint\"\nimport {Page as Assets} from \"./pages/mint/assets\"\nimport {Page as MintNFT} from \"./pages/mint/mintnft\"\nimport {Page as Collections} from \"./pages/mint/collections\"\nimport {Page as Series} from \"./pages/storefront/series\"\nimport {Page as Edition} from \"./pages/storefront/edition\"\nimport {Page as InitAcc} from \"./pages/storefront/initacc\"\nimport {WrappedPage as Purchase} from \"./pages/storefront/purchase\"\nimport {WrappedPage as MyWallet} from './pages/storefront/mywallet'\nimport {Page as NotFound} from \"./pages/not-found.page\"\n\nimport * as fcl from \"@onflow/fcl\"\nimport * as t from \"@onflow/types\"\n\nwindow.fcl = fcl\nwindow.t = t\n\nfcl\n  .config()\n  .put(\"faucet\", process.env.REACT_APP_FAUCET_ADDRESS)\n  .put(\"accessNode.api\", process.env.REACT_APP_FLOW_ACCESS_API_URL)\n  .put(\"challenge.handshake\", process.env.REACT_APP_WALLET_DISCOVERY)\n  .put(\"0xFungibleToken\", process.env.REACT_APP_CONTRACT_FUNGIBLE_TOKEN)\n  .put(\"0xNonFungibleToken\", process.env.REACT_APP_CONTRACT_NON_FUNGIBLE_TOKEN)\n  .put(\"0xNFTStorefront\", process.env.REACT_APP_CONTRACT_NFT_STOREFRONT)\n  .put(\"0xHandyItems\", process.env.REACT_APP_CONTRACT_HANDY_ITEMS)\n  .put(\"0xFlowToken\", process.env.REACT_APP_CONTRACT_FLOW_TOKEN)\n  .put(\"0xFUSD\", process.env.REACT_APP_CONTRACT_FUSD_TOKEN)\n  .put(\"decoder.Type\", val => val.staticType)\n\n  console.log(process.env)\n\nReactDOM.render(\n  <React.StrictMode>\n    <RecoilRoot>\n      <Router>\n        <Switch>\n          <Route exact path=\"/publish\">\n            <Suspense fallback={null}>\n              <Publish />\n            </Suspense>\n          </Route>\n          <Route exact path=\"/list\">\n            <List />\n          </Route>\n          <Route exact path=\"/market\">\n            <Market />\n          </Route>\n          <Route exact path=\"/mintpanel/assets\">\n            <Assets />\n          </Route>\n          <Route exact path=\"/mintpanel/mintnft\">\n            <MintNFT />\n          </Route>\n          <Route exact path=\"/mintpanel/collections\">\n            <Collections />\n          </Route>\n          <Route exact path=\"/mywallet\">\n            <MyWallet />\n          </Route>\n          <Route exact path=\"/init\">\n            <InitAcc />\n          </Route>\n          <Route exact path=\"/series/:id\">\n            <Suspense fallback={null}>\n              <Edition />\n            </Suspense>\n          </Route>\n          <Route path=\"/editions/:id\" children={<Purchase />} />\n          <Route exact path=\"/\">\n            <Suspense fallback={null}>\n              <Series />\n            </Suspense>\n          </Route>\n          <Route>\n            <NotFound />\n          </Route>\n        </Switch>\n      </Router>\n    </RecoilRoot>\n  </React.StrictMode>\n  ,\n  document.getElementById(\"root\")\n)\n\nreportWebVitals()"],"sourceRoot":""}